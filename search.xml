<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>java基础</title>
    <url>/post/b4562165.html</url>
    <content><![CDATA[<h1 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h1><hr>
<h1 id="day01"><a href="#day01" class="headerlink" title="day01"></a>day01</h1><h2 id="一、变量"><a href="#一、变量" class="headerlink" title="一、变量"></a>一、变量</h2><ol>
<li><p>什么是变量 就是内存中的一个存储空间，相当于一个代词 </p>
</li>
<li><p>变量的作用 让代码变得简洁，复用性好。 </p>
</li>
<li><p>如何使用变量</p>
<ul>
<li><p>1.变量的声明（创建） </p>
</li>
<li><p>2.变量的初始化</p>
</li>
</ul>
</li>
<li><p>使用变量的注意事项</p>
<ul>
<li><p>1.命名规范 </p>
</li>
<li><p>2.规定 不能以数字开头、 不能用java关键字、 同一范围内变量名不能重复、 没有声明的变量不能使用、 需要往变量里面存的数据类型，必须和变量的类型保持一致</p>
</li>
</ul>
</li>
<li><p>java数据类型</p>
<ul>
<li>分类：基本数据类型<ul>
<li>1.整数类型 <code>byte</code> <code>short</code> <code>int</code>  <code>long </code></li>
<li>2.小数类型 <code>float</code>  <code>double</code></li>
<li>3.字符类型 <code>char </code></li>
<li>4.布尔类型 <code>boolean</code> 默认值是<code>false</code> 引用数据类型</li>
</ul>
</li>
</ul>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo01</span>变量 &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 如何使用变量</span></span><br><span class="line">        <span class="comment">//   1.变量的声明（创建）:就是在内存中开辟一个整型空间，名字叫a</span></span><br><span class="line">        <span class="type">int</span> a;</span><br><span class="line">        <span class="comment">//   2.变量的初始化：就是往变量里面存一个值</span></span><br><span class="line">        a = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="二、运算符"><a href="#二、运算符" class="headerlink" title="二、运算符"></a>二、运算符</h2><ul>
<li>java中的运算符（运算符：运算一定会有结果） <ul>
<li>1.算术运算符   + - * &#x2F; %(取模) ++（自增） –（自减） </li>
<li>2.赋值运算符   &#x3D; +&#x3D;…. </li>
<li>3.关系运算符   &lt; &gt; !&#x3D; </li>
<li>4.逻辑运算符   &amp;&#x2F;&amp;&amp;     |&#x2F;||     ! </li>
<li>5.连接运算符   + java中的多态(事物存在的多种形态 水：水蒸气 冰)….. </li>
<li>6.三目运算符   (关系运算符)? 表达式1 : 表达式2</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo02</span>运算符 &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 三目运算符</span></span><br><span class="line"><span class="comment">         * (关系运算表达式)? 表达式1 : 表达式2</span></span><br><span class="line"><span class="comment">         *  执行流程：</span></span><br><span class="line"><span class="comment">         *      1.计算关系运算表达式的结果（boolean类型）</span></span><br><span class="line"><span class="comment">         *      2.若关系运算表达式的结果为true,</span></span><br><span class="line"><span class="comment">         *          则整个三目运算表达式的结果是表达式1</span></span><br><span class="line"><span class="comment">         *      3.若关系运算表达式的结果为false,</span></span><br><span class="line"><span class="comment">         *          则整个三目运算表达式的结果是表达式2</span></span><br><span class="line"><span class="comment">         * 思考：</span></span><br><span class="line"><span class="comment">         *  和if语句有什么区别？</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">a1</span> <span class="operator">=</span> <span class="number">100</span>, b1=<span class="number">200</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> a1&gt;b1?<span class="string">&quot;正确&quot;</span>:<span class="string">&quot;错误&quot;</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;result===&quot;</span>+result);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(a1&gt;b1)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;正确&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;正确&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;错误&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;错误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 连接运算符 +</span></span><br><span class="line"><span class="comment">         *  当+号左右两边，有一边是字符串的时候（双引号括起来的东西就是字符串）</span></span><br><span class="line"><span class="comment">         *  那么这个+号 就有两个功能：</span></span><br><span class="line"><span class="comment">         *      1.进行字符串拼接</span></span><br><span class="line"><span class="comment">         *      2.进行类型转换，将其他数据类型转换成String类型</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;a=&quot;</span>+a;</span><br><span class="line">        <span class="comment">//&quot;a=100&quot;</span></span><br><span class="line">        System.out.println(str);</span><br><span class="line">        <span class="comment">//     &quot;100&quot; + 200</span></span><br><span class="line">        str = <span class="string">&quot;&quot;</span> + <span class="number">100</span> + <span class="number">200</span>;</span><br><span class="line">        <span class="comment">//&quot;100200&quot;</span></span><br><span class="line">        System.out.println(str);</span><br><span class="line">        <span class="comment">//  300 + &quot;&quot;</span></span><br><span class="line">        str = <span class="number">100</span> + <span class="number">200</span> + <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="comment">//&quot;300&quot;</span></span><br><span class="line">        System.out.println(str);</span><br><span class="line">        <span class="comment">//面试题</span></span><br><span class="line">        <span class="comment">//&quot;1156&quot;</span></span><br><span class="line">        System.out.println(<span class="number">5</span> + <span class="number">6</span> + <span class="string">&quot;&quot;</span> + <span class="number">5</span> + <span class="number">6</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="三、循环"><a href="#三、循环" class="headerlink" title="三、循环"></a>三、循环</h2><ul>
<li>循环结构： <ul>
<li>1.定义：在java编程里面，需要反复执行某段代码的时候，就要用循环 </li>
<li>2.为什么要有循环结构:简化代码 </li>
<li>3.java中循环的分类 while、dowhile、for循环 </li>
<li>4.循环三要素(每次，你要写循环的时候，回想循环三要素) <ul>
<li>1.循环的初始值 就是循环从什么时候开始 </li>
<li>2.循环条件 满足什么条件才开始循环</li>
<li>3.循环体 就是需要反复执行的那段代码</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo03</span>循环结构 &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * for(初始化语句;循环条件;控制循环条件语句)&#123;</span></span><br><span class="line"><span class="comment">         *     循环体</span></span><br><span class="line"><span class="comment">         * &#125;</span></span><br><span class="line"><span class="comment">         * 执行流程：</span></span><br><span class="line"><span class="comment">         *  1.执行初始化语句</span></span><br><span class="line"><span class="comment">         *  2.判断循环条件（关系运算表达式）boolean类型</span></span><br><span class="line"><span class="comment">         *  3.若循环条件结果为true,执行循环体</span></span><br><span class="line"><span class="comment">         *  4.再执行控制循环条件语句</span></span><br><span class="line"><span class="comment">         *  5.再回到第2步，依次往复执行，直到循环条件结果为false，for循环结束，程序继续向下执行</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; <span class="number">100</span> ;i++)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;行动是成功的阶梯，动的越多，登的越高....&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 以下输出结果是什么？</span></span><br><span class="line"><span class="comment">         *  1.语法错误</span></span><br><span class="line"><span class="comment">         *  2.....</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(System.out.println(<span class="string">&quot;A&quot;</span>);i&lt;<span class="number">5</span>; System.out.println(<span class="string">&quot;B&quot;</span>) )&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;C&quot;</span>);</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="四、嵌套循环"><a href="#四、嵌套循环" class="headerlink" title="四、嵌套循环"></a>四、嵌套循环</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo04</span>嵌套循环 &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 嵌套循环：</span></span><br><span class="line"><span class="comment">     *    就是循环中还有循环,循环的循环体还是循环</span></span><br><span class="line"><span class="comment">     *  1*1=1</span></span><br><span class="line"><span class="comment">     *  1*2=1 2*2=4</span></span><br><span class="line"><span class="comment">     *  1*3=3 2*3=6 3*3=9</span></span><br><span class="line"><span class="comment">     *  ...........</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *  *=</span></span><br><span class="line"><span class="comment">     *  *= *=</span></span><br><span class="line"><span class="comment">     *  ***</span></span><br><span class="line"><span class="comment">     *  ****</span></span><br><span class="line"><span class="comment">     *  *****</span></span><br><span class="line"><span class="comment">     *  诀窍：</span></span><br><span class="line"><span class="comment">     *      1.分清楚什么是行，什么列</span></span><br><span class="line"><span class="comment">     *      2.外层循环，控制行数，内层循环控制列数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">            <span class="comment">//外层循环  控制行数</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">                <span class="comment">//内层循环  控制列数</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;i+<span class="number">1</span>;j++)&#123;</span><br><span class="line">                    <span class="comment">//内层循环控制列数所以打印星星的代码要写在内层循环</span></span><br><span class="line">                    <span class="comment">//\t表示制表符  相当于一个tab键   4个空格</span></span><br><span class="line">                    System.out.print(j+<span class="string">&quot;*&quot;</span>+i+<span class="string">&quot;=&quot;</span>+i*j+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println();<span class="comment">//空的输出语句作用：就是换行</span></span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="五、冒泡排序"><a href="#五、冒泡排序" class="headerlink" title="五、冒泡排序"></a>五、冒泡排序</h2><p><img src="/../pic/1.jpg"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo05</span>冒泡排序 &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 冒泡排序：</span></span><br><span class="line"><span class="comment">     *      1.相邻的两个元素比较，左边比右边的大就互换位置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//整型数组</span></span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">        System.out.println(<span class="string">&quot;排序前：&quot;</span>+Arrays.toString(arr));</span><br><span class="line">        <span class="comment">//外层循环控制行数</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;arr.length-<span class="number">1</span>;i++)&#123;</span><br><span class="line">            <span class="comment">//内层循环控制列数</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;arr.length-<span class="number">1</span>-i;j++)&#123;</span><br><span class="line">                <span class="comment">//编写对比替换逻辑</span></span><br><span class="line">                <span class="comment">//如果左边的元素比右边的元素大</span></span><br><span class="line">                <span class="keyword">if</span>(arr[j]&gt;arr[j+<span class="number">1</span>])&#123;</span><br><span class="line">                    <span class="comment">//就互换位置</span></span><br><span class="line">                    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[j];</span><br><span class="line">                    arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">                    arr[j+<span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Arrays.sort(arr);</span><br><span class="line">        <span class="comment">//打印数组的API</span></span><br><span class="line">        System.out.println(<span class="string">&quot;排序后：&quot;</span>+Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="六、方法"><a href="#六、方法" class="headerlink" title="六、方法"></a>六、方法</h2><ul>
<li><p>方法 </p>
<ul>
<li><p>1.什么是方法 还有一种叫法：功能，函数一个意思，其实就是完成特定功能的代码块 举例：手机是一个工具，这个工具有很多功能，打电话，发短信，上网，照相。。。 为什么手机可以打电话，是因为里面有一系列的流程，其实就是一些代码，能够让我们的硬件去工作 </p>
</li>
<li><p>2.方法的作用 </p>
<ul>
<li>1.提高代码的复用性 </li>
<li>2.可以封装自己的逻辑，也可以调用其他人写的逻辑 比如<code>System.out.println()</code> 就是在调用其他人写的方法</li>
</ul>
</li>
<li><p>3.方法的格式 修饰符 返回值类型 方法名(参数类型 参数,参数类型 参数,参数类型 参数….){ 方法体语句；（完成特定功能的代码块） return 返回值; } </p>
</li>
<li><p>1.修饰符：<code>public static</code> (目前是固定的，后面还可以省略static以及private其他写法，边学边讲) </p>
</li>
<li><p>2.返回值类型:任何一个方法都可以有返回值，既然是返回值，就一定会有返回值的类型，如果没有返回值，就写void </p>
</li>
<li><p>3.参数类型：参数的数据类型 </p>
</li>
<li><p>4.参数： </p>
<ul>
<li>1.实际参数（实参） 实际参与运算的 </li>
<li>2.形式参数（形参） 写在方法上小括号里面的，用于接收实参用的</li>
</ul>
</li>
<li><p>5.方法体语句:特定功能的代码块 </p>
</li>
<li><p>6.<code>return </code>结束方法 </p>
</li>
<li><p>7.返回值 就是你这个方法（功能）经过一系列运算后得到的结果，由return带给调用者 </p>
</li>
<li><p>4.方法的种类 </p>
<ul>
<li>1.无参无返回值</li>
<li>2.有参无返回值 </li>
<li>3.无参有返回值 </li>
<li>4.有参有返回值</li>
</ul>
</li>
<li><p>5.使用方法的注意事项 </p>
<ul>
<li>1.方法不调用是不执行</li>
<li>2.方法和方法在创建是平级关系 </li>
<li>3.方法定义时，小括号里面的参数，用逗号隔开 </li>
<li>4.方法调用时，有参数必须传递参数，但是不用传递参数的类型 </li>
<li>5.如果方法体经过一系列运算后，有返回值，一定要写<code>return</code>，将返回值带给调用者</li>
</ul>
</li>
</ul>
</li>
<li><p>需求： 求2个整数的和？？？ 思考：如何写一个方法来完成我们的需求？？？ </p>
<ul>
<li>1.明确返回值类型（考虑这个方法有没有返回值） </li>
<li>2.明确参数列表（考虑这个方法有几个需要参与运算的数）</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> day01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo06</span>方法 &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>,b = <span class="number">20</span>;</span><br><span class="line">            <span class="comment">//a是实际参数，因为代码走到这里，a里面已经有值了</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> sum(a,b);</span><br><span class="line">        System.out.println(sum);</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">5</span>&#125;;</span><br><span class="line">        sort(arr);</span><br><span class="line">        <span class="comment">//[1, 2, 3, 4, 5, 6]</span></span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/*</span></span><br><span class="line"><span class="comment">   需求：1.编写一个属于自己的冒泡排序方法？？？</span></span><br><span class="line"><span class="comment">   思考：如何写一个方法来完成我们的需求？？？</span></span><br><span class="line"><span class="comment">            *      1.明确返回值类型（考虑这个方法有没有返回值）</span></span><br><span class="line"><span class="comment">            *      2.明确参数列表（考虑这个方法有几个需要参与运算的数）*/</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(<span class="type">int</span>[] arr)</span>&#123;</span><br><span class="line">        <span class="comment">//写排序的逻辑</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;arr.length-<span class="number">1</span>;i++)&#123;</span><br><span class="line">            <span class="comment">//内层循环控制列数</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;arr.length-<span class="number">1</span>-i;j++)&#123;</span><br><span class="line">                <span class="comment">//编写对比替换逻辑</span></span><br><span class="line">                <span class="comment">//如果左边的元素比右边的元素大</span></span><br><span class="line">                <span class="keyword">if</span>(arr[j]&gt;arr[j+<span class="number">1</span>])&#123;</span><br><span class="line">                    <span class="comment">//就互换位置</span></span><br><span class="line">                    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[j];</span><br><span class="line">                    arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">                    arr[j+<span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> a</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> b</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>&#123;<span class="comment">//a是形参，因为a里面的值是不确定</span></span><br><span class="line">        <span class="keyword">return</span> a+b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="七、方法重载"><a href="#七、方法重载" class="headerlink" title="七、方法重载"></a>七、方法重载</h2><ul>
<li>方法重载（<code>overload</code>）:方法名相同，参数列表不同，与返回值类型无关 <ul>
<li>注意：参数的顺序不同也算重载，但是实际生产这么写没有意义 什么时候用重载，就是你如果有一套逻辑是相同，但是参数不同，然后你又懒得起一个新的名字，就用重载</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo07</span>方法重载 &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 求2个数的和</span></span><br><span class="line"><span class="comment">         * 求3个数的和</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> a,<span class="type">double</span> b)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">int</span>) (a+b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> a,<span class="type">double</span> b,<span class="type">int</span> c)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">int</span>) (a+b+c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="八、面向对象"><a href="#八、面向对象" class="headerlink" title="八、面向对象"></a>八、面向对象</h2><ul>
<li><p>面向过程：c语言 </p>
<ul>
<li>强调的是过程：也就是第一步做什么，第二步做什么。。。</li>
</ul>
</li>
<li><p>面向对象：java python 强调的是结果（对象（对象里面第一步，第二步）） </p>
<ul>
<li><p>特点： </p>
<ul>
<li>1.可以将复杂的事情，简单化。 </li>
<li>2.让我们从执行者，变成了指挥者（角色发生了转变）</li>
</ul>
</li>
<li><p>特征： </p>
<ul>
<li>1.<code>封装(encapsulation) </code></li>
<li>2.<code>继承(inheritance) </code></li>
<li>3.<code>多态(polymorphism) </code></li>
</ul>
</li>
</ul>
</li>
<li><p>类和对象 </p>
<ul>
<li><p>1.思考1：我们学习编程目的是什么？</p>
<ul>
<li>就是为了把日常生活中的事物，用编程语言描述出来，并解决一些问题。</li>
</ul>
</li>
<li><p>2.思考2：我们是如何描述现实世界中的事物的？</p>
<ul>
<li>属性：该事物的描述信息（举例：手机：尺寸，颜色，品牌，价格） </li>
<li>行为：该事物能做什么（举例：手机：打电话，发短信，上网）</li>
</ul>
</li>
<li><p>3.思考3：java中如何描述一个类？</p>
<ul>
<li>成员变量：（事物的属性）写在类中，方法外的 </li>
<li>成员方法：（事物的行为）写在类中，去掉<code>static</code>(static表示静态以后再说) 所以说一个类最基本的一般是由成员变量和成员方法组成的。</li>
</ul>
</li>
<li><p>4.java如何定义一个类 </p>
<ul>
<li>其实就是在一个class中，定义成员变量和成员方法</li>
</ul>
</li>
<li><p>5.类和对象之间的关系？ </p>
<ul>
<li>类：抽象出一些事物的共有属性和行为</li>
<li>对象：对该类的具体描述 </li>
<li>举例： <ul>
<li>类：学生 </li>
<li>对象：具体的某一个学生就是对象 </li>
<li>类：王者荣耀的坦克 </li>
<li>对象：猪八戒就是对象</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo08</span>面向对象 &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试类测试方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 创建一个学生对象</span></span><br><span class="line"><span class="comment">         *   类名 对象名 = new 类名();</span></span><br><span class="line"><span class="comment">         * 如何使用里面的成员变量，成员方法</span></span><br><span class="line"><span class="comment">         * 对象名.变量名</span></span><br><span class="line"><span class="comment">         * 对象名.方法名</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">stu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        stu.name = <span class="string">&quot;Andy&quot;</span>;</span><br><span class="line">        System.out.println(stu.name);</span><br><span class="line">        stu.study();</span><br><span class="line">        <span class="comment">//以上就是创建了学生对象，并使用它来帮助我们存储数据，以及输出功能</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义一个手机类，要有属性和行为。。。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 一个.java源文件中，可以有多个class，但是public修饰的只能有一个</span></span><br><span class="line"><span class="comment"> *学生类  封装...  方法的封装，还有类的封装</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  成员变量</span></span><br><span class="line"><span class="comment">     *  姓名，年龄，性别</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    String gender;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 成员方法</span></span><br><span class="line"><span class="comment">     * 学习、睡觉</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">study</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;学习...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;睡觉...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="day02"><a href="#day02" class="headerlink" title="day02"></a>day02</h1><h2 id="1-封装"><a href="#1-封装" class="headerlink" title="1.封装"></a>1.封装</h2><ul>
<li><p>封装： </p>
<ul>
<li>1.概述 隐藏对象的属性和行为（实现逻辑的细节）,仅仅只提供对外公共访问的方式。Arrays.sort(); </li>
<li>2.好处 <ul>
<li>1.复用，提高代码的简洁性 </li>
<li>2.作出了属性和行为逻辑的隐藏，只提供对外的公共访问方式。 </li>
<li>3.提高安全性</li>
</ul>
</li>
</ul>
</li>
<li><p>3.封装的原则 将不需要对外提供的内容都隐藏起来 把属性隐藏，提供公共方法对外开放访问操作权限</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo01</span>封装 &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Demo</span>().method();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 输出100句helloWorld</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Demo</span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 输出100句helloWorld</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;HelloWorld&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-private关键字"><a href="#2-private关键字" class="headerlink" title="2.private关键字"></a>2.private关键字</h2><ul>
<li>private:私有 public公共 <ul>
<li>1.是一个权限修饰符 </li>
<li>2.可以修饰成员变量，成员方法 </li>
<li>3.被其修饰的成员只能在本类中访问 </li>
<li>4.一般private修饰的成员变量搭配setget方法去用 </li>
<li>5.private是封装的一种体现形式，不能说封装就是私</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo02private</span>关键字 &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Hero</span> <span class="variable">hero</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hero</span>();</span><br><span class="line">       <span class="comment">// hero.name = &quot;鸡你太美&quot;;</span></span><br><span class="line">        hero.setName(<span class="string">&quot;鸡你太美&quot;</span>);</span><br><span class="line">        System.out.println(hero.getName());</span><br><span class="line">        <span class="comment">//reflect 反射  暴力反射，就是可以直接获取到private修饰的成员  spring框架就是通过反射实现</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 英雄类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Hero</span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 被其修饰的成员只能在本类中访问,</span></span><br><span class="line"><span class="comment">     * 提供set get 方法对外提供访问权限</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">//存</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;鸡你太美&quot;</span>.equals(name))&#123;</span><br><span class="line">            <span class="comment">//this表示本类对象,作用就是用来区分成员变量和局部变量重名的问题</span></span><br><span class="line">            <span class="built_in">this</span>.name=<span class="string">&quot;*****&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//取</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-继承"><a href="#3-继承" class="headerlink" title="3.继承"></a>3.继承</h2><blockquote>
<p>面向对象的3大特征：封装、 继承 、多态</p>
</blockquote>
<ul>
<li><p>继承： </p>
</li>
<li><p>1.概念 </p>
<ul>
<li>让类和类之间产生父子关系，同时子类可以拥有父类所有非私有属性和行为（方法）</li>
</ul>
</li>
<li><p>2.好处 </p>
<ul>
<li>简化代码，同时让类和类之间产生了联系，是多态的前提</li>
</ul>
</li>
<li><p>3.弊端 </p>
<ul>
<li>代码和代码的耦合度增加了</li>
</ul>
</li>
<li><p>4.语法 </p>
<ul>
<li>子类 <code>extends</code> 父类</li>
</ul>
</li>
<li><p>5.注意事项 </p>
<ul>
<li>1.java不允许多继承 </li>
<li>2.继承是由传递性的 <code>java</code>顶级父类是<code>object </code></li>
<li>3.java中所有类（<code>class</code>）都是要么直接继承<code>object</code>，要么间接继承<code>object</code></li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo03</span>继承 &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">TDog</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TDog</span>();</span><br><span class="line">        t.eat();</span><br><span class="line">        t.sleep();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 父类 动物类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    String color;</span><br><span class="line">    <span class="type">int</span> leg;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;吃饭&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;睡觉&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 子类 狗类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">kanjia</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;狗会看家&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 子类 舔狗</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TDog</span> <span class="keyword">extends</span> <span class="title class_">Dog</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">T</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;一无所有&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul>
<li><p>1.java不允许多继承 </p>
</li>
<li><p>2.继承是由传递性的 java顶级父类是object </p>
</li>
<li><p>3.java中所有类（class）都是要么直接继承object，要么间接继承object </p>
</li>
<li><p>4.子类不能继承父类的构造方法,但是可以通过super()去访问父类构造方法 </p>
</li>
<li><p>5.子类中所有的构造方法，默认都会访问父类的无参构造？ </p>
<ul>
<li>为什么？ <ul>
<li>因为子类会继承父类中的数据，可能还会使用父类中的数据, 所以子类在初始化之前，一定要先将父类进行初始化</li>
</ul>
</li>
</ul>
</li>
<li><p>6.思考：如果父类中，没有无参构造怎么解决调用的问题？也就是说子类应该怎么办？ </p>
<ul>
<li>1.super解决 </li>
<li>2.this解决</li>
</ul>
</li>
</ul>
<h2 id="4-方法重写"><a href="#4-方法重写" class="headerlink" title="4.方法重写"></a>4.方法重写</h2><ul>
<li><p>方法重写（掌握） </p>
<ul>
<li><p>1.什么是方法重写 </p>
<ul>
<li>重写：子类父类出现一模一样的方法（注意：返回值类型可以是子父类，学完面向对象讲）</li>
</ul>
</li>
<li><p>2.方法重写的应用 </p>
<ul>
<li>当子类除了需要父类的功能，又需要子类自己独有的新功能时，就可以用方法重写 </li>
<li>这样既沿袭了父类的功能，又有子类特有的功能</li>
</ul>
</li>
<li><p>3.重写的注意事项： </p>
<ul>
<li>1.父类中私有方法不可以被重写 </li>
<li>2.子类重写父类方法时，访问权限不能比父类方法低（最好一致） </li>
<li>3.子类重写方法方法的时候，最好声明一模一样</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo04</span>方法重写 &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ChatGPT4</span> <span class="variable">chatGPT4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChatGPT4</span>();</span><br><span class="line">        chatGPT4.method();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * chatgpt3</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ChatGPT3</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;识别文字&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ChatGPT4</span> <span class="keyword">extends</span> <span class="title class_">ChatGPT3</span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *     对父类继承过来的方法逻辑进行修改，迭代</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//super 表示父类引用 可以直接调用父类的method方法</span></span><br><span class="line">        <span class="built_in">super</span>.method();</span><br><span class="line">        System.out.println(<span class="string">&quot;识别图片&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="5-多态"><a href="#5-多态" class="headerlink" title="5.多态"></a>5.多态</h2><p><img src="/../pic/2.jpg"></p>
<p><img src="/../pic/3.jpg"></p>
<ul>
<li><p>多态：（事物存在的多种形态，水 固态叫冰，气态叫水蒸气）</p>
</li>
<li><p>java中多态： </p>
</li>
<li><p>多态的前提： </p>
<ul>
<li>1.要有继承关系 </li>
<li>2.要有方法重写 </li>
<li>3.要有向上造型（父类引用指向子类对象）</li>
</ul>
</li>
<li><p>多态中： </p>
<ul>
<li>成员变量编译看左边，运行看左边 </li>
<li>成员方法编译看左边，运行看右边 </li>
<li>静态方法编译看编译看左边，运行看左边 </li>
<li>但是静态方法是隶属本类的，不能被继承，所以谈不上重写</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo05</span>多态 &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//3.要有向上造型（父类引用指向子类对象）</span></span><br><span class="line">        <span class="comment">//父类引用指向子类对象  翻译成你能理解的中文：Tom是一只猫</span></span><br><span class="line">        <span class="type">Cat</span> <span class="variable">cat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Tom</span>();</span><br><span class="line">        <span class="comment">//成员变量编译看=左边，运行看=左边</span></span><br><span class="line">        System.out.println(cat.legs);</span><br><span class="line">        cat.eat();</span><br><span class="line">        <span class="comment">//相当于是Cat.sleep();</span></span><br><span class="line">        cat.sleep();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实际开发多态一般把父类引用作为形式参数写在方法中接收子类对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cat</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">(Cat cat)</span>&#123;<span class="comment">//Cat cat = new Tom()  动态加载</span></span><br><span class="line">        cat.eat();<span class="comment">//Tom吃Jerry  调用的是子类的成员方法</span></span><br><span class="line">        <span class="comment">//2    调用的是父类的成员变量</span></span><br><span class="line">        System.out.println(cat.legs);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 父类 猫类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">legs</span> <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;猫吃饭......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;猫睡觉&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 子类 Tom</span></span><br><span class="line"><span class="comment"> * 1.要有继承关系</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Tom</span> <span class="keyword">extends</span> <span class="title class_">Cat</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">legs</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  2.要有方法重写</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">   <span class="comment">/* public void eat()&#123;</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;Tom吃Jerry......&quot;);</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Tom睡觉&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 子类 多来A梦</span></span><br><span class="line"><span class="comment"> * 1.要有继承关系</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">class 多来A梦 <span class="keyword">extends</span> <span class="title class_">Cat</span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  2.要有方法重写</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">/*public void eat()&#123;</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;多来A梦吃铜锣烧......&quot;);</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo06</span>多态的注意事项 &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       <span class="comment">/* //向上造型：父类引用指向子类对象</span></span><br><span class="line"><span class="comment">        Tank tank = new ZhuBaJie();</span></span><br><span class="line"><span class="comment">        tank.pingA();</span></span><br><span class="line"><span class="comment">        //多态的弊端：不可以直接调用子类独有的方法</span></span><br><span class="line"><span class="comment">        //tank.圈养时刻();</span></span><br><span class="line"><span class="comment">        //向下造型:把父类引用强制转换成子类引用</span></span><br><span class="line"><span class="comment">        ZhuBaJie zhuBaJie = (ZhuBaJie)tank;</span></span><br><span class="line"><span class="comment">        zhuBaJie.圈养时刻();</span></span><br><span class="line"><span class="comment">        Tank tank1 = new ChenYaoJin();*/</span></span><br><span class="line">        method(<span class="keyword">new</span> <span class="title class_">ZhuBaJie</span>());</span><br><span class="line">        method(<span class="keyword">new</span> <span class="title class_">ChenYaoJin</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 方法抽取</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">(Tank tank)</span>&#123;<span class="comment">//Tank tank = new ChenYaoJin();</span></span><br><span class="line">        tank.pingA();</span><br><span class="line">        <span class="comment">//(ZhuBaJie)ChenYaoJin;ClassCastException</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * instanceof 判断某个引用的类型</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span>(tank <span class="keyword">instanceof</span> ZhuBaJie)&#123;</span><br><span class="line">            <span class="type">ZhuBaJie</span> <span class="variable">zhuBaJie</span> <span class="operator">=</span> (ZhuBaJie) tank;</span><br><span class="line">            zhuBaJie.圈养时刻();</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(tank <span class="keyword">instanceof</span> ChenYaoJin)&#123;</span><br><span class="line">            <span class="type">ChenYaoJin</span> <span class="variable">chenYaoJin</span> <span class="operator">=</span> (ChenYaoJin) tank;</span><br><span class="line">            chenYaoJin.正义潜能();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 父类：坦克</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Tank</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pingA</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;平A&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 子类：程咬金</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ChenYaoJin</span> <span class="keyword">extends</span> <span class="title class_">Tank</span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 重写父类的pingA成员方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pingA</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;两把斧子旋转&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 子类独有的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> 正义潜能()&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;5秒真男人&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 子类：猪八戒</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ZhuBaJie</span> <span class="keyword">extends</span> <span class="title class_">Tank</span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 重写父类的pingA成员方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pingA</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;肉蛋蹦床&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 子类独有的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> 圈养时刻()&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;释放一个屏障，限制敌人的走位&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-static"><a href="#6-static" class="headerlink" title="6.static"></a>6.static</h2><ul>
<li><p>static关键字： </p>
<ul>
<li><p>1.随着类的加载而加载（其实就是跟随字节码文件加载而加载） </p>
</li>
<li><p>2.优先于对象而存在的 </p>
</li>
<li><p>3.可以被类的所有对象共享 </p>
<ul>
<li>这句话就告诉我们，什么时候该用静态来修饰成员</li>
<li>班级编号 是一个成员属性，可以被所有学生共享，可以用static修饰 </li>
<li>饮水机 static 水杯 不能用static </li>
<li>共性用静态，非共性用非静态</li>
</ul>
</li>
<li><p>4.可以直接通过类名.出来 </p>
</li>
<li><p>5.注意事项： </p>
<ul>
<li>1.在静态方法中是没有this关键字的，因为静态随着着类的加载而加载，this是随着对象创建而存在的 </li>
<li>2.静态比对象优先存在 </li>
<li>3.静态方法只能访问静态成员变量或者静态成员方法 </li>
<li>4.非静态方法可以访问非静态成员，也可以访问静态成员 </li>
<li>5.诀窍：记住静态只能访问静态就可以</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo07static</span>关键字 &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">stu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        stu.name=<span class="string">&quot;Andy&quot;</span>;</span><br><span class="line">        Student.college = <span class="string">&quot;软件学院&quot;</span>;</span><br><span class="line">        stu.say();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 学院</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> String college;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(name+<span class="string">&quot;:&quot;</span>+college);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//在静态方法中是没有this关键字的，因为静态随着着类的加载而加载，this是随着对象创建而存在的</span></span><br><span class="line">        <span class="comment">/*System.out.println(this.name);*/</span></span><br><span class="line">        System.out.println(college);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="7-构造方法"><a href="#7-构造方法" class="headerlink" title="7.构造方法"></a>7.构造方法</h2><ul>
<li><p>构造方法：（Constructor） </p>
<ul>
<li><p>作用： </p>
<ul>
<li>1.创建对象用 new 类的构造方法() </li>
<li>2.给成员变量进行初始化赋值</li>
</ul>
</li>
<li><p>写法： </p>
<ul>
<li>方法名，和类名必须保持一致 </li>
<li>没有返回值，连void都不能写 </li>
<li>没有具体的返回值return</li>
</ul>
</li>
<li><p>构造的注意： </p>
<ul>
<li>1.在一个类中，你如果不写构造方法，计算机会自动给补充一个无参构造</li>
<li>2.但是一旦你写构造方法，就会用你写的构造方法，原来的无参构造就被踢出了</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo08</span>构造方法 &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 实例化一个Father对象</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        new Father();</span></span><br><span class="line"><span class="comment">        Father f =  new Father(&quot;Andy&quot;,23);</span></span><br><span class="line"><span class="comment">        System.out.println(f.getName());</span></span><br><span class="line"><span class="comment">        System.out.println(f.getAge());*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 成员变量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 有参构造</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> age</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Father</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 方法名，和类名必须保持一致</span></span><br><span class="line"><span class="comment">     *  没有返回值，连void都不能写</span></span><br><span class="line"><span class="comment">     *  没有具体的返回值return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Father</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Father的构造方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>java实训笔记</category>
      </categories>
      <tags>
        <tag>java基础</tag>
        <tag>javase</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 学习路线</title>
    <url>/post/b4562164.html</url>
    <content><![CDATA[<h1 id="Java-学习路线"><a href="#Java-学习路线" class="headerlink" title="Java 学习路线"></a>Java 学习路线</h1><blockquote>
<p>Java 学习路线一条龙版 by 程序员鱼皮</p>
</blockquote>
<p>💂 + 💻 &#x3D; 👴🏽</p>
<p>建议先观看视频导读：<a href="https://www.bilibili.com/video/BV1Qf4y1K7ff/">https://www.bilibili.com/video/BV1Qf4y1K7ff/</a></p>
<h2 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h2><p><img src="https://qiniuyun.code-nav.cn/img/image-20211127235325557.png" alt="image-20211127235325557"></p>
<h2 id="路线特点"><a href="#路线特点" class="headerlink" title="路线特点"></a>路线特点</h2><ol>
<li>最新，完整一条龙的大厂 Java 学习路线，从入门到入土</li>
<li>同时适用于想全面学习 &#x2F; 快速求职的同学，可以根据符号来定制自己的专属学习路线</li>
<li>给出目标、学习建议、关键知识点、最优资源以及各类资源推荐（视频、书籍、文档、项目、工具等）</li>
<li>鱼皮自己是 Java 开发者，融入个人自学和从业的经历 + 思考，让路线有灵魂</li>
<li>划分阶段、更有计划，且在最后给出持续学习的方向、探索 Java 程序员发展的无限可能</li>
<li>完全开源，回馈社区，持续更新！</li>
</ol>
<h2 id="符号表"><a href="#符号表" class="headerlink" title="符号表"></a>符号表</h2><p>可以通过路线知识点前的表情字符，根据自己的实际情况选择学习：</p>
<ul>
<li>🌕 所有同学必须学习！！！</li>
<li>🌖 非常急着找工作，才可不学；目标大厂，必须学习！</li>
<li>🌗 急着找工作的话，可不学；目标大厂，建议学习</li>
<li>🌘 时间充足的话，再去学</li>
<li>⭐ 表示推荐资源</li>
</ul>
<h2 id="写在开头"><a href="#写在开头" class="headerlink" title="写在开头"></a>写在开头</h2><p>首先呢，我们要了解 Java 的应用场景和就业方向，看看和自己的学习目的是否一致。</p>
<p>目前，Java 由于其优秀的特性以及火爆的生态，岗位需求量大，是后台开发、安卓开发、大数据开发的主流编程语言，因此学习资源也很丰富，值得学习！</p>
<p>有关更多编程语言的选择，大家可以看我的视频了解：<a href="https://www.bilibili.com/video/BV1y3411r7pX/">https://www.bilibili.com/video/BV1y3411r7pX/</a></p>
<h2 id="阶段-0：前期准备"><a href="#阶段-0：前期准备" class="headerlink" title="阶段 0：前期准备"></a>阶段 0：前期准备</h2><ol>
<li>准备好一款在线、随时随地写代码的工具，不用在本地去安装和配置，是初学者的好帮手。<ul>
<li>推荐网站 - 菜鸟工具：<a href="https://c.runoob.com/compile/10">https://c.runoob.com/compile/10</a></li>
</ul>
</li>
<li>准备一款记笔记的软件，学编程的过程中老师的思路、自己遇到的问题、解决问题的方法、心得感悟、遇到的好资料，都要记下来哦，好记性不如烂笔头，可以帮助你事半功倍。<ul>
<li>推荐本地软件 Typora：<a href="https://www.typora.io/">https://www.typora.io/</a> （线上可以用 xx 文档）</li>
<li>推荐使用 Markdown 语法编写，鱼皮教程：<a href="https://www.bilibili.com/video/BV1no4y1k7YT/">https://www.bilibili.com/video/BV1no4y1k7YT/</a></li>
</ul>
</li>
<li>想学好编程，别背代码，要多写，把这句话刻到脑子里。</li>
<li>选视频和找资料的小技巧：多看评论区、多看隔壁评论区、不要看过期的视频。</li>
<li>如何访问 GitHub：<a href="https://mp.weixin.qq.com/s/uBFsuThsZ4kdkZgqfX12qA">https://mp.weixin.qq.com/s/uBFsuThsZ4kdkZgqfX12qA</a> （上面有很多免费的编程学习资源、项目源码，程序员必备）</li>
</ol>
<h2 id="阶段-1：Java-入门"><a href="#阶段-1：Java-入门" class="headerlink" title="阶段 1：Java 入门"></a>阶段 1：Java 入门</h2><h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><p>培养兴趣、快速上手，能运行和编写简单的 Java 程序。</p>
<p>学完本阶段后，可以试着用 Java 解决一些数学计算问题、编写图书管理系统等桌面端 GUI 程序，甚至是五子棋之类的小游戏。</p>
<h3 id="🌕-Java-编程基础（45-天）"><a href="#🌕-Java-编程基础（45-天）" class="headerlink" title="🌕 Java 编程基础（45 天）"></a>🌕 Java 编程基础（45 天）</h3><h4 id="知识"><a href="#知识" class="headerlink" title="知识"></a>知识</h4><ul>
<li>Java 特点（看不懂没事，别背！）</li>
<li>环境搭建</li>
<li>IDEA 开发工具<ul>
<li>新建项目</li>
<li>运行调试</li>
<li>界面配置</li>
<li>插件管理</li>
</ul>
</li>
<li><strong>Java 基础语法</strong><ul>
<li>数据类型</li>
<li>流程控制</li>
</ul>
</li>
<li>数组</li>
<li><strong>面向对象</strong><ul>
<li>方法</li>
<li>重载</li>
<li>封装</li>
<li>继承</li>
<li>多态</li>
</ul>
</li>
<li>抽象类</li>
<li>接口</li>
<li>枚举</li>
<li>常用类<ul>
<li>String</li>
<li>日期时间</li>
</ul>
</li>
<li>集合类</li>
<li>泛型</li>
<li>注解</li>
<li>异常处理</li>
<li>多线程</li>
<li>IO 流</li>
<li>反射</li>
</ul>
<h4 id="学习建议"><a href="#学习建议" class="headerlink" title="学习建议"></a>学习建议</h4><p>初学一门语言时，一定要持续学习，不能中断！</p>
<p>想要学好编程，一定要多敲代码！建议先跟着书上的例子敲一遍代码，然后试着自主编写代码，并完成课后练习。</p>
<p>不理解代码也没关系，可以学习 Debug 后，一行一行地打断点执行，查看程序的执行过程。千万不要觉得麻烦，养成习惯后真的能节省很多重复学习的时间。</p>
<h4 id="经典面试题"><a href="#经典面试题" class="headerlink" title="经典面试题"></a>经典面试题</h4><ol>
<li>为什么重写 equals 还要重写 hashcode？</li>
<li>&#x3D;&#x3D; 和 equals 比较的区别</li>
<li>为啥有时会出现 4.0 - 3.6 &#x3D; 0.40000001 这种现象？</li>
<li>final 关键字的作用</li>
<li>介绍 Java 的集合类</li>
<li>ArrayList 和 LinkedList 的区别</li>
</ol>
<h4 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h4><ul>
<li><p>视频</p>
<ul>
<li>⭐ 韩顺平 - 零基础 30 天学会 Java：<a href="https://www.bilibili.com/video/BV1fh411y7R8">https://www.bilibili.com/video/BV1fh411y7R8</a> （900 多集，顺序安排很合理，每个知识真正的打碎了，通俗、有示例、有实战、有思想）</li>
</ul>
</li>
<li><p>文档</p>
<ul>
<li><p>⭐ 菜鸟教程：<a href="https://www.runoob.com/java/java-tutorial.html">https://www.runoob.com/java/java-tutorial.html</a> （可以在线练习）</p>
</li>
<li><p>廖雪峰 Java 教程：<a href="https://www.liaoxuefeng.com/wiki/1252599548343744">https://www.liaoxuefeng.com/wiki/1252599548343744</a></p>
</li>
<li><p>IDEA 中文教程：<a href="https://github.com/judasn/IntelliJ-IDEA-Tutorial">https://github.com/judasn/IntelliJ-IDEA-Tutorial</a></p>
</li>
<li><p>IDEA Mac 快捷键指南，地址：<a href="https://www.jianshu.com/p/454c71172c46">https://www.jianshu.com/p/454c71172c46</a></p>
</li>
<li><p>IDEA Win 常用快捷键，地址：<a href="https://www.jianshu.com/p/5de7cca0fefc">https://www.jianshu.com/p/5de7cca0fefc</a></p>
</li>
</ul>
</li>
<li><p>书籍</p>
<ul>
<li>《Head First Java》</li>
</ul>
</li>
<li><p>在线游戏</p>
<ul>
<li>Codegym：<a href="https://codegym.cc/zh">https://codegym.cc/zh</a> （玩玩前几关培养兴趣不错，但后面收费了）</li>
</ul>
</li>
</ul>
<h3 id="🌖-Java-8（3-天）"><a href="#🌖-Java-8（3-天）" class="headerlink" title="🌖 Java 8（3 天）"></a>🌖 Java 8（3 天）</h3><h4 id="知识-1"><a href="#知识-1" class="headerlink" title="知识"></a>知识</h4><ul>
<li>Stream API</li>
<li>Lambda 表达式</li>
<li>新日期时间 API</li>
<li>接口默认方法</li>
</ul>
<h4 id="学习建议-1"><a href="#学习建议-1" class="headerlink" title="学习建议"></a>学习建议</h4><p>Java 8 是如今企业开发中最主流的 Java 稳定版本，在这个版本出现了很多实用的新特性，虽然面试考点不多，但能够提升编程效率，建议学习。</p>
<h4 id="经典面试题-1"><a href="#经典面试题-1" class="headerlink" title="经典面试题"></a>经典面试题</h4><ol>
<li>java 8 有哪些新特性？</li>
<li>HashMap 在 jdk 1.7 和 1.8 的区别？</li>
</ol>
<h4 id="资源-1"><a href="#资源-1" class="headerlink" title="资源"></a>资源</h4><ul>
<li><p>视频</p>
<ul>
<li>⭐ 宋红康 - 全网最全Java零基础入门教程：<a href="https://www.bilibili.com/video/BV1Kb411W75N">https://www.bilibili.com/video/BV1Kb411W75N</a> （只看 Java 8 部分即可）</li>
</ul>
</li>
<li><p>文档</p>
<ul>
<li>⭐ 菜鸟教程：<a href="https://www.runoob.com/java/java8-new-features.html">https://www.runoob.com/java/java8-new-features.html</a></li>
</ul>
</li>
<li><p>书籍</p>
<ul>
<li>《Java 8 实战》</li>
</ul>
</li>
<li><p>工具</p>
<ul>
<li>⭐ 在线编写运行  Java 8：<a href="https://www.tutorialspoint.com/compile_java8_online.php">https://www.tutorialspoint.com/compile_java8_online.php</a></li>
</ul>
</li>
<li><p>其他</p>
<ul>
<li>Java 8 小代码片段：<a href="https://github.com/biezhi/30-seconds-of-java8">https://github.com/biezhi/30-seconds-of-java8</a></li>
</ul>
</li>
</ul>
<h3 id="练手项目"><a href="#练手项目" class="headerlink" title="练手项目"></a>练手项目</h3><ul>
<li>Java 实现简单计算器：<a href="https://www.lanqiao.cn/courses/185">https://www.lanqiao.cn/courses/185</a></li>
<li>Eclipse 实现 Java 编辑器：<a href="https://www.lanqiao.cn/courses/287">https://www.lanqiao.cn/courses/287</a></li>
<li>一本糊涂账：<a href="https://how2j.cn/module/104.html">https://how2j.cn/module/104.html</a></li>
<li>Java 五子棋：<a href="https://blog.csdn.net/cnlht/article/details/8176130">https://blog.csdn.net/cnlht/article/details/8176130</a></li>
<li>Java 中国象棋：<a href="https://blog.csdn.net/cnlht/article/details/8205733">https://blog.csdn.net/cnlht/article/details/8205733</a></li>
<li>JAVA GUI 图书馆管理系统：<a href="https://github.com/uboger/LibraryManager">https://github.com/uboger/LibraryManager</a></li>
<li>JAVA 坦克大战小游戏：<a href="https://github.com/wangzhengyi/TankWar">https://github.com/wangzhengyi/TankWar</a></li>
<li>Swing 编写的俄罗斯方块：<a href="https://github.com/HelloClyde/Tetris-Swing">https://github.com/HelloClyde/Tetris-Swing</a></li>
<li>小小记账本：<a href="https://github.com/xenv/SmallAccount">https://github.com/xenv/SmallAccount</a> （适合了解数据库的同学）</li>
</ul>
<h3 id="尾声"><a href="#尾声" class="headerlink" title="尾声"></a>尾声</h3><p>学完了 Java 基础后，有些同学会感到迷茫了啊，感觉好像啥也做不出来，不知道下一步做什么，我这一身的本领该如何施展啊？</p>
<p>不要慌，也不要急着去学新技术，接下来我们要多用 Java 来写代码了，巩固基础，但是写什么呢？</p>
<p>当然是数据结构和算法！</p>
<h2 id="阶段-2：巩固基础"><a href="#阶段-2：巩固基础" class="headerlink" title="阶段 2：巩固基础"></a>阶段 2：巩固基础</h2><h3 id="目标-1"><a href="#目标-1" class="headerlink" title="目标"></a>目标</h3><p>想学好编程，计算机基础知识要学好。</p>
<p>比如算法，是程序员的灵魂。学好算法有助于我们理解程序、开拓思路，因此也是很多公司面试时考察的关键，在找工作前，还是要刷个上百道算法题目的。</p>
<p>我们这个阶段的目标是：熟练使用 Java 语言来编写程序，巩固 Java 基础。（那直接用 Java 来写算法题目，一举两得，岂不美哉？）</p>
<p>此外，建议大家利用零碎时间多去了解 <strong>计算机基础知识</strong> ，比如操作系统、计算机网络等，对你后面学习开发框架之类的知识都有帮助。</p>
<h3 id="Java-基础（30-天）"><a href="#Java-基础（30-天）" class="headerlink" title="Java 基础（30 天）"></a>Java 基础（30 天）</h3><h4 id="学习建议-2"><a href="#学习建议-2" class="headerlink" title="学习建议"></a>学习建议</h4><p>建议大家去阅读 《Java 核心技术卷 1》，这本书堪称经典，是帮助你复习巩固  Java 的不二之选，其中图形界面章节可以选择不看。</p>
<p>之后可以刷牛客的 Java 练习题，检验自己的水平，我当时刷了两遍 1000 题（每天 30 题，1 个月也就刷完了，二刷会更快！）。虽然都是选择题，但能学到很多 Java 语言的特性、避免写代码时容易犯的错误。</p>
<p>如果你时间不够，只是想快速找到工作，那么本章节甚至可以完全跳过，后面慢慢弥补即可。</p>
<h4 id="资源-2"><a href="#资源-2" class="headerlink" title="资源"></a>资源</h4><ul>
<li>书籍<ul>
<li>⭐《Java 核心技术卷 1》</li>
</ul>
</li>
<li>练习<ul>
<li>⭐ 牛客题库：<a href="https://www.nowcoder.com/intelligentTest">https://www.nowcoder.com/intelligentTest</a></li>
</ul>
</li>
</ul>
<h3 id="🌖-数据结构与算法"><a href="#🌖-数据结构与算法" class="headerlink" title="🌖 数据结构与算法"></a>🌖 数据结构与算法</h3><h4 id="知识-2"><a href="#知识-2" class="headerlink" title="知识"></a>知识</h4><ul>
<li><p><strong>时间 &#x2F; 空间复杂度分析</strong></p>
</li>
<li><p>数据结构</p>
<ul>
<li>数组</li>
<li>字符串</li>
<li>队列</li>
<li>栈</li>
<li>链表</li>
<li>集合</li>
<li>哈希表</li>
<li>树<ul>
<li>二叉树</li>
<li>多叉树</li>
<li>字典树</li>
</ul>
</li>
</ul>
</li>
<li><p>算法</p>
<ul>
<li>排序</li>
<li>双指针</li>
<li>查找</li>
<li>分治</li>
<li>动态规划</li>
<li>递归</li>
<li>回溯</li>
<li>贪心</li>
<li>位运算</li>
<li>DFS</li>
<li>BFS</li>
<li>图</li>
</ul>
</li>
</ul>
<h4 id="学习建议-3"><a href="#学习建议-3" class="headerlink" title="学习建议"></a>学习建议</h4><p>学算法一定要多思考、多练习！！！</p>
<p>在复习 Java、巩固基础的过程中，每天可以坚持用 Java 做 2 - 3 道算法题目。</p>
<p>不用担心看不懂，直接进入 LeetCode 学习板块 LeetBook，提供了免费的教程，文字、图解、动画讲算法、在线练习应有尽有，从 0 开始，跟着学习基础知识、跟着教程刷一些同类题目，培养算法思路。</p>
<p>之后再由简单到复杂、由通过率高到低，自主刷题，多看题解，举一反三。一定要把自己做过的每道题目代码都自行保存好，定期复习。时间足够的话，也可以试着自己写写题解，在网上分享一下自己的刷题思路，找到自己坚持的动力。</p>
<p>有条件的朋友也可以试着参与竞赛，没什么门槛，可以帮助你集中精神，而且周赛的题目还是挺友好的~</p>
<h4 id="经典面试题-2"><a href="#经典面试题-2" class="headerlink" title="经典面试题"></a>经典面试题</h4><ul>
<li>LeetCode 精选 100 道：<a href="https://leetcode-cn.com/problem-list/2cktkvj/">https://leetcode-cn.com/problem-list/2cktkvj/</a></li>
<li>LeetCode 精选算法 200 题：<a href="https://leetcode-cn.com/problem-list/qg88wci/">https://leetcode-cn.com/problem-list/qg88wci/</a></li>
</ul>
<h4 id="资源-3"><a href="#资源-3" class="headerlink" title="资源"></a>资源</h4><ul>
<li>文章<ul>
<li>⭐ 刷了 1000 多道算法题，一点心得：<a href="https://t.1yb.co/oT9q">https://t.1yb.co/oT9q</a> （鱼皮原创）</li>
</ul>
</li>
<li>在线教程<ul>
<li>⭐ LeetCode LeetBook：<a href="https://leetcode-cn.com/leetbook/">https://leetcode-cn.com/leetbook/</a></li>
</ul>
</li>
<li>在线刷题<ul>
<li>⭐ LeetCode：<a href="https://leetcode-cn.com/">https://leetcode-cn.com/</a></li>
</ul>
</li>
<li>书籍<ul>
<li>⭐《小灰的漫画算法》</li>
<li>⭐《剑指 Offer》</li>
<li>《程序员代码面试指南》</li>
<li>图解算法数据结构：<a href="https://leetcode-cn.com/leetbook/detail/illustration-of-algorithm/">https://leetcode-cn.com/leetbook/detail/illustration-of-algorithm/</a></li>
<li>LeetCode 101（C++）：<a href="https://github.com/changgyhub/leetcode_101">https://github.com/changgyhub/leetcode_101</a></li>
<li>LeetCode 题解（C++）：<a href="https://github.com/soulmachine/leetcode">https://github.com/soulmachine/leetcode</a></li>
<li>LeetCode Cookbook（Go 语言）：<a href="https://github.com/halfrost/LeetCode-Go">https://github.com/halfrost/LeetCode-Go</a></li>
</ul>
</li>
<li>视频<ul>
<li>尚硅谷 Java 数据结构与算法：<a href="https://www.bilibili.com/video/BV1E4411H73v">https://www.bilibili.com/video/BV1E4411H73v</a> （难度比面试的要求大一些，适合希望更全面学习的朋友）</li>
<li>Leetcode 真题解析：<a href="https://www.bilibili.com/video/BV1a54y1b74k">https://www.bilibili.com/video/BV1a54y1b74k</a></li>
</ul>
</li>
<li>工具<ul>
<li>VisuAlgo 数据结构和算法动态可视化：<a href="https://visualgo.net/zh">https://visualgo.net/zh</a></li>
<li>数据结构可视化：<a href="https://www.cs.usfca.edu/~galles/visualization/Algorithms.html">https://www.cs.usfca.edu/~galles/visualization/Algorithms.html</a></li>
<li>RegExr：<a href="https://www.code-nav.cn/rd/?rid=79550af2601114e9012110711798772b">https://www.code-nav.cn/rd/?rid=79550af2601114e9012110711798772b</a> （学习、创建和测试正则表达式的在线可视化工具）</li>
</ul>
</li>
<li>网站<ul>
<li>五分钟学算法：<a href="https://www.cxyxiaowu.com/">https://www.cxyxiaowu.com/</a></li>
</ul>
</li>
</ul>
<h3 id="🌘-计算机导论"><a href="#🌘-计算机导论" class="headerlink" title="🌘 计算机导论"></a>🌘 计算机导论</h3><h4 id="知识-3"><a href="#知识-3" class="headerlink" title="知识"></a>知识</h4><ul>
<li>计算机发展历史</li>
<li>计算机应用领域</li>
<li>计算机发展方向</li>
<li>计算机基本组成</li>
<li>二进制</li>
<li>编程语言发展</li>
</ul>
<h4 id="学习建议-4"><a href="#学习建议-4" class="headerlink" title="学习建议"></a>学习建议</h4><p>大学计算机专业的同学一般刚开学就会上这门课，虽说学习它并不会直接提高你的编程技能，但能够让你更了解计算机和编程，从而在一定程度上帮助你培养学习兴趣、确定学习方向。</p>
<p>自学的话，不用刻意去学习计算机导论，而是可以通过看视频、阅读课外读物的方式慢慢地了解计算机的故事。</p>
<h4 id="资源-4"><a href="#资源-4" class="headerlink" title="资源"></a>资源</h4><ul>
<li>视频<ul>
<li>《计算机科学速成课》：<a href="https://www.bilibili.com/video/BV1EW411u7th">https://www.bilibili.com/video/BV1EW411u7th</a> （从底层到上层的计算机知识科普，强烈推荐）</li>
</ul>
</li>
<li>书籍<ul>
<li>《半小时漫画计算机》</li>
</ul>
</li>
</ul>
<h3 id="🌖-操作系统"><a href="#🌖-操作系统" class="headerlink" title="🌖 操作系统"></a>🌖 操作系统</h3><h4 id="知识-4"><a href="#知识-4" class="headerlink" title="知识"></a>知识</h4><ul>
<li>操作系统的组成</li>
<li>进程、线程</li>
<li>进程 &#x2F; 线程间通讯方式</li>
<li>进程调度算法</li>
<li>进程 &#x2F; 线程同步方式</li>
<li>进程 &#x2F; 线程状态</li>
<li>死锁</li>
<li>内存管理</li>
<li>局部性原理</li>
</ul>
<h4 id="学习建议-5"><a href="#学习建议-5" class="headerlink" title="学习建议"></a>学习建议</h4><p>说实话，操作系统这一块知识挺枯燥的。你说说我现在项目都不会做，你又让我看这些理论，是不是想让我头秃？</p>
<p>我的建议是，可以先利用课余时间看一些网课或者有趣的课外书，对一些操作系统的概念先有个大致的印象，比如进程、线程、死锁，等后面有时间了再系统学习、等到找工作了再去背相关八股文。</p>
<p>还在校园就跟着学校的进度学习就成，自学的话可以看下《清华操作系统原理》视频，有实力的小伙伴，能看懂大黑书就更好了，但如果看不懂也别担心，这并不影响你后续知识的学习。</p>
<h4 id="经典面试题-3"><a href="#经典面试题-3" class="headerlink" title="经典面试题"></a>经典面试题</h4><ol>
<li>什么是死锁？死锁产生的条件？</li>
<li>线程有哪几种状态？</li>
<li>有哪些进程调度算法？</li>
<li>什么是缓冲区溢出？</li>
</ol>
<h4 id="资源-5"><a href="#资源-5" class="headerlink" title="资源"></a>资源</h4><ul>
<li><p>视频</p>
<ul>
<li>《清华操作系统原理》：<a href="https://www.bilibili.com/video/BV1uW411f72n">https://www.bilibili.com/video/BV1uW411f72n</a></li>
</ul>
</li>
<li><p>书籍</p>
<ul>
<li>《编码》</li>
<li>《30天自制操作系统》</li>
<li>《现代操作系统》（难度较大，不推荐新手看）</li>
<li>《深入理解计算机系统》（难度较大，不推荐新手看）</li>
<li>《 自己动手写操作系统》（国产好书，网上可以下载）</li>
</ul>
</li>
<li><p>大学课件</p>
<ul>
<li>浙大操作系统：<a href="https://github.com/QSCTech/zju-icicles">https://github.com/QSCTech/zju-icicles</a></li>
</ul>
</li>
</ul>
<h3 id="🌖-计算机网络"><a href="#🌖-计算机网络" class="headerlink" title="🌖 计算机网络"></a>🌖 计算机网络</h3><h4 id="知识-5"><a href="#知识-5" class="headerlink" title="知识"></a>知识</h4><ul>
<li>网络分层模型</li>
<li>网络传输过程</li>
<li>IP、端口</li>
<li>HTTP &#x2F; HTTPS 协议</li>
<li>UDP &#x2F; TCP 协议</li>
<li>ARP 地址解析协议</li>
<li>网络安全</li>
<li>DNS 域名解析</li>
</ul>
<h4 id="学习建议-6"><a href="#学习建议-6" class="headerlink" title="学习建议"></a>学习建议</h4><p>很多学习 Java 开发的同学最后都是从事 <strong>后端开发</strong> 的工作，而计算机网络知识是后端开发的重点。</p>
<p>和操作系统一样，自学网络可能会很枯燥，建议先看有趣的课外书，比如《图解 HTTP》；或者有趣的视频，比如《计算机网络微课堂》。后面要找工作面试前，再重点去背一些八股文就好了。还在学校的同学好好上课一般就没问题。</p>
<p>学习基础能帮助自己今后发展更稳定，且更容易接受新知识，所以请不要相信基础无用论。</p>
<h4 id="经典面试题-4"><a href="#经典面试题-4" class="headerlink" title="经典面试题"></a>经典面试题</h4><ol>
<li>计算机网络各层有哪些协议？</li>
<li>TCP 和 UDP 协议的区别？</li>
<li>TCP 为什么需要三次握手和四次挥手？</li>
<li>HTTP 和 HTTPS 协议的区别？</li>
</ol>
<h4 id="资源-6"><a href="#资源-6" class="headerlink" title="资源"></a>资源</h4><ul>
<li><p>视频</p>
<ul>
<li>《计算机网络微课堂》：<a href="https://www.bilibili.com/video/BV1c4411d7jb">https://www.bilibili.com/video/BV1c4411d7jb</a></li>
</ul>
</li>
<li><p>书籍</p>
<ul>
<li>⭐《图解 HTTP》</li>
<li>《网络是怎样连接的》</li>
<li>⭐《图解 TCP &#x2F; IP》</li>
</ul>
</li>
<li><p>大学课件</p>
<ul>
<li>浙大计算机网络基础：<a href="https://github.com/QSCTech/zju-icicles">https://github.com/QSCTech/zju-icicles</a></li>
</ul>
</li>
</ul>
<h3 id="尾声-1"><a href="#尾声-1" class="headerlink" title="尾声"></a>尾声</h3><p>巩固基础要花至少 1 个月的时间，当你读完《Java 核心技术卷1》并且不用查询文档也能熟练地用 Java 做题时，就可以接着往下了。</p>
<h2 id="阶段-3：Java-企业开发基础"><a href="#阶段-3：Java-企业开发基础" class="headerlink" title="阶段 3：Java 企业开发基础"></a>阶段 3：Java 企业开发基础</h2><h3 id="目标-2"><a href="#目标-2" class="headerlink" title="目标"></a>目标</h3><p>面向薪资编程，学习实际后台开发工作要用的基础技术和框架，并能 <strong>独立</strong> 做出一个具有完整功能的 Java Web 项目。</p>
<p>学完这个阶段后，你应该已经能独立开发出大多数常见的后台系统了，比如各种管理系统、商城系统等。</p>
<h3 id="🌕-MySQL-数据库（7-天）"><a href="#🌕-MySQL-数据库（7-天）" class="headerlink" title="🌕 MySQL 数据库（7 天）"></a>🌕 MySQL 数据库（7 天）</h3><p>企业中大部分业务数据都是用关系型数据库存储的，因此数据库是后台开发同学的必备技能，其中 MySQL 数据库是目前的主流，也是面试时的重点。</p>
<h4 id="知识-6"><a href="#知识-6" class="headerlink" title="知识"></a>知识</h4><ul>
<li>基本概念</li>
<li>MySQL 搭建</li>
<li>SQL 语句编写</li>
<li>约束</li>
<li>索引</li>
<li>事务</li>
<li>锁机制</li>
<li>设计数据库表</li>
<li>性能优化</li>
</ul>
<h4 id="学习建议-7"><a href="#学习建议-7" class="headerlink" title="学习建议"></a>学习建议</h4><p>其中，<strong>SQL 语句编写</strong> 和 <strong>设计数据库表</strong> 这两个能力一定要有！</p>
<p>比如让你做一个学生管理系统，你要能想到需要哪些表，比如学生表、班级表；每个表需要哪些字段、字段类型。</p>
<p>这就要求大家多写 SQL、多根据实际的业务场景去练习设计能力。</p>
<h4 id="经典面试题-5"><a href="#经典面试题-5" class="headerlink" title="经典面试题"></a>经典面试题</h4><ol>
<li>MySQL 索引的最左原则</li>
<li>InnoDB 和 MyIsam 引擎的区别？</li>
<li>有哪些优化数据库性能的方法？</li>
<li>如何定位慢查询？</li>
<li>MySQL 支持行锁还是表锁？分别有哪些优缺点？</li>
</ol>
<h4 id="资源-7"><a href="#资源-7" class="headerlink" title="资源"></a>资源</h4><ul>
<li>视频<ul>
<li>⭐ 老杜 - mysql入门基础 + 数据库实战：<a href="https://www.bilibili.com/video/BV1Vy4y1z7EX">https://www.bilibili.com/video/BV1Vy4y1z7EX</a> （较新、内容相对精炼，有习题）</li>
<li>尚硅谷 - MySQL基础教程：<a href="https://www.bilibili.com/video/BV1xW411u7ax">https://www.bilibili.com/video/BV1xW411u7ax</a> （小姐姐讲课，但感觉音质一般）</li>
</ul>
</li>
<li>在线练习<ul>
<li>⭐ SQL 自学网：<a href="http://xuesql.cn/">http://xuesql.cn/</a></li>
<li>⭐ SQL 在线运行：<a href="https://www.bejson.com/runcode/sql/">https://www.bejson.com/runcode/sql/</a></li>
</ul>
</li>
<li>文档<ul>
<li>SQL - 菜鸟教程：<a href="https://www.runoob.com/sql/sql-tutorial.html">https://www.runoob.com/sql/sql-tutorial.html</a></li>
<li>MySQL - 菜鸟教程：<a href="https://www.runoob.com/mysql/mysql-tutorial.html">https://www.runoob.com/mysql/mysql-tutorial.html</a></li>
</ul>
</li>
<li>网站<ul>
<li><a href="https://www.code-nav.cn/rd/?rid=b00064a76012546b016e274a3724c5f0">数据库大全</a>：果创云收录的各种数据库表设计</li>
</ul>
</li>
</ul>
<h3 id="🌕-开发框架（60-天）"><a href="#🌕-开发框架（60-天）" class="headerlink" title="🌕 开发框架（60 天）"></a>🌕 开发框架（60 天）</h3><p>Java 之所以能成为主流的企业开发语言，很大一部分原因是它完善的框架生态，用好框架，不仅能够大大提升开发效率，还能提高项目的稳定性、减少维护成本。</p>
<p>开发框架是后台开发工作中不可或缺的，也是面试考察的重点，一定要好好学！</p>
<p>不知道 Java 能做什么的朋友们，学完开发框架，就会有答案啦。</p>
<p>下面给大家推荐的都是企业中应用最多的主流开发框架，知识点比较零碎，就放在一起讲了。</p>
<h4 id="知识-7"><a href="#知识-7" class="headerlink" title="知识"></a>知识</h4><h5 id="🌕-Java-Web"><a href="#🌕-Java-Web" class="headerlink" title="🌕 Java Web"></a>🌕 Java Web</h5><ul>
<li><p>描述：Java 网页应用开发基础</p>
</li>
<li><p>一丢丢前端基础</p>
</li>
<li><p>XML</p>
</li>
<li><p>JSON</p>
</li>
<li><p>Servlet</p>
</li>
<li><p>Filter</p>
</li>
<li><p>Listener</p>
</li>
<li><p>JSP</p>
</li>
<li><p>JSTL</p>
</li>
<li><p>Cookie</p>
</li>
<li><p>Session</p>
</li>
</ul>
<h5 id="🌕-Spring-5"><a href="#🌕-Spring-5" class="headerlink" title="🌕 Spring 5"></a>🌕 Spring 5</h5><ul>
<li>描述：Java 轻量级应用框架</li>
<li>IOC</li>
<li>AOP</li>
<li>事务</li>
</ul>
<h5 id="🌕-SpringMVC"><a href="#🌕-SpringMVC" class="headerlink" title="🌕 SpringMVC"></a>🌕 SpringMVC</h5><ul>
<li>描述：Java 轻量级 web 开发框架</li>
<li>什么是 MVC？</li>
<li>请求与响应</li>
<li>Restful API</li>
<li>拦截器</li>
<li>配置</li>
<li>执行过程</li>
</ul>
<h5 id="🌕-MyBatis"><a href="#🌕-MyBatis" class="headerlink" title="🌕 MyBatis"></a>🌕 MyBatis</h5><ul>
<li>描述：数据访问框架，操作数据库进行增删改查等操作</li>
<li>增删改查</li>
<li>全局配置</li>
<li>动态 SQL</li>
<li>缓存</li>
<li>和其他框架的整合</li>
<li>逆向工程</li>
</ul>
<h5 id="🌗-MyBatis-Plus"><a href="#🌗-MyBatis-Plus" class="headerlink" title="🌗 MyBatis Plus"></a>🌗 MyBatis Plus</h5><ul>
<li>描述：Mybatis 的增强工具，能够简化开发、提高效率</li>
<li>引入</li>
<li>通用 CRUD</li>
<li>条件构造器</li>
<li>代码生成器</li>
<li>插件扩展</li>
<li>自定义全局操作</li>
</ul>
<h5 id="🌕-SpringBoot-2"><a href="#🌕-SpringBoot-2" class="headerlink" title="🌕 SpringBoot 2"></a>🌕 SpringBoot 2</h5><ul>
<li>描述：简化 Spring 应用的初始搭建以及开发过程，提高效率</li>
<li>常用注解</li>
<li>资源整合</li>
<li>高级特性</li>
<li>本地热部署</li>
</ul>
<h5 id="🌗-Spring-Security"><a href="#🌗-Spring-Security" class="headerlink" title="🌗 Spring Security"></a>🌗 Spring Security</h5><ul>
<li>描述：Spring 的安全管理框架</li>
<li>用户认证</li>
<li>权限管理</li>
<li>相关技术：Shiro</li>
</ul>
<h5 id="🌗-Maven-x2F-Gradle"><a href="#🌗-Maven-x2F-Gradle" class="headerlink" title="🌗 Maven &#x2F; Gradle"></a>🌗 Maven &#x2F; Gradle</h5><ul>
<li>描述：项目管理工具</li>
<li>构建</li>
<li>依赖管理</li>
<li>插件</li>
<li>配置</li>
<li>子父工程</li>
<li>多模块打包构建</li>
<li>Nexus 私服搭建</li>
</ul>
<h4 id="学习建议-8"><a href="#学习建议-8" class="headerlink" title="学习建议"></a>学习建议</h4><p>由于技术较多，且框架之间存在一定的联系，因此建议大家看同一系列的视频教程（尚硅谷、狂神说等等都可以），以保证学习内容的连续以及体验上的一致。</p>
<p>学这些技术的时候，<strong>千万不能懒</strong> ！一定要多记笔记，并且跟着老师写代码。原理部分不要太过纠结，先以能跟着敲出代码、写出可运行的项目为主，有些东西做出来也能帮助你更好地理解理论。</p>
<p>学习顺序挺重要的，建议按我推荐的顺序学，不要一上手就学 Spring Boot。只有先学习下自己整合框架的方法，才能帮你理解 SpringBoot 解决的问题，感受到它的方便和高效。</p>
<p>Maven &#x2F; Gradle 当成工具用就好，面试基本不问，跟着框架教程去用就行了，急着找工作的话，先不用花太多时间去深入学。大厂面试问这个的也不多。</p>
<h4 id="经典面试题-6"><a href="#经典面试题-6" class="headerlink" title="经典面试题"></a>经典面试题</h4><ol>
<li>Spring 的 IOC 和 AOP 是什么，有哪些优点？</li>
<li>Spring 框架用到了哪些设计模式？</li>
<li>介绍 Spring Bean 的生命周期</li>
<li>MyBatis 如何实现延迟加载？</li>
<li>介绍 MyBatis 的多级缓存机制</li>
</ol>
<h4 id="资源-8"><a href="#资源-8" class="headerlink" title="资源"></a>资源</h4><ul>
<li><p>视频（按顺序看）</p>
<ul>
<li><p>⭐ 尚硅谷最新版 JavaWeb 全套教程：<a href="https://www.bilibili.com/video/BV1Y7411K7zz">https://www.bilibili.com/video/BV1Y7411K7zz</a> （前端部分最好也看下）</p>
</li>
<li><p>⭐ 尚硅谷 - Spring 5 框架最新版教程（idea版）：<a href="https://www.bilibili.com/video/BV1Vf4y127N5">https://www.bilibili.com/video/BV1Vf4y127N5</a></p>
</li>
<li><p>⭐ 尚硅谷 - SpringMVC 2021 最新教程：<a href="https://www.bilibili.com/video/BV1Ry4y1574R">https://www.bilibili.com/video/BV1Ry4y1574R</a></p>
</li>
<li><p>⭐ 尚硅谷 - MyBatis 实战教程全套完整版：<a href="https://www.bilibili.com/video/BV1mW411M737">https://www.bilibili.com/video/BV1mW411M737</a></p>
</li>
<li><p>⭐ 尚硅谷 - MyBatisPlus 教程：<a href="https://www.bilibili.com/video/BV1Ds411E76Y">https://www.bilibili.com/video/BV1Ds411E76Y</a></p>
</li>
<li><p>Maven 零基础入门教程：<a href="https://www.bilibili.com/video/BV1TW411g7hP">https://www.bilibili.com/video/BV1TW411g7hP</a> （搞不懂 Maven 可以看看）</p>
</li>
<li><p>⭐ 雷丰阳 2021 版 SpringBoot2 零基础入门：<a href="https://www.bilibili.com/video/BV19K4y1L7MT">https://www.bilibili.com/video/BV19K4y1L7MT</a></p>
</li>
<li><p>尚硅谷 - SpringSecurity 框架教程：<a href="https://www.bilibili.com/video/BV15a411A7kP">https://www.bilibili.com/video/BV15a411A7kP</a></p>
</li>
</ul>
</li>
</ul>
<h3 id="🌘-开发规范（3-天）"><a href="#🌘-开发规范（3-天）" class="headerlink" title="🌘 开发规范（3 天）"></a>🌘 开发规范（3 天）</h3><p>开发不规范，同事两行泪。</p>
<p>开发规范是团队开发中必须遵守的，有利于提高项目的开发效率、降低维护成本。</p>
<h4 id="知识-8"><a href="#知识-8" class="headerlink" title="知识"></a>知识</h4><ul>
<li>代码规范<ul>
<li>代码风格</li>
<li>命名</li>
<li>其他规则</li>
</ul>
</li>
<li>代码校验（CheckStyle）</li>
<li>提交规范</li>
</ul>
<h4 id="学习建议-9"><a href="#学习建议-9" class="headerlink" title="学习建议"></a>学习建议</h4><p>有时间的话，简单过一遍大厂团队的代码规范手册就好了，以后做项目的时候能想起来的话就去使用，或者从书中、网上查规范文档，再去遵守。</p>
<p>项目做得多了，自然会养成好的习惯，不用刻意去记（毕竟每个团队规范也不完全相同，背了也没用）。也可以直接利用开发工具自带的一些代码检查插件，帮忙养成好的编码习惯。</p>
<h4 id="资源-9"><a href="#资源-9" class="headerlink" title="资源"></a>资源</h4><ul>
<li><p>书籍</p>
<ul>
<li>⭐ 阿里巴巴 Java 开发手册：<a href="https://developer.aliyun.com/graph/java">https://developer.aliyun.com/graph/java</a> （搜索《Java开发手册》）</li>
</ul>
</li>
<li><p>视频</p>
<ul>
<li>华山版《Java开发手册》独家讲解：<a href="https://developer.aliyun.com/live/1201">https://developer.aliyun.com/live/1201</a></li>
</ul>
</li>
<li><p>文档</p>
<ul>
<li>Google Java Style Guide：<a href="https://google.github.io/styleguide/javaguide.html">https://google.github.io/styleguide/javaguide.html</a> （谷歌 Java 代码规范）</li>
</ul>
</li>
</ul>
<h3 id="🌕-Git（3-天）"><a href="#🌕-Git（3-天）" class="headerlink" title="🌕 Git（3 天）"></a>🌕 Git（3 天）</h3><p>此前大家可能听说过 GitHub，一流的代码开源托管平台。</p>
<p>Git 和它可不一样，是一个版本控制工具，可以更好地管理和共享项目代码，比如把自己的代码传到 GitHub 上、或者从远程下载。</p>
<p>无论自己做项目、还是团队开发，Git 都是现在不可或缺的神器。</p>
<h4 id="知识-9"><a href="#知识-9" class="headerlink" title="知识"></a>知识</h4><ul>
<li>区分 Git 和 GitHub</li>
<li>工作区</li>
<li>分支</li>
<li>代码提交、推送、拉取、回退、重置</li>
<li>分支操作</li>
<li>代码合并、解决冲突</li>
<li>标签</li>
<li>cherry-pick</li>
<li>Git Flow</li>
<li>相关技术：SVN（比较老）</li>
</ul>
<h4 id="学习建议-10"><a href="#学习建议-10" class="headerlink" title="学习建议"></a>学习建议</h4><p>每个命令跟着敲一遍，有个大致的印象，会用即可。</p>
<p>建议平时大家可以多把自己的代码使用 Git 命令上传到 GitHub 上，用的多了自然就熟悉了。</p>
<h4 id="经典面试题-7"><a href="#经典面试题-7" class="headerlink" title="经典面试题"></a>经典面试题</h4><ol>
<li>如何解决提交冲突？</li>
<li>提交不小心出现误操作，如何撤销？</li>
<li>什么是 Git Flow，它有什么好处？</li>
</ol>
<h4 id="资源-10"><a href="#资源-10" class="headerlink" title="资源"></a>资源</h4><ul>
<li><p>视频</p>
<ul>
<li>⭐【尚硅谷】5h打通Git全套教程丨2021最新IDEA版 <a href="https://www.bilibili.com/video/BV1vy4y1s7k6">https://www.bilibili.com/video/BV1vy4y1s7k6</a></li>
</ul>
</li>
<li><p>书籍</p>
<ul>
<li>猴子都能懂的 Git 入门 <a href="https://backlog.com/git-tutorial/cn/">https://backlog.com/git-tutorial/cn/</a></li>
<li>⭐ GitHub 漫游指南 <a href="https://github.phodal.com/">https://github.phodal.com/</a></li>
</ul>
</li>
<li><p>文档</p>
<ul>
<li>GitHub 官方文档：<a href="https://docs.github.com/cn">https://docs.github.com/cn</a></li>
</ul>
</li>
<li><p>游戏</p>
<ul>
<li>Learning Git Branching：<a href="https://learngitbranching.js.org/?locale=zh_CN">https://learngitbranching.js.org/?locale=zh_CN</a></li>
</ul>
</li>
</ul>
<h3 id="🌖-Linux（10-天）"><a href="#🌖-Linux（10-天）" class="headerlink" title="🌖 Linux（10 天）"></a>🌖 Linux（10 天）</h3><p>企业中的很多前后台项目都是部署在 Linux 服务器上的，因此很有必要熟悉 Linux 的操作和脚本的编写。</p>
<p>后面学微服务、学架构都是在多台服务器操作，如果你不熟悉 Linux，会有点吃力。</p>
<h4 id="知识-10"><a href="#知识-10" class="headerlink" title="知识"></a>知识</h4><ul>
<li>Linux 系统安装</li>
<li>环境变量</li>
<li>文件管理</li>
<li>用户管理</li>
<li>内存管理</li>
<li>磁盘管理</li>
<li>进程管理</li>
<li>网络管理</li>
<li>软件包管理</li>
<li>服务管理</li>
<li>日志管理</li>
<li>Linux 内核</li>
<li><strong>常用命令</strong></li>
<li><strong>常用环境搭建</strong></li>
<li><strong>Shell 脚本编程</strong></li>
<li><strong>VIM 的使用</strong></li>
</ul>
<h4 id="学习建议-11"><a href="#学习建议-11" class="headerlink" title="学习建议"></a>学习建议</h4><p>多动手实践，建议自己购买一台云服务器，并且在本地搭建 Linux 虚拟机环境。</p>
<p>一定要自己从 0 开始手敲命令安装软件、部署服务，熟悉整个项目的上线流程。</p>
<p>每个命令至少要跟着敲一遍，了解它们的作用，并通过自然地练习，熟悉常用的 Linux 命令。</p>
<p>记不住没关系，用文档查就行了。</p>
<p>先会用，再理解。一般面试问的 Linux 题目也不会很难，面试前去背一下八股文就没什么问题，感兴趣的话可以去看看 Linux 内核设计。</p>
<h4 id="经典面试题-8"><a href="#经典面试题-8" class="headerlink" title="经典面试题"></a>经典面试题</h4><ol>
<li>如何查看某个进程的运行状态？</li>
<li>如何在 Linux 上查看 2 G 的大文件？</li>
<li>Linux 软链接和硬链接的区别</li>
</ol>
<h4 id="资源-11"><a href="#资源-11" class="headerlink" title="资源"></a>资源</h4><ul>
<li><p>视频</p>
<ul>
<li>⭐ 2021 韩顺平 一周学会Linux <a href="https://www.bilibili.com/video/BV1Sv411r7vd">https://www.bilibili.com/video/BV1Sv411r7vd</a> （基于 CentOS 7.6 版本较新）</li>
</ul>
</li>
<li><p>书籍</p>
<ul>
<li>《鸟哥的 Linux 私房菜 —— 基础篇》<a href="http://cn.linux.vbird.org/linux_basic/linux_basic.php">http://cn.linux.vbird.org/linux_basic/linux_basic.php</a> （经典）</li>
</ul>
</li>
<li><p>文档</p>
<ul>
<li>Linux 工具快速教程：<a href="https://linuxtools-rst.readthedocs.io/">https://linuxtools-rst.readthedocs.io</a> （基础、工具进阶、工具参考）</li>
</ul>
</li>
<li><p>实战</p>
<ul>
<li>⭐ 蓝桥云课 Linux 基础入门：<a href="https://www.lanqiao.cn/courses/1">https://www.lanqiao.cn/courses/1</a></li>
<li>腾讯云动手实验室：<a href="https://cloud.tencent.com/developer/labs">https://cloud.tencent.com/developer/labs</a></li>
<li>阿里云体验实验室：<a href="https://developer.aliyun.com/adc/labs/">https://developer.aliyun.com/adc/labs/</a></li>
<li>阿里云知行实验室：<a href="https://start.aliyun.com/">https://start.aliyun.com/</a></li>
<li>华为云沙箱实验室：<a href="https://lab.huaweicloud.com/">https://lab.huaweicloud.com/</a></li>
</ul>
</li>
<li><p>社区</p>
<ul>
<li>Linux 中国：<a href="https://linux.cn/">https://linux.cn/</a></li>
</ul>
</li>
<li><p>工具</p>
<ul>
<li>⭐ Linux 命令搜索：<a href="https://wangchujiang.com/linux-command">https://wangchujiang.com/linux-command</a></li>
<li>Linux 命令大全手册：<a href="https://www.linuxcool.com/">https://www.linuxcool.com/</a></li>
<li>Linux 命令示例：<a href="http://linux-commands-examples.com/">http://linux-commands-examples.com/</a></li>
<li>宝塔 Linux 面板：<a href="https://www.bt.cn/">https://www.bt.cn/</a></li>
</ul>
</li>
</ul>
<h3 id="🌘-前端基础（14-天）"><a href="#🌘-前端基础（14-天）" class="headerlink" title="🌘 前端基础（14 天）"></a>🌘 前端基础（14 天）</h3><p>虽然 Java 程序员面试时基本不会出现前端相关问题，但是在企业中，往往需要前后端程序员配合完成工作。会一些前端，不仅可以提高你们的协作效率，还能提高自己对整个项目的了解和掌控力，甚至能独立开发出一个完整项目！这点也是能给面试加分的。</p>
<h4 id="知识-11"><a href="#知识-11" class="headerlink" title="知识"></a>知识</h4><ul>
<li>HTML</li>
<li>CSS</li>
<li>JavaScript<ul>
<li>Ajax</li>
</ul>
</li>
<li>Vue</li>
</ul>
<h4 id="学习建议-12"><a href="#学习建议-12" class="headerlink" title="学习建议"></a>学习建议</h4><p>不需要学习太多的前端技术，熟悉下基础的前端三件套，了解前端是如何向后端发送请求来做数据交互的一般就够了。有时间的话可以学下 Vue ，是比较容易上手的主流前端开发框架，Vue + SpringBoot 还是很香的。</p>
<h4 id="资源-12"><a href="#资源-12" class="headerlink" title="资源"></a>资源</h4><p>参见鱼皮原创的前端学习路线：<a href="https://mp.weixin.qq.com/s/HbzLEt6NOP9Is9F3GOnbUQ">https://mp.weixin.qq.com/s/HbzLEt6NOP9Is9F3GOnbUQ</a></p>
<h3 id="练手项目-1"><a href="#练手项目-1" class="headerlink" title="练手项目"></a>练手项目</h3><blockquote>
<p>更多请见本路线阶段 5：[项目源码（50 套）](###项目源码（50 套）) 。</p>
</blockquote>
<ul>
<li>HotelSystem：<a href="https://github.com/misterchaos/HotelSystem">https://github.com/misterchaos/HotelSystem</a> （酒店管理系统 Java,tomcat,mysql,servlet,jsp实现，没有使用任何框架）</li>
<li>超市管理系统：<a href="https://github.com/zhanglei-workspace/shopping-management-system">https://github.com/zhanglei-workspace/shopping-management-system</a></li>
<li>Mall4j：<a href="https://github.com/gz-yami/mall4j">https://github.com/gz-yami/mall4j</a> （Spring Boot 电商系统）</li>
<li>newbee-mall：<a href="https://github.com/newbee-ltd/newbee-mall">https://github.com/newbee-ltd/newbee-mall</a> （基于 Spring Boot 2.X 的全栈电商系统）</li>
<li>litemall：<a href="https://github.com/linlinjava/litemall">https://github.com/linlinjava/litemall</a> （小商城系统，Spring Boot 后端 + Vue 管理员前端 + 微信小程序用户前端 + Vue 用户移动端）</li>
<li>forum-java：<a href="https://github.com/Qbian61/forum-java">https://github.com/Qbian61/forum-java</a> （一款用 Java Spring Boot 实现的现代化社区系统）</li>
</ul>
<h3 id="尾声-2"><a href="#尾声-2" class="headerlink" title="尾声"></a>尾声</h3><p>学完这个阶段的知识后，一定要再串起来回忆一遍，必须自己独立开发一个 Java Web 项目（量级可以不大，但你学过的技术尽可能地用上），能发布到 Linux 服务器上让其他小伙伴访问就更好了~</p>
<p>如果你只是对 Java 感兴趣、或者只是想试着自己开发后台，并不是想靠 Java 找工作的话，学到这里就可以了。可以把更多时间投入到你主方向的学习中。</p>
<p>但如果你是想找 Java 方向的工作，尤其是想进大厂的话，一定要继续努力，用心学习下个阶段的企业开发进阶知识。</p>
<h2 id="阶段-4：Java-企业开发进阶"><a href="#阶段-4：Java-企业开发进阶" class="headerlink" title="阶段 4：Java 企业开发进阶"></a>阶段 4：Java 企业开发进阶</h2><h3 id="目标-3"><a href="#目标-3" class="headerlink" title="目标"></a>目标</h3><p>学习更多企业级开发技术和编程思想，能够结合多种技术，独立开发出架构合理的完整系统，<strong>解决实际问题</strong> 。</p>
<p>要了解为什么需要这个技术？什么时候用这个技术？某个需求该用哪些技术？</p>
<p>当然，这个阶段的内容有些过于丰富，不是所有的东西都要学，大家可以根据自己的实际情况（时间），有选择地学习。</p>
<h3 id="🌘-软件工程"><a href="#🌘-软件工程" class="headerlink" title="🌘 软件工程"></a>🌘 软件工程</h3><p>软件开发和管理的一些概念、原则、技术、方法、工具和经验。</p>
<h4 id="知识-12"><a href="#知识-12" class="headerlink" title="知识"></a>知识</h4><ul>
<li>软件的本质</li>
<li>软件特性</li>
<li>软件过程</li>
<li>软件开发原则<ul>
<li>开闭原则</li>
<li>里氏替换原则</li>
<li>依赖倒置原则</li>
<li>单一职责原则</li>
<li>接口隔离原则</li>
<li>迪米特法则</li>
</ul>
</li>
<li>软件过程模型</li>
<li>敏捷开发</li>
<li>软件开发模型</li>
<li>需求建模</li>
<li>软件设计</li>
<li>UML</li>
<li>体系结构设计</li>
<li>设计模式</li>
<li>软件质量管理</li>
<li>评审</li>
<li>软件质量保证</li>
<li>软件测试<ul>
<li>单元测试</li>
<li>集成测试</li>
<li>系统测试</li>
<li>压力测试</li>
<li>部署测试</li>
</ul>
</li>
<li>软件配置管理</li>
<li>软件项目管理</li>
<li>软件项目估算</li>
<li>项目进度安排</li>
<li>风险管理</li>
<li>软件过程改进<ul>
<li>成熟度模型</li>
</ul>
</li>
</ul>
<h4 id="学习建议-13"><a href="#学习建议-13" class="headerlink" title="学习建议"></a>学习建议</h4><p>大学软件专业的必修课，偏理论，能学到很多企业软件开发的方法，也是对软件开发同学综合能力的提升，有时间的话可以了解下。但对想要快速找工作的同学来说，忽略即可，面试基本不会问。</p>
<h4 id="资源-13"><a href="#资源-13" class="headerlink" title="资源"></a>资源</h4><ul>
<li><p>书籍</p>
<ul>
<li>《软件工程：实践者的研究方法》：<a href="https://book.douban.com/subject/6047742/">https://book.douban.com/subject/6047742/</a> （经典大黑书，讲的非常全面，但同样完整读下来还是有些难度的）</li>
<li>《软件开发的 201 个原则》：<a href="https://book.douban.com/subject/35628886/">https://book.douban.com/subject/35628886/</a> （工具书，看一遍挺好的）</li>
</ul>
</li>
<li><p>视频</p>
<ul>
<li>清华大学软件工程：<a href="https://www.bilibili.com/video/BV1eE411V7Cr">https://www.bilibili.com/video/BV1eE411V7Cr</a></li>
<li>北京大学软件工程：<a href="https://www.bilibili.com/video/BV1Vt411V72G">https://www.bilibili.com/video/BV1Vt411V72G</a></li>
<li>大连工业大学软件工程：<a href="https://www.bilibili.com/video/BV1Ns41177VM">https://www.bilibili.com/video/BV1Ns41177VM</a></li>
</ul>
</li>
<li><p>大学课件</p>
<ul>
<li>浙大计算机软件工程：<a href="https://github.com/QSCTech/zju-icicles">https://github.com/QSCTech/zju-icicles</a></li>
</ul>
</li>
</ul>
<h3 id="🌖-设计模式（21-天）"><a href="#🌖-设计模式（21-天）" class="headerlink" title="🌖 设计模式（21 天）"></a>🌖 设计模式（21 天）</h3><p>设计模式是软件开发中解决一类问题的通用方法。</p>
<p>使用设计模式能让你写出更优雅、可维护的代码，也正因如此，很多框架源码都用到了设计模式，你不学很难看懂。</p>
<h4 id="知识-13"><a href="#知识-13" class="headerlink" title="知识"></a>知识</h4><ul>
<li><p>创建型模式：对象实例化的模式，创建型模式用于解耦对象的实例化过程</p>
<ul>
<li>单例模式</li>
<li>工厂方法模式</li>
<li>抽象工厂</li>
<li>建造者模式</li>
<li>原型模式</li>
</ul>
</li>
<li><p>结构型模式：把类或对象结合在一起形成一个更大的结构</p>
<ul>
<li>适配器模式</li>
<li>组合模式</li>
<li>装饰器模式</li>
<li>代理模式</li>
<li>享元模式</li>
<li>外观模式</li>
<li>桥接模式</li>
</ul>
</li>
<li><p>行为型模式：类和对象如何交互，及划分责任和算法</p>
<ul>
<li>迭代器模式</li>
<li>模板方法模式</li>
<li>策略模式</li>
<li>命令模式</li>
<li>状态模式</li>
<li>责任链模式</li>
<li>备忘录模式</li>
<li>观察者模式</li>
<li>访问者模式</li>
<li>中介者模式</li>
<li>解释器模式</li>
</ul>
</li>
</ul>
<h4 id="学习建议-14"><a href="#学习建议-14" class="headerlink" title="学习建议"></a>学习建议</h4><p>先理解概念，了解每个设计模式的特点和应用场景，再多加练习，运用到实际项目。</p>
<h4 id="经典面试题-9"><a href="#经典面试题-9" class="headerlink" title="经典面试题"></a>经典面试题</h4><ol>
<li>单例模式有哪些实现方式？有哪些优缺点？请手写其中一种</li>
<li>你用过哪些设计模式，为什么用它？</li>
</ol>
<h4 id="资源-14"><a href="#资源-14" class="headerlink" title="资源"></a>资源</h4><ul>
<li><p>书籍</p>
<ul>
<li>⭐《图解设计模式》（强烈推荐这本书，正是用 Java 语言实现，图多、有示例代码、有习题和答案，很不错）</li>
<li>《Head First 设计模式》</li>
<li>《大话设计模式》</li>
<li>《设计模式：可复用面向对象软件的基础》（大黑书，有能力的话也可以去读）</li>
</ul>
</li>
<li><p>视频</p>
<ul>
<li>尚硅谷图解 Java 设计模式：<a href="https://www.bilibili.com/video/BV1G4411c7N4">https://www.bilibili.com/video/BV1G4411c7N4</a></li>
</ul>
</li>
<li><p>文档</p>
<ul>
<li>菜鸟教程：<a href="https://www.runoob.com/design-pattern/design-pattern-tutorial.html">https://www.runoob.com/design-pattern/design-pattern-tutorial.html</a></li>
<li>图说设计模式：<a href="https://design-patterns.readthedocs.io/zh_CN/latest/">https://design-patterns.readthedocs.io/zh_CN/latest/</a></li>
</ul>
</li>
</ul>
<h3 id="🌕-缓存（14-天）"><a href="#🌕-缓存（14-天）" class="headerlink" title="🌕 缓存（14 天）"></a>🌕 缓存（14 天）</h3><p>缓存是高并发系统不可或缺的技术，可以提高系统的性能和并发，因此是后台开发必学的知识点，也是面试重点。</p>
<h4 id="知识-14"><a href="#知识-14" class="headerlink" title="知识"></a>知识</h4><ul>
<li>什么是缓存？</li>
<li>本地缓存<ul>
<li>Caffeine 库</li>
</ul>
</li>
<li>多级缓存</li>
<li>Redis 分布式缓存<ul>
<li>数据类型</li>
<li>常用操作</li>
<li>Java 操作 Redis<ul>
<li>Spring Boot Redis Template</li>
<li>Redisson</li>
</ul>
</li>
<li>主从模型搭建</li>
<li>哨兵集群搭建</li>
<li>日志持久化</li>
</ul>
</li>
<li>缓存（Redis）应用场景<ul>
<li>数据共享</li>
<li>单点登录</li>
<li>计数器</li>
<li>限流</li>
<li>点赞</li>
<li>实时排行榜</li>
<li>分布式锁</li>
</ul>
</li>
<li>缓存常见问题<ul>
<li>缓存雪崩</li>
<li>缓存击穿</li>
<li>缓存穿透</li>
<li>缓存更新一致性</li>
</ul>
</li>
<li>相关技术：Memcached、Ehcache</li>
</ul>
<h4 id="学习建议-15"><a href="#学习建议-15" class="headerlink" title="学习建议"></a>学习建议</h4><p>学会如何简单地使用缓存并不难，和数据库类似，无非就是调用 API 对数据进行增删改查。</p>
<p>因此，建议先能够独立使用它，了解缓存的应用场景；再学习如何在 Java 中操作缓存中间件，并尝试和项目相结合，提高系统的性能。</p>
<p>跟着视频教程实操一遍即可，可以等到面试前再去深入了解原理和高级特性。</p>
<h4 id="经典面试题-10"><a href="#经典面试题-10" class="headerlink" title="经典面试题"></a>经典面试题</h4><ol>
<li>Redis 为什么快？</li>
<li>Redis 有哪些常用的数据结构？</li>
<li>Redis RDB 和 AOF 持久化的区别，如何选择？</li>
<li>如何解决缓存击穿、缓存穿透、雪崩问题？</li>
<li>如何用 Redis 实现点赞功能，怎么设计 Key &#x2F; Value？</li>
</ol>
<h4 id="资源-15"><a href="#资源-15" class="headerlink" title="资源"></a>资源</h4><ul>
<li>视频<ul>
<li>⭐ 尚硅谷 - 2021 最新 Redis 6 入门到精通教程：<a href="https://www.bilibili.com/video/BV1Rv41177Af">https://www.bilibili.com/video/BV1Rv41177Af</a> （基于 Redis 6 的，推荐）</li>
</ul>
</li>
<li>文档<ul>
<li>Redis 命令参考：<a href="http://redisdoc.com/">http://redisdoc.com/</a></li>
<li>Redis 面试题整理：<a href="https://github.com/lokles/Web-Development-Interview-With-Java/blob/main/Redis%E9%97%AE%E9%A2%98.md">https://github.com/lokles/Web-Development-Interview-With-Java/blob/main/Redis%E9%97%AE%E9%A2%98.md</a></li>
</ul>
</li>
<li>书籍<ul>
<li>《Redis 实战》（经典）</li>
</ul>
</li>
<li>工具<ul>
<li>⭐ Redis 在线练习：<a href="https://try.redis.io/">https://try.redis.io/</a> （强烈推荐）</li>
</ul>
</li>
</ul>
<h3 id="🌖-消息队列（14-天）"><a href="#🌖-消息队列（14-天）" class="headerlink" title="🌖 消息队列（14 天）"></a>🌖 消息队列（14 天）</h3><p>消息队列是用于传输和保存消息的容器，也是大型分布式系统中常用的技术，主要解决应用耦合、异步消息、流量削锋等问题。后台开发必学，也是面试重点。</p>
<h4 id="知识-15"><a href="#知识-15" class="headerlink" title="知识"></a>知识</h4><ul>
<li>消息队列的作用</li>
<li>RabbitMQ 消息队列<ul>
<li>生产消费模型</li>
<li>交换机模型</li>
<li>死信队列</li>
<li>延迟队列</li>
<li>消息持久化</li>
<li>Java 操作</li>
<li>集群搭建</li>
</ul>
</li>
<li>相关技术：Kafka、ActiveMQ、TubeMQ、RocketMQ</li>
</ul>
<h4 id="学习建议-16"><a href="#学习建议-16" class="headerlink" title="学习建议"></a>学习建议</h4><p>和缓存一样，学会如何使用消息队列并不难，无非就是调用 API 去生产、转发和消费消息。</p>
<p>因此，建议先能够独立使用它，了解消息队列的应用场景；再学习如何在 Java 中操作消息队列中间件，并尝试和项目相结合，感受消息队列带来的好处。</p>
<p>这里我建议初学者先学习 RabbitMQ，比 Kafka 要好理解一些。跟着视频教程实操一遍即可，可以等到面试前再去深入了解原理和高级特性。</p>
<h4 id="经典面试题-11"><a href="#经典面试题-11" class="headerlink" title="经典面试题"></a>经典面试题</h4><ol>
<li>使用消息队列有哪些优缺点？</li>
<li>如何保证消息消费的幂等性？</li>
<li>消息队列有哪些路由模型？</li>
<li>你是否用过消息队列，解决过什么问题？</li>
</ol>
<h4 id="资源-16"><a href="#资源-16" class="headerlink" title="资源"></a>资源</h4><ul>
<li>视频<ul>
<li>⭐ 尚硅谷 - 2021 最新 RabbitMQ 教程：<a href="https://www.bilibili.com/video/BV1cb4y1o7zz">https://www.bilibili.com/video/BV1cb4y1o7zz</a> （很新很全面）</li>
</ul>
</li>
<li>文档<ul>
<li>RabbitMQ 中文文档：<a href="http://rabbitmq.mr-ping.com/">http://rabbitmq.mr-ping.com/</a></li>
</ul>
</li>
<li>书籍<ul>
<li>《RabbitMQ 实战：高效部署分布式消息队列》（经典）</li>
</ul>
</li>
<li>工具<ul>
<li>⭐ RabbitMQ 在线模拟器：<a href="http://tryrabbitmq.com/">http://tryrabbitmq.com/</a></li>
</ul>
</li>
</ul>
<h3 id="🌖-Nginx（14-天）"><a href="#🌖-Nginx（14-天）" class="headerlink" title="🌖 Nginx（14 天）"></a>🌖 Nginx（14 天）</h3><p>Nginx 是主流的、开源的、高性能的 HTTP 和反向代理 web 服务器，可以用于挂载网站、请求转发、负载均衡、网关路由等。前后端开发同学都需要学习，在后端开发的面试中有时会考到。</p>
<h4 id="知识-16"><a href="#知识-16" class="headerlink" title="知识"></a>知识</h4><ul>
<li>Nginx 作用</li>
<li>正向代理</li>
<li>反向代理（负载均衡）</li>
<li>常用命令</li>
<li>配置</li>
<li>动静分离（网站部署）</li>
<li>集群搭建</li>
<li>相关技术：HAProxy、Apache</li>
</ul>
<h4 id="学习建议-17"><a href="#学习建议-17" class="headerlink" title="学习建议"></a>学习建议</h4><p>Nginx 的基本使用非常简单，甚至不需要看任何的视频，跟着一篇文章就能够用它来提供网站访问能力、实现反向代理。</p>
<p>但是在企业中，Nginx 的使用往往没那么简单，作为负载均衡、请求转发的重要组件，往往需要针对实际场景去写一些特定的配置。因此建议有时间的话，实践下 Nginx 的配置方法，了解 Nginx 基本的设计思想，对今后自己设计系统时也有帮助。</p>
<h4 id="经典面试题-12"><a href="#经典面试题-12" class="headerlink" title="经典面试题"></a>经典面试题</h4><ol>
<li>Nginx 有哪些作用？</li>
<li>Nginx 为什么支持高并发？</li>
<li>Nginx 有哪些负载均衡策略？</li>
<li>什么是 Nginx 惊群问题，如何解决它？</li>
</ol>
<h4 id="资源-17"><a href="#资源-17" class="headerlink" title="资源"></a>资源</h4><ul>
<li>视频<ul>
<li>⭐ 尚硅谷 - Nginx 教程由浅入深：<a href="https://www.bilibili.com/video/BV1zJ411w7SV">https://www.bilibili.com/video/BV1zJ411w7SV</a> （讲的比较全面）</li>
<li>⭐ Nginx 鱼皮 - 手把手带你从0搭建个人网站：<a href="https://www.bilibili.com/video/BV1rU4y1J785/">https://www.bilibili.com/video/BV1rU4y1J785/</a> （简单演示 Nginx 部署网站）</li>
</ul>
</li>
<li>文档<ul>
<li>Nginx 中文文档：<a href="https://www.nginx.cn/doc/index.html">https://www.nginx.cn/doc/index.html</a></li>
</ul>
</li>
<li>工具<ul>
<li>Nginx 配置在线生成：<a href="https://www.digitalocean.com/community/tools/nginx?global.app.lang=zhCN">https://www.digitalocean.com/community/tools/nginx?global.app.lang=zhCN</a></li>
</ul>
</li>
</ul>
<h3 id="🌗-Netty-网络编程（21-天）"><a href="#🌗-Netty-网络编程（21-天）" class="headerlink" title="🌗 Netty 网络编程（21 天）"></a>🌗 Netty 网络编程（21 天）</h3><p>开源的 Java 网络编程框架，用于开发高性能（事件驱动、异步非阻塞）、高可靠的网络服务器和客户端程序。</p>
<p>很多网络框架和服务器程序都用到了 Netty 作为底层，学好 Netty 不仅可以让我们自己实现高性能服务器，也能更好地理解其他的框架应用、阅读源码。</p>
<h4 id="知识-17"><a href="#知识-17" class="headerlink" title="知识"></a>知识</h4><ul>
<li>IO 模型（BIO &#x2F; NIO）</li>
<li>Channel</li>
<li>Buffer</li>
<li>Seletor</li>
<li>Netty 模型</li>
<li>WebSocket 编程（动手做个聊天室）</li>
<li>相关技术：Vertx（中文文档：<a href="http://vertxchina.github.io/vertx-translation-chinese/">http://vertxchina.github.io/vertx-translation-chinese/</a> ，比 Netty 简单多了，实在看不懂 Netty 也可以学习下这个）</li>
</ul>
<h4 id="学习建议-18"><a href="#学习建议-18" class="headerlink" title="学习建议"></a>学习建议</h4><p>不同于之前学的 SSM 框架，Netty 还是需要一定学习成本的，一方面是国内资源太缺乏，另一方面很多重要的概念（比如 NIO）还是要多动手写代码调试才能理解。</p>
<p>还是建议先从视频入门，并且不建议在 Netty 上花太多时间，面试的时候一般也就考察一些 Netty 背后的思想（比如 NIO）而非框架本身的语法细节。</p>
<h4 id="经典面试题-13"><a href="#经典面试题-13" class="headerlink" title="经典面试题"></a>经典面试题</h4><ol>
<li>Netty 有哪些优点？</li>
<li>什么是 NIO？</li>
<li>介绍 Netty 的零拷贝机制</li>
</ol>
<h4 id="资源-18"><a href="#资源-18" class="headerlink" title="资源"></a>资源</h4><ul>
<li><p>视频</p>
<ul>
<li><p>⭐ 尚硅谷Netty教程：<a href="https://www.bilibili.com/video/BV1DJ411m7NR">https://www.bilibili.com/video/BV1DJ411m7NR</a></p>
</li>
<li><p>Netty 技术演讲（中文字幕版）：<a href="https://www.youtube.com/watch?v=I8yy2Cy7dDI">https://www.youtube.com/watch?v=I8yy2Cy7dDI</a></p>
</li>
</ul>
</li>
<li><p>文档</p>
<ul>
<li>Netty 4 用户指南：<a href="https://www.w3cschool.cn/netty_4_user_guide/">https://www.w3cschool.cn/netty_4_user_guide/</a></li>
</ul>
</li>
<li><p>书籍</p>
<ul>
<li>《Netty 实战》</li>
</ul>
</li>
</ul>
<h3 id="🌖-微服务（60-天）"><a href="#🌖-微服务（60-天）" class="headerlink" title="🌖 微服务（60 天）"></a>🌖 微服务（60 天）</h3><p>随着互联网的发展，项目越来越复杂，单机且庞大的巨石项目已无法满足开发、运维、并发、可靠性等需求。</p>
<p>因此，后台架构不断演进，可以将庞大的项目拆分成一个个职责明确、功能独立的细小模块，模块可以部署在多台服务器上，相互配合协作，提供完整的系统能力。</p>
<p>换言之，想做大型项目，这块儿一定要好好学！</p>
<h4 id="知识-18"><a href="#知识-18" class="headerlink" title="知识"></a>知识</h4><h5 id="Dubbo"><a href="#Dubbo" class="headerlink" title="Dubbo"></a>Dubbo</h5><ul>
<li>架构演进</li>
<li>RPC</li>
<li>Zookeeper</li>
<li>服务提供者</li>
<li>服务消费者</li>
<li>项目搭建</li>
<li>相关技术：DubboX（对 Dubbo 的扩展）</li>
</ul>
<h5 id="🌖-微服务"><a href="#🌖-微服务" class="headerlink" title="🌖 微服务"></a>🌖 微服务</h5><ul>
<li>微服务概念</li>
<li>Spring Cloud 框架<ul>
<li>子父工程</li>
<li>服务注册与发现</li>
<li>注册中心 Eureka、Zookeeper、Consul</li>
<li>Ribbon 负载均衡</li>
<li>Feign 服务调用</li>
<li>Hystrix 服务限流、降级、熔断</li>
<li>Resilience4j 服务容错</li>
<li>Gateway（Zuul）微服务网关</li>
<li>Config 分布式配置中心</li>
<li>分布式服务总线</li>
<li>Sleuth + Zipkin 分布式链路追踪</li>
</ul>
</li>
<li>Spring Cloud Alibaba<ul>
<li>Nacos 注册、配置中心</li>
<li>OpenFeign 服务调用</li>
<li>Sentinel 流控</li>
<li>Seata 分布式事务</li>
</ul>
</li>
</ul>
<h5 id="接口管理"><a href="#接口管理" class="headerlink" title="接口管理"></a>接口管理</h5><ul>
<li>Swagger 接口文档</li>
<li>Postman 接口测试</li>
<li>相关技术：YApi、ShowDoc</li>
</ul>
<h4 id="学习建议-19"><a href="#学习建议-19" class="headerlink" title="学习建议"></a>学习建议</h4><p>时间不急的话，建议先从 Dubbo 学起，对分布式、RPC、微服务有些基本的了解，再去食用 Spring Cloud 全家桶会更香。学完 Spring Cloud 全家桶后，再去学 Spring Cloud Alibaba 就很简单了。</p>
<p>这部分内容的学习，原理 + 实践都很重要，也不要被各种高大上的词汇唬住了，都是上层（应用层）的东西，基本没有什么算法，跟着视频教程学，其实还是很好理解的。</p>
<p>分布式相关知识非常多，但这里不用刻意去背，先通过视频教程实战使用一些微服务框架，也能对其中的概念有基本的了解。</p>
<p>大厂面试的时候很少问 Spring Cloud 框架的细节，更多的是微服务以及各组件的一些思想，比如网关的好处、消息总线的好处等。</p>
<h4 id="经典面试题-14"><a href="#经典面试题-14" class="headerlink" title="经典面试题"></a>经典面试题</h4><ol>
<li>什么是微服务，有哪些优缺点？</li>
<li>什么是注册中心，能解决什么问题？</li>
</ol>
<h4 id="资源-19"><a href="#资源-19" class="headerlink" title="资源"></a>资源</h4><ul>
<li><p>视频</p>
<ul>
<li><p>⭐ 尚硅谷 Dubbo 教程：<a href="https://www.bilibili.com/video/BV1ns411c7jV">https://www.bilibili.com/video/BV1ns411c7jV</a></p>
</li>
<li><p>⭐ 尚硅谷 SpringCloud（H版&amp;alibaba）框架开发教程（微服务分布式架构）：<a href="https://www.bilibili.com/video/BV18E411x7eT">https://www.bilibili.com/video/BV18E411x7eT</a> （把国外的 Spring Cloud 和国内的 Spring Cloud Alibaba 结合在一起对比着去讲，主流技术栈、知识点都讲到了，真心不错！）</p>
</li>
</ul>
</li>
<li><p>文档</p>
<ul>
<li>Apache Dubbo 官方文档：<a href="https://dubbo.apache.org/zh/">https://dubbo.apache.org/zh/</a></li>
<li>Spring Cloud Alibaba 官方文档：<a href="https://github.com/alibaba/spring-cloud-alibaba/blob/master/README-zh.md">https://github.com/alibaba/spring-cloud-alibaba/blob/master/README-zh.md</a></li>
<li>⭐ Swagger 教学文档：<a href="https://doc.xiaominfo.com/">https://doc.xiaominfo.com/</a> （跟着快速开始直接用就好了）</li>
</ul>
</li>
</ul>
<h3 id="🌖-容器（7-天）"><a href="#🌖-容器（7-天）" class="headerlink" title="🌖 容器（7 天）"></a>🌖 容器（7 天）</h3><p>将应用和环境进行封装，相互隔离、独立部署、便于移植，提高安全性、提高开发和维护效率。</p>
<p>便于实现微服务、持续集成和交付。</p>
<h4 id="知识-19"><a href="#知识-19" class="headerlink" title="知识"></a>知识</h4><ul>
<li>🌖 Docker<ul>
<li>容器概念</li>
<li>镜像</li>
<li>部署服务</li>
<li>Dockerfile</li>
<li>Docker Compose</li>
<li>Docker Machine</li>
<li>Docker Swarm</li>
<li>多阶段构建</li>
</ul>
</li>
<li>🌘 K8S（Kubernetes）<ul>
<li>K8S 架构</li>
<li>工作负载<ul>
<li>资源类型</li>
<li>Pod</li>
<li>Pod 生命周期</li>
<li>Pod 安全策略</li>
</ul>
</li>
<li>K8S 组件</li>
<li>K8S 对象</li>
<li>部署应用</li>
<li>服务<ul>
<li>Ingress</li>
</ul>
</li>
<li>Kubectl 命令行</li>
<li>集群管理</li>
</ul>
</li>
<li>相关技术：Apache Mesos、Mesosphere</li>
</ul>
<h4 id="学习建议-20"><a href="#学习建议-20" class="headerlink" title="学习建议"></a>学习建议</h4><p>业务上云是趋势，但是对于开发同学来说，会用 Docker &#x2F; K8S 部署项目和服务就行。实际工作中，企业一般都有现成的平台直接用，面试考察的也不多，不用花太多时间。</p>
<h4 id="经典面试题-15"><a href="#经典面试题-15" class="headerlink" title="经典面试题"></a>经典面试题</h4><ol>
<li>什么是容器？</li>
<li>使用  Docker 有哪些好处？</li>
<li>如何快速启动多个 Docker 节点？</li>
</ol>
<h4 id="资源-20"><a href="#资源-20" class="headerlink" title="资源"></a>资源</h4><ul>
<li><p>视频</p>
<ul>
<li>⭐【狂神说】Docker 最新超详细版教程通俗易懂：<a href="https://www.bilibili.com/video/BV1og4y1q7M4">https://www.bilibili.com/video/BV1og4y1q7M4</a></li>
<li>K8S 视频教程：<a href="https://www.bilibili.com/video/BV1K5411N7j8">https://www.bilibili.com/video/BV1K5411N7j8</a></li>
</ul>
</li>
<li><p>书籍</p>
<ul>
<li>《深入浅出 Docker》：<a href="https://www.zhihu.com/pub/reader/119632192">https://www.zhihu.com/pub/reader/119632192</a></li>
</ul>
</li>
<li><p>文档</p>
<ul>
<li>Docker — 从入门到实践：<a href="https://vuepress.mirror.docker-practice.com/">https://vuepress.mirror.docker-practice.com/</a></li>
<li>菜鸟教程 Docker：<a href="https://www.runoob.com/docker/docker-tutorial.html">https://www.runoob.com/docker/docker-tutorial.html</a></li>
<li>国外 Docker 官方文档：<a href="https://docs.docker.com/get-started/">https://docs.docker.com/get-started/</a></li>
</ul>
</li>
<li><p>网站</p>
<ul>
<li>Docker 中文社区：<a href="https://www.docker.org.cn/">https://www.docker.org.cn/</a> （强烈推荐，有很多 Docker 技术文章和学习笔记）</li>
<li>Docker Blog：<a href="https://www.docker.com/blog/">https://www.docker.com/blog/</a> （国外 Docker 技术博客）</li>
</ul>
</li>
<li><p>镜像源</p>
<ul>
<li>Docker Hub：<a href="https://hub.docker.com/">https://hub.docker.com</a></li>
<li>腾讯软件源：<a href="http://mirrors.tencent.com/#/index">http://mirrors.tencent.com/#/index</a></li>
<li>阿里云 Docker 仓库：<a href="https://cr.console.aliyun.com/">https://cr.console.aliyun.com/</a></li>
</ul>
</li>
</ul>
<h3 id="🌗-CI-x2F-CD（3-天）"><a href="#🌗-CI-x2F-CD（3-天）" class="headerlink" title="🌗 CI &#x2F; CD（3 天）"></a>🌗 CI &#x2F; CD（3 天）</h3><p>持续集成 &#x2F; 持续交付，贯穿整个研发到项目上线的过程，提高效率。</p>
<p>大公司一般都有自己的 CI &#x2F; CD 平台。</p>
<h4 id="知识-20"><a href="#知识-20" class="headerlink" title="知识"></a>知识</h4><ul>
<li>什么是 CI &#x2F; CD</li>
<li>CI &#x2F; CD 有什么好处</li>
<li>使用任一 CI &#x2F; CD 平台</li>
<li>相关技术：Jenkins、GitLab、微信云托管</li>
</ul>
<h4 id="学习建议-21"><a href="#学习建议-21" class="headerlink" title="学习建议"></a>学习建议</h4><p>了解它是什么，并且实战使用任一 CI &#x2F; CD 平台，感受它和传统开发运维到底有什么不同，就足够了。其实很简单，不要花太多时间。</p>
<p>真正要自己去搭建的时候，跟着官方文档来就行。</p>
<h4 id="资源-21"><a href="#资源-21" class="headerlink" title="资源"></a>资源</h4><ul>
<li><p>视频</p>
<ul>
<li>⭐【狂神说】CI&#x2F;CD到底是什么？十分钟理解企业级DevOps：<a href="https://www.bilibili.com/video/BV1zf4y127vu">https://www.bilibili.com/video/BV1zf4y127vu</a> （讲的非常棒！带你快速理解 CI &#x2F; CD 的作用和部分原理）</li>
<li>尚硅谷 - Jenkins 持续集成工具教程：<a href="https://www.bilibili.com/video/BV1GW411w7pn">https://www.bilibili.com/video/BV1GW411w7pn</a> （实在要用到 Jenkins 再去学）</li>
</ul>
</li>
<li><p>文档</p>
<ul>
<li>Jenkins 官方文档：<a href="https://www.jenkins.io/zh/">https://www.jenkins.io/zh/</a> （有很多案例，要用的时候查一下就行了）</li>
</ul>
</li>
<li><p>实战平台</p>
<ul>
<li>⭐ 微信云托管：<a href="https://cloud.weixin.qq.com/cloudrun">https://cloud.weixin.qq.com/cloudrun</a> （直播演示过，鱼皮后面会给大家出视频教程）</li>
<li>前端托管 Webify：<a href="https://cloud.tencent.com/product/webify">https://cloud.tencent.com/product/webify</a> （鱼皮给大家出过视频教程的 <a href="https://www.bilibili.com/video/BV11V411p7vf/%EF%BC%89">https://www.bilibili.com/video/BV11V411p7vf/）</a></li>
</ul>
</li>
</ul>
<h3 id="练手项目-2"><a href="#练手项目-2" class="headerlink" title="练手项目"></a>练手项目</h3><blockquote>
<p>更多请见本路线阶段 5：[项目源码（50 套）](###项目源码（50 套）) 。</p>
</blockquote>
<ul>
<li><p>mall-learning：<a href="https://github.com/macrozheng/mall-learningmall">https://github.com/macrozheng/mall-learningmall</a> （学习教程，架构、业务、技术要点全方位解析）</p>
</li>
<li><p>miaosha：<a href="https://github.com/qiurunze123/miaosha">https://github.com/qiurunze123/miaosha</a> （秒杀系统设计与实现）</p>
</li>
<li><p>Mall：<a href="https://github.com/macrozheng/mall">https://github.com/macrozheng/mall</a> （包括前台商城系统及后台管理系统，基于 SpringBoot+MyBatis 实现）</p>
</li>
<li><p>Spring-Cloud-Admin：<a href="https://github.com/wxiaoqi/Spring-Cloud-AdminCloud-Admin">https://github.com/wxiaoqi/Spring-Cloud-AdminCloud-Admin</a> （基于 Spring Cloud 微服务化开发平台，具有统一授权、认证的后台管理系统）</p>
</li>
<li><p>paascloud-master：<a href="https://github.com/paascloud/paascloud-master">https://github.com/paascloud/paascloud-master</a> （基于 spring cloud + vue + oAuth2.0，前后端分离商城系统）</p>
</li>
<li><p>mall-swarm：<a href="https://github.com/macrozheng/mall-swarm">https://github.com/macrozheng/mall-swarm</a> （一套微服务商城系统，采用了 Spring Cloud Greenwich、Spring Boot 2、MyBatis、Docker、Elasticsearch 等核心技术，同时提供了基于 Vue 的管理后台方便快速搭建系统）</p>
</li>
<li><p>SecKill：<a href="https://github.com/hfbin/Seckill">https://github.com/hfbin/Seckill</a> （基于 SpringBoot+Mybatis+Redis+RabbitMQ 秒杀系统）</p>
</li>
<li><p>jeecg-boot：<a href="https://github.com/zhangdaiscott/jeecg-boot">https://github.com/zhangdaiscott/jeecg-boot</a> （低代码开发平台）</p>
</li>
<li><p>PassJava-Platform：<a href="https://github.com/Jackson0714/PassJava-Platform">https://github.com/Jackson0714/PassJava-Platform</a> （一款面试刷题的 Spring Cloud 开源系统）</p>
</li>
</ul>
<h3 id="尾声-3"><a href="#尾声-3" class="headerlink" title="尾声"></a>尾声</h3><p>看到这里，相信你已经感叹：编程语言一辈子学不完了！</p>
<p>但是，不用担心，通过对这么多知识点的学习，相信你已经有了一定的积累，也不知不觉地锻炼了自主学习能力、资源检索能力、代码阅读能力、问题解决能力，之后的学习会越来越轻松。</p>
<p>接下来，可以试着用你学到的技术来解决实际的问题，自主从 0 开始做一些项目，保持编程手感。</p>
<h2 id="阶段-5：项目实战"><a href="#阶段-5：项目实战" class="headerlink" title="阶段 5：项目实战"></a>阶段 5：项目实战</h2><h3 id="目标-4"><a href="#目标-4" class="headerlink" title="目标"></a>目标</h3><p>综合所学技术从 0 到 1 开发和上线一个全面、有特色的、可以写进简历的个人项目。</p>
<h3 id="学习建议-22"><a href="#学习建议-22" class="headerlink" title="学习建议"></a>学习建议</h3><p>其实在之前的框架学习视频中应该就做过几个项目了，但相对不够完整和体系化。</p>
<p>有想法的同学可以做任何自己想做的项目，推荐参加一些作品类竞赛，练手、拿奖、收获项目经历一举三得。</p>
<p>暂时没想法的朋友，建议先跟着专门带做项目的视频教程做 1 - 2 套 Java 完整项目，一定要从 0 到 1 自己手写！</p>
<p>有能力的朋友也可以试着用 GitHub 上的源码来学习啦~</p>
<p>做一个完整的项目的确很不容易，建议大家根据自己的 <strong>时间、兴趣</strong> 选择 <strong>较新的</strong>、<strong>有配套源码的</strong> 教程，保持耐心。</p>
<p>如何选择编程学习资源，可以看下我的原创文章：<a href="https://mp.weixin.qq.com/s/mlMql9RJCd7THt6rpGb8UA">https://mp.weixin.qq.com/s/mlMql9RJCd7THt6rpGb8UA</a></p>
<p>下面推荐一些优质的、较新的项目实战视频教程 + 50 套项目源码。</p>
<h3 id="视频教程"><a href="#视频教程" class="headerlink" title="视频教程"></a>视频教程</h3><ul>
<li><p>尚硅谷 - 谷粒学院 - 微服务 + 全栈 - 在线教育实战项目：<a href="https://www.bilibili.com/video/BV1dQ4y1A75e">https://www.bilibili.com/video/BV1dQ4y1A75e</a> （全栈项目，前后端讲得都很全面）</p>
</li>
<li><p>尚硅谷 - 尚筹网 - Java项目实战开发教程 - SSM 框架 + 微服务架构：<a href="https://www.bilibili.com/video/BV1bE411T7oZ%EF%BC%88500">https://www.bilibili.com/video/BV1bE411T7oZ（500</a> 多集，包含完整的用户权限管理，功能丰富、讲得很细致全面）</p>
</li>
<li><p>黑马 - 24 小时搞定 Java 毕设电商项目：<a href="https://www.bilibili.com/video/BV13f4y1r7fS">https://www.bilibili.com/video/BV13f4y1r7fS</a></p>
</li>
<li><p>黑马程序员 Java 项目《传智健康》，超完整的企业级医疗行业项目：<a href="https://www.bilibili.com/video/BV1Bo4y117zV">https://www.bilibili.com/video/BV1Bo4y117zV</a></p>
</li>
<li><p>黑马程序员 Java 项目《万信金融》企业级开发实战，互联网金融行业解决方案：<a href="https://www.bilibili.com/video/BV1Ub4y1f7rk">https://www.bilibili.com/video/BV1Ub4y1f7rk</a></p>
</li>
<li><p>黑马程序员 Java 项目 SaaS 移动办公完整版《iHRM 人力资源管理系统》，跨行业 SaaS 办公整合性解决方案：<a href="https://www.bilibili.com/video/BV18A411L7UX">https://www.bilibili.com/video/BV18A411L7UX</a></p>
</li>
<li><p>黑马程序员 Java 大型分布式微服务闪聚支付项目，Java 移动支付全生态系统：<a href="https://www.bilibili.com/video/BV17v411V79c">https://www.bilibili.com/video/BV17v411V79c</a></p>
</li>
<li><p>黑马程序员 Java 项目《好客租房》：<a href="https://www.bilibili.com/video/BV1sZ4y1F7PD">https://www.bilibili.com/video/BV1sZ4y1F7PD</a></p>
</li>
</ul>
<h3 id="常用类库"><a href="#常用类库" class="headerlink" title="常用类库"></a>常用类库</h3><h5 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h5><ul>
<li>Guava：谷歌开发的 Java 工具库（<a href="https://github.com/google/guava%EF%BC%89">https://github.com/google/guava）</a></li>
<li>Apache Commons：各类工具库，比如 commons-lang、commons-io、commons-collections 等（<a href="https://github.com/apache/commons-lang%EF%BC%89">https://github.com/apache/commons-lang）</a></li>
<li>Hutool：Java 工具集库（<a href="https://github.com/looly/hutool%EF%BC%89">https://github.com/looly/hutool）</a></li>
<li>Lombok：Java 增强库（<a href="https://github.com/projectlombok/lombok%EF%BC%89">https://github.com/projectlombok/lombok）</a></li>
<li>Apache HttpComponents Client：HTTP 客户端库（<a href="https://github.com/apache/httpcomponents-client%EF%BC%89">https://github.com/apache/httpcomponents-client）</a></li>
<li>OkHttp：适用于 JVM、Android 等平台的 Http 客户端（<a href="https://github.com/square/okhttp%EF%BC%89">https://github.com/square/okhttp）</a></li>
<li>Gson：谷歌的 JSON 处理库（<a href="https://github.com/google/gson%EF%BC%89">https://github.com/google/gson）</a></li>
<li>Jcommander：Java 命令行参数解析框架（<a href="https://github.com/cbeust/jcommander%EF%BC%89">https://github.com/cbeust/jcommander）</a></li>
<li>Apache PDFBox：PDF 操作库（<a href="https://github.com/apache/pdfbox%EF%BC%89">https://github.com/apache/pdfbox）</a></li>
<li>EasyExcel：阿里的 Excel 处理库（<a href="https://github.com/alibaba/easyexcel%EF%BC%89">https://github.com/alibaba/easyexcel）</a></li>
<li>Apache POI：表格文件处理库（<a href="https://github.com/apache/poi%EF%BC%89">https://github.com/apache/poi）</a></li>
</ul>
<h5 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h5><ul>
<li>JUnit：Java 测试框架（<a href="https://github.com/junit-team/junit4%EF%BC%89">https://github.com/junit-team/junit4）</a></li>
<li>Mockito：Java 单元测试 Mock 框架（<a href="https://github.com/mockito/mockito%EF%BC%89">https://github.com/mockito/mockito）</a></li>
<li>Selenium：浏览器自动化框架（<a href="https://github.com/SeleniumHQ/selenium%EF%BC%89">https://github.com/SeleniumHQ/selenium）</a></li>
<li>htmlunit：Java 模拟浏览器（<a href="https://github.com/HtmlUnit/htmlunit%EF%BC%89">https://github.com/HtmlUnit/htmlunit）</a></li>
<li>TestNG：Java 测试框架（<a href="https://github.com/cbeust/testng%EF%BC%89">https://github.com/cbeust/testng）</a></li>
<li>Jacoco：Java 代码覆盖度库（<a href="https://github.com/jacoco/jacoco%EF%BC%89">https://github.com/jacoco/jacoco）</a></li>
</ul>
<h5 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h5><ul>
<li>cglib：字节码生成库（<a href="https://github.com/cglib/cglib%EF%BC%89">https://github.com/cglib/cglib）</a></li>
<li>Arthas：Java 诊断工具（<a href="https://github.com/alibaba/arthas%EF%BC%89">https://github.com/alibaba/arthas）</a></li>
<li>config：针对 JVM 的配置库（<a href="https://github.com/lightbend/config%EF%BC%89">https://github.com/lightbend/config）</a></li>
<li>Quasar：Java 纤程库（<a href="https://github.com/puniverse/quasar%EF%BC%89">https://github.com/puniverse/quasar）</a></li>
<li>drools：Java 规则引擎（<a href="https://github.com/kiegroup/drools%EF%BC%89">https://github.com/kiegroup/drools）</a></li>
<li>Caffeine：Java 高性能缓存库（<a href="https://github.com/ben-manes/caffeine%EF%BC%89">https://github.com/ben-manes/caffeine）</a></li>
<li>Disruptor：高性能线程间消息传递库（<a href="https://github.com/LMAX-Exchange/disruptor%EF%BC%89">https://github.com/LMAX-Exchange/disruptor）</a></li>
<li>Knife4j：Swagger 文档增强（<a href="https://doc.xiaominfo.com/%EF%BC%89">https://doc.xiaominfo.com/）</a></li>
<li>Thumbnailator：Java 缩略图生成库（<a href="https://github.com/coobird/thumbnailator%EF%BC%89">https://github.com/coobird/thumbnailator）</a></li>
<li>Logback：Java 日志库（<a href="https://github.com/qos-ch/logback%EF%BC%89">https://github.com/qos-ch/logback）</a></li>
<li>Apache Camel：消息传输集成框架（<a href="https://github.com/apache/camel%EF%BC%89">https://github.com/apache/camel）</a></li>
<li>Quartz：定时任务调度库（<a href="https://github.com/quartz-scheduler/quartz%EF%BC%89">https://github.com/quartz-scheduler/quartz）</a></li>
<li>Apache Mahout：机器学习库（<a href="https://github.com/apache/mahout%EF%BC%89">https://github.com/apache/mahout）</a></li>
<li>Apache OpenNLP：NLP 工具库（<a href="https://github.com/apache/opennlp%EF%BC%89">https://github.com/apache/opennlp）</a></li>
<li>RxJava：JVM 反应式编程框架（<a href="https://github.com/ReactiveX/RxJava%EF%BC%89">https://github.com/ReactiveX/RxJava）</a></li>
<li>JProfiler：性能分析库（<a href="https://www.ej-technologies.com/products/jprofiler/overview.html%EF%BC%89">https://www.ej-technologies.com/products/jprofiler/overview.html）</a></li>
<li>jsoup：HTML 文档解析库（<a href="https://jsoup.org/%EF%BC%89">https://jsoup.org/）</a></li>
<li>webmagic：Java 爬虫框架（<a href="https://github.com/code4craft/webmagic/%EF%BC%89">https://github.com/code4craft/webmagic/）</a></li>
</ul>
<h3 id="IDEA-插件"><a href="#IDEA-插件" class="headerlink" title="IDEA 插件"></a>IDEA 插件</h3><p>综合实用性、易用性、流行度、维护频率，精选了以下插件，简单分类为天地二品。</p>
<h4 id="精选地品插件"><a href="#精选地品插件" class="headerlink" title="精选地品插件"></a>精选地品插件</h4><p>简单好用、增强功能</p>
<ul>
<li><p>Background Image Plus +</p>
<ul>
<li>描述：给编辑器设置背景图片（小姐姐图片）</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/11247-background-image-plus-">https://plugins.jetbrains.com/plugin/11247-background-image-plus-</a></li>
</ul>
</li>
<li><p>Chinese Language Pack</p>
<ul>
<li>描述：中文支持</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/13710-chinese-simplified-language-pack----">https://plugins.jetbrains.com/plugin/13710-chinese-simplified-language-pack----</a></li>
</ul>
</li>
<li><p>Translation</p>
<ul>
<li>描述：翻译插件，鼠标选中文本，点击右键即可自动翻译成多国语言。</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/8579-translation/">https://plugins.jetbrains.com/plugin/8579-translation/</a></li>
</ul>
</li>
<li><p>Key Promoter X</p>
<ul>
<li>描述：快捷键提示插件。当你执行鼠标操作时，如果该操作可被快捷键代替，会给出提示，帮助你自然形成使用快捷键的习惯，告别死记硬背。</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/9792-key-promoter-x/">https://plugins.jetbrains.com/plugin/9792-key-promoter-x/</a></li>
</ul>
</li>
<li><p>Rainbow Brackets</p>
<ul>
<li>描述：给括号添加彩虹色，使开发者通过颜色区分括号嵌套层级，便于阅读</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/10080-rainbow-brackets/">https://plugins.jetbrains.com/plugin/10080-rainbow-brackets/</a></li>
</ul>
</li>
<li><p>CodeGlance</p>
<ul>
<li>描述：在编辑器右侧生成代码小地图，可以拖拽小地图光标快速定位代码，阅读行数很多的代码文件时非常实用。</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/7275-codeglance/">https://plugins.jetbrains.com/plugin/7275-codeglance/</a></li>
</ul>
</li>
<li><p>WakaTime</p>
<ul>
<li>描述：代码统计和跟踪插件</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/7425-wakatime">https://plugins.jetbrains.com/plugin/7425-wakatime</a></li>
</ul>
</li>
<li><p>Statistic</p>
<ul>
<li>描述：代码统计</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/4509-statistic">https://plugins.jetbrains.com/plugin/4509-statistic</a></li>
</ul>
</li>
</ul>
<h4 id="精选天品插件"><a href="#精选天品插件" class="headerlink" title="精选天品插件"></a>精选天品插件</h4><p>提高开发效率和代码质量</p>
<ul>
<li><p>String Manipulation</p>
<ul>
<li>描述：字符串快捷处理</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/2162-string-manipulation">https://plugins.jetbrains.com/plugin/2162-string-manipulation</a></li>
</ul>
</li>
<li><p>Tabnine AI Code Completion</p>
<ul>
<li>描述：使用 AI 去自动提示和补全代码，比 IDEA 自带的代码补全更加智能化</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/12798-tabnine-ai-code-completion-js-java-python-ts-rust-go-php--more">https://plugins.jetbrains.com/plugin/12798-tabnine-ai-code-completion-js-java-python-ts-rust-go-php--more</a></li>
</ul>
</li>
<li><p>GsonFormatPlus</p>
<ul>
<li>描述：根据 json 生成对象</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/14949-gsonformatplus">https://plugins.jetbrains.com/plugin/14949-gsonformatplus</a></li>
</ul>
</li>
<li><p>JUnitGenerator V2.0</p>
<ul>
<li>描述：自动生成单元测试</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/3064-junitgenerator-v2-0">https://plugins.jetbrains.com/plugin/3064-junitgenerator-v2-0</a></li>
</ul>
</li>
<li><p>RestfulTool</p>
<ul>
<li>描述：辅助 web 开发的工具集</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/14280-restfultool">https://plugins.jetbrains.com/plugin/14280-restfultool</a></li>
</ul>
</li>
<li><p>SequenceDiagram</p>
<ul>
<li>描述：自动生成方法调用时序图</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/8286-sequencediagram">https://plugins.jetbrains.com/plugin/8286-sequencediagram</a></li>
</ul>
</li>
<li><p>CheckStyle-IDEA</p>
<ul>
<li>描述：自动检查 Java 代码规范</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/1065-checkstyle-idea">https://plugins.jetbrains.com/plugin/1065-checkstyle-idea</a></li>
</ul>
</li>
<li><p>Alibaba Java Coding Guidelines</p>
<ul>
<li>描述：代码规范检查插件</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/10046-alibaba-java-coding-guidelines">https://plugins.jetbrains.com/plugin/10046-alibaba-java-coding-guidelines</a></li>
</ul>
</li>
<li><p>SonarLint</p>
<ul>
<li>描述：帮助你发现和修复代码的错误和漏洞</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/7973-sonarlint">https://plugins.jetbrains.com/plugin/7973-sonarlint</a></li>
</ul>
</li>
<li><p>MybatisX</p>
<ul>
<li>描述：MyBatis 增强插件，支持自动生成 entity、mapper、service 等常用操作的代码，优化体验</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/10119-mybatisx">https://plugins.jetbrains.com/plugin/10119-mybatisx</a></li>
</ul>
</li>
</ul>
<h4 id="美化类"><a href="#美化类" class="headerlink" title="美化类"></a>美化类</h4><ul>
<li><p>Extra Icons</p>
<ul>
<li>描述：图标美化插件，支持更多文件类型</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/11058-extra-icons">https://plugins.jetbrains.com/plugin/11058-extra-icons</a></li>
</ul>
</li>
<li><p>Chinese Language Pack</p>
<ul>
<li>描述：中文支持</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/13710-chinese-simplified-language-pack----">https://plugins.jetbrains.com/plugin/13710-chinese-simplified-language-pack----</a></li>
</ul>
</li>
<li><p>Grep Console</p>
<ul>
<li>描述：自定义设置控制台输出颜色</li>
<li>官网：<a href="https://plugins.jetbrains.com/idea/plugin/7125-grep-console">https://plugins.jetbrains.com/idea/plugin/7125-grep-console</a></li>
</ul>
</li>
<li><p>Material Theme UI</p>
<ul>
<li>描述：美观的主题</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/8006-material-theme-ui">https://plugins.jetbrains.com/plugin/8006-material-theme-ui</a></li>
</ul>
</li>
<li><p>Nyan Progress Bar</p>
<ul>
<li>描述：进度条美化</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/8575-nyan-progress-bar">https://plugins.jetbrains.com/plugin/8575-nyan-progress-bar</a></li>
</ul>
</li>
<li><p>activate-power-mode</p>
<ul>
<li>描述：打字特效</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/8330-activate-power-mode">https://plugins.jetbrains.com/plugin/8330-activate-power-mode</a></li>
</ul>
</li>
<li><p>Power Mode II</p>
<ul>
<li>描述：打字特效插件升级版</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/8251-power-mode-ii">https://plugins.jetbrains.com/plugin/8251-power-mode-ii</a></li>
</ul>
</li>
<li><p>Rainbow Brackets</p>
<ul>
<li>描述：给括号添加彩虹色，使开发者通过颜色区分括号嵌套层级，便于阅读</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/10080-rainbow-brackets/">https://plugins.jetbrains.com/plugin/10080-rainbow-brackets/</a></li>
</ul>
</li>
<li><p>Background Image Plus +</p>
<ul>
<li>描述：给编辑器设置背景图片</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/11247-background-image-plus-">https://plugins.jetbrains.com/plugin/11247-background-image-plus-</a></li>
</ul>
</li>
</ul>
<h4 id="代码生成类"><a href="#代码生成类" class="headerlink" title="代码生成类"></a>代码生成类</h4><ul>
<li><p>Codota AI Autocomplete for Java and JavaScript</p>
<ul>
<li>描述：使用 AI 去自动提示和补全代码，比 IDEA 自带的代码补全更加智能化</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/7638-codota-ai-autocomplete-for-java-and-javascript">https://plugins.jetbrains.com/plugin/7638-codota-ai-autocomplete-for-java-and-javascript</a></li>
</ul>
</li>
<li><p>Tabnine AI Code Completion</p>
<ul>
<li>描述：使用 AI 来自动提示和补全代码，比 IDEA 自带的代码补全更加智能化</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/12798-tabnine-ai-code-completion-js-java-python-ts-rust-go-php--more">https://plugins.jetbrains.com/plugin/12798-tabnine-ai-code-completion-js-java-python-ts-rust-go-php--more</a></li>
</ul>
</li>
<li><p>UUID Generator</p>
<ul>
<li>描述：生成随机的 UUID</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/8320-uuid-generator">https://plugins.jetbrains.com/plugin/8320-uuid-generator</a></li>
</ul>
</li>
<li><p>Randomness</p>
<ul>
<li>描述：生成随机值</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/9836-randomness">https://plugins.jetbrains.com/plugin/9836-randomness</a></li>
</ul>
</li>
<li><p>.ignore</p>
<ul>
<li>描述：生成不同语言的版本控制忽略文件</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/7495--ignore">https://plugins.jetbrains.com/plugin/7495--ignore</a></li>
</ul>
</li>
<li><p>Auto filling Java call arguments</p>
<ul>
<li>描述：通过快捷键自动补全函数的调用参数</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/8638-auto-filling-java-call-arguments/">https://plugins.jetbrains.com/plugin/8638-auto-filling-java-call-arguments/</a></li>
</ul>
</li>
<li><p>GenerateAllSetter</p>
<ul>
<li>描述：快速生成调用对象 setter 方法的代码</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/9360-generateallsetter">https://plugins.jetbrains.com/plugin/9360-generateallsetter</a></li>
</ul>
</li>
<li><p>GenerateSerialVersionUID</p>
<ul>
<li>描述：一键为实现 Serializable 接口的类生成 SerialVersionUID</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/185-generateserialversionuid/">https://plugins.jetbrains.com/plugin/185-generateserialversionuid/</a></li>
</ul>
</li>
<li><p>GsonFormatPlus</p>
<ul>
<li>描述：根据 json 生成对象</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/14949-gsonformatplus">https://plugins.jetbrains.com/plugin/14949-gsonformatplus</a></li>
</ul>
</li>
<li><p>Lombok</p>
<ul>
<li><p>描述：配合 Lombok 依赖及注解使用，能够大大减少 Java 对象的代码量。IDEA 已自带，无需安装。</p>
</li>
<li><p>官网：<a href="https://plugins.jetbrains.com/plugin/6317-lombok/">https://plugins.jetbrains.com/plugin/6317-lombok/</a></p>
</li>
</ul>
</li>
<li><p>Easy Code</p>
<ul>
<li>描述：根据数据库表生成 Java entity、dao、mapper、service、controller 等代码</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/10954-easy-code">https://plugins.jetbrains.com/plugin/10954-easy-code</a></li>
</ul>
</li>
<li><p>Easy Javadoc</p>
<ul>
<li>描述：快速生成 Javadoc 文档</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/12977-easy-javadoc">https://plugins.jetbrains.com/plugin/12977-easy-javadoc</a></li>
</ul>
</li>
<li><p>JavaDoc</p>
<ul>
<li>描述：生成 Javadoc 文档</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/7157-javadoc">https://plugins.jetbrains.com/plugin/7157-javadoc</a></li>
</ul>
</li>
<li><p>Json2Pojo</p>
<ul>
<li>描述：根据 JSON 生成 POJO，根据 POJO 生成 JSON</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/8533-json2pojo">https://plugins.jetbrains.com/plugin/8533-json2pojo</a></li>
</ul>
</li>
<li><p>JUnitGenerator V2.0</p>
<ul>
<li>描述：自动生成单元测试</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/3064-junitgenerator-v2-0">https://plugins.jetbrains.com/plugin/3064-junitgenerator-v2-0</a></li>
</ul>
</li>
<li><p>Jindent - Source Code Formatter</p>
<ul>
<li>描述：根据自定义模板来生成 javadoc 注释</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/8309-jindent--source-code-formatter">https://plugins.jetbrains.com/plugin/8309-jindent--source-code-formatter</a></li>
</ul>
</li>
<li><p>MybatisX</p>
<ul>
<li>描述：MyBatis 增强插件，支持自动生成 entity、mapper、service 等常用操作的代码，优化体验</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/10119-mybatisx">https://plugins.jetbrains.com/plugin/10119-mybatisx</a></li>
</ul>
</li>
<li><p>MyBatisCodeHelperPro</p>
<ul>
<li>描述：MyBatis 增强插件，支持自动生成 entity、mapper、service 等常用操作的代码（收费）</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/9837-mybatiscodehelperpro">https://plugins.jetbrains.com/plugin/9837-mybatiscodehelperpro</a></li>
</ul>
</li>
</ul>
<h4 id="功能提效类"><a href="#功能提效类" class="headerlink" title="功能提效类"></a>功能提效类</h4><h5 id="源码阅读"><a href="#源码阅读" class="headerlink" title="源码阅读"></a>源码阅读</h5><ul>
<li>Call Graph<ul>
<li>描述：生成调用关系图，便于查看源码</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/12304-call-graph">https://plugins.jetbrains.com/plugin/12304-call-graph</a></li>
</ul>
</li>
<li>Jump to Line<ul>
<li>描述：支持跳转到任意行进行调试</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/14877-jump-to-line">https://plugins.jetbrains.com/plugin/14877-jump-to-line</a></li>
</ul>
</li>
<li>SequenceDiagram<ul>
<li>描述：自动生成方法调用时序图</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/8286-sequencediagram">https://plugins.jetbrains.com/plugin/8286-sequencediagram</a></li>
</ul>
</li>
<li>jclasslib Bytecode Viewer<ul>
<li>描述：字节码查看器</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/9248-jclasslib-bytecode-viewer">https://plugins.jetbrains.com/plugin/9248-jclasslib-bytecode-viewer</a></li>
</ul>
</li>
<li>BrowseWordAtCaret<ul>
<li>描述： 快速在相同单词间进行跳转</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/201-browsewordatcaret">https://plugins.jetbrains.com/plugin/201-browsewordatcaret</a></li>
</ul>
</li>
<li>CodeGlance<ul>
<li>描述：在编辑器右侧生成代码小地图，可以拖拽小地图光标快速定位代码，阅读行数很多的代码文件时非常实用。</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/7275-codeglance/">https://plugins.jetbrains.com/plugin/7275-codeglance/</a></li>
</ul>
</li>
</ul>
<h5 id="代码规范"><a href="#代码规范" class="headerlink" title="代码规范"></a>代码规范</h5><ul>
<li>CheckStyle-IDEA<ul>
<li>描述：自动检查 Java 代码规范</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/1065-checkstyle-idea">https://plugins.jetbrains.com/plugin/1065-checkstyle-idea</a></li>
</ul>
</li>
<li>Alibaba Java Coding Guidelines<ul>
<li>描述：代码规范检查插件</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/10046-alibaba-java-coding-guidelines">https://plugins.jetbrains.com/plugin/10046-alibaba-java-coding-guidelines</a></li>
</ul>
</li>
<li>SonarLint<ul>
<li>描述：帮助你发现和修复代码的错误和漏洞</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/7973-sonarlint">https://plugins.jetbrains.com/plugin/7973-sonarlint</a></li>
</ul>
</li>
<li>FindBugs-IDEA<ul>
<li>描述：帮你找出代码中潜藏的 Bug</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/3847-findbugs-idea">https://plugins.jetbrains.com/plugin/3847-findbugs-idea</a></li>
</ul>
</li>
<li>MetricsReloaded<ul>
<li>描述：代码复杂度分析</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/93?pr=idea">https://plugins.jetbrains.com/plugin/93?pr=idea</a></li>
</ul>
</li>
</ul>
<h5 id="格式处理"><a href="#格式处理" class="headerlink" title="格式处理"></a>格式处理</h5><ul>
<li><p>CamelCase</p>
<ul>
<li>描述：快速字符串格式转换工具，如驼峰式</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/7160-camelcase">https://plugins.jetbrains.com/plugin/7160-camelcase</a></li>
</ul>
</li>
<li><p>Json Parser</p>
<ul>
<li>描述：验证和格式化 Json 字符串的工具</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/10650-json-parser">https://plugins.jetbrains.com/plugin/10650-json-parser</a></li>
</ul>
</li>
<li><p>Properties to YAML Converter</p>
<ul>
<li>描述：把 Properties 文件的格式转为 YAML 格式</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/8000-properties-to-yaml-converter">https://plugins.jetbrains.com/plugin/8000-properties-to-yaml-converter</a></li>
</ul>
</li>
<li><p>String Manipulation</p>
<ul>
<li>描述：字符串快捷处理</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/2162-string-manipulation">https://plugins.jetbrains.com/plugin/2162-string-manipulation</a></li>
</ul>
</li>
</ul>
<h5 id="代码统计"><a href="#代码统计" class="headerlink" title="代码统计"></a>代码统计</h5><ul>
<li>WakaTime<ul>
<li>描述：代码统计和跟踪插件</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/7425-wakatime">https://plugins.jetbrains.com/plugin/7425-wakatime</a></li>
</ul>
</li>
<li>Statistic<ul>
<li>描述：代码统计</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/4509-statistic">https://plugins.jetbrains.com/plugin/4509-statistic</a></li>
</ul>
</li>
</ul>
<h5 id="代码检索"><a href="#代码检索" class="headerlink" title="代码检索"></a>代码检索</h5><ul>
<li>OnlineSearch<ul>
<li>描述：选择文本后支持不同搜索引擎进行搜索</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/8298-onlinesearch/">https://plugins.jetbrains.com/plugin/8298-onlinesearch/</a></li>
</ul>
</li>
<li>CodeSearch<ul>
<li>描述：快捷地打开搜索引擎进行搜索</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/12578-codesearch">https://plugins.jetbrains.com/plugin/12578-codesearch</a></li>
</ul>
</li>
</ul>
<h5 id="其他-1"><a href="#其他-1" class="headerlink" title="其他"></a>其他</h5><ul>
<li><p>Leetcode Editor</p>
<ul>
<li>描述：在 IDEA 里刷算法题</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/12132-leetcode-editor">https://plugins.jetbrains.com/plugin/12132-leetcode-editor</a></li>
</ul>
</li>
<li><p>File Watchers</p>
<ul>
<li>描述：监听文件，当其发生变化时自动执行命令</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/7177-file-watchers">https://plugins.jetbrains.com/plugin/7177-file-watchers</a></li>
</ul>
</li>
<li><p>PlantUML integration</p>
<ul>
<li>描述：UML 建模工具，只需简单的代码就能画出复杂的 UML 类图</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/7017-plantuml-integration">https://plugins.jetbrains.com/plugin/7017-plantuml-integration</a></li>
</ul>
</li>
<li><p>Bytecode Editor</p>
<ul>
<li>描述：字节码编辑工具</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/8461-bytecode-editor">https://plugins.jetbrains.com/plugin/8461-bytecode-editor</a></li>
</ul>
</li>
<li><p>Alibaba Cloud Toolkit</p>
<ul>
<li>描述：阿里云工具集</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/11386-alibaba-cloud-toolkit">https://plugins.jetbrains.com/plugin/11386-alibaba-cloud-toolkit</a></li>
</ul>
</li>
<li><p>Tencent Cloud Toolkit</p>
<ul>
<li>描述：腾讯云工具集</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/15653-tencent-cloud-toolkit">https://plugins.jetbrains.com/plugin/15653-tencent-cloud-toolkit</a></li>
</ul>
</li>
<li><p>EduTools</p>
<ul>
<li>描述：面向教育者，允许创建、分享和加入练习</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/10081-edutools">https://plugins.jetbrains.com/plugin/10081-edutools</a></li>
</ul>
</li>
<li><p>IDE Features Trainer</p>
<ul>
<li>描述：IntelliJ IDEA 官方出的学习辅助插件</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/8554-ide-features-trainer">https://plugins.jetbrains.com/plugin/8554-ide-features-trainer</a></li>
</ul>
</li>
<li><p>JRebel Plugin</p>
<ul>
<li>描述：项目热更新，提高效率（可惜要收费）</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/4441-jrebel-and-xrebel-for-intellij">https://plugins.jetbrains.com/plugin/4441-jrebel-and-xrebel-for-intellij</a></li>
</ul>
</li>
<li><p>Key Promoter X</p>
<ul>
<li>描述：快捷键提示插件。当你执行鼠标操作时，如果该操作可被快捷键代替，会给出提示，帮助你自然形成使用快捷键的习惯，告别死记硬背。</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/9792-key-promoter-x/">https://plugins.jetbrains.com/plugin/9792-key-promoter-x/</a></li>
</ul>
</li>
<li><p>Translation</p>
<ul>
<li>描述：翻译插件，鼠标选中文本，点击右键即可自动翻译成多国语言。</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/8579-translation/">https://plugins.jetbrains.com/plugin/8579-translation/</a></li>
</ul>
</li>
<li><p>idea_seat</p>
<ul>
<li>描述：自动提醒，防止你久坐不动</li>
<li>官网：<a href="https://github.com/s-unscrupulous/idea_seat">https://github.com/s-unscrupulous/idea_seat</a></li>
</ul>
</li>
<li><p>RestfulTool</p>
<ul>
<li>描述：辅助 web 开发的工具集</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/14280-restfultool">https://plugins.jetbrains.com/plugin/14280-restfultool</a></li>
</ul>
</li>
<li><p>Multirun</p>
<ul>
<li>描述：同时启动多应用</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/7248-multirun">https://plugins.jetbrains.com/plugin/7248-multirun</a></li>
</ul>
</li>
</ul>
<h4 id="扩展增强类"><a href="#扩展增强类" class="headerlink" title="扩展增强类"></a>扩展增强类</h4><ul>
<li>Free Mybatis Plugin<ul>
<li>描述：MyBatis 增强插件，支持 mapper &#x3D;&gt; xml 的跳转、代码生成等功能</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/8321-free-mybatis-plugin">https://plugins.jetbrains.com/plugin/8321-free-mybatis-plugin</a></li>
</ul>
</li>
<li>MyBatis Log Plugin<ul>
<li>描述：MyBatis SQL 提取和格式化输出</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/10065-mybatis-log-plugin">https://plugins.jetbrains.com/plugin/10065-mybatis-log-plugin</a></li>
</ul>
</li>
<li>Maven Helper<ul>
<li>描述：Maven 辅助插件</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/7179-maven-helper">https://plugins.jetbrains.com/plugin/7179-maven-helper</a></li>
</ul>
</li>
<li>Gradle View<ul>
<li>描述：Gradle 项目管理工具的扩展</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/7150-gradle-view">https://plugins.jetbrains.com/plugin/7150-gradle-view</a></li>
</ul>
</li>
<li>Arthas Idea<ul>
<li>描述： Arthas 命令生成插件。Arthas 是阿里开源的 Java 在线诊断工具，该插件可以自动生成 Arthas 在线 Java 代码诊断命令，不用再到官网翻文档拼命令啦！</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/13581-arthas-idea/">https://plugins.jetbrains.com/plugin/13581-arthas-idea/</a></li>
</ul>
</li>
<li>GitToolBox<ul>
<li>描述： Git 增强插件。在自带的 Git 功能之上，新增了查看 Git 状态、自动拉取代码、提交通知等功能。最好用的是可以查看到每一行代码的最近一次提交信息。</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/7499-gittoolbox/">https://plugins.jetbrains.com/plugin/7499-gittoolbox/</a></li>
</ul>
</li>
<li>BashSupport<ul>
<li>描述：支持 Bash 脚本文件的高亮和提示等</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/4230-bashsupport">https://plugins.jetbrains.com/plugin/4230-bashsupport</a></li>
</ul>
</li>
<li>Git Flow Integration<ul>
<li>描述：Git Flow 的图形界面操作</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/7315-git-flow-integration">https://plugins.jetbrains.com/plugin/7315-git-flow-integration</a></li>
</ul>
</li>
<li>Gitee<ul>
<li>描述：开源中国的码云插件</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/8383-gitee">https://plugins.jetbrains.com/plugin/8383-gitee</a></li>
</ul>
</li>
<li>Drools<ul>
<li>描述：规则引擎的扩展</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/16871-drools">https://plugins.jetbrains.com/plugin/16871-drools</a></li>
</ul>
</li>
<li>EnvFile<ul>
<li>描述：对多环境配置文件的支持</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/7861-envfile">https://plugins.jetbrains.com/plugin/7861-envfile</a></li>
</ul>
</li>
<li>Kubernetes<ul>
<li>描述：容器管理的扩展</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/10485-kubernetes">https://plugins.jetbrains.com/plugin/10485-kubernetes</a></li>
</ul>
</li>
<li>Vue.js<ul>
<li>描述：Vue.js 前端框架的扩展</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/9442-vue-js">https://plugins.jetbrains.com/plugin/9442-vue-js</a></li>
</ul>
</li>
<li>Scala<ul>
<li>描述：Scala 语言的扩展</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/1347-scala">https://plugins.jetbrains.com/plugin/1347-scala</a></li>
</ul>
</li>
<li>Zookeeper<ul>
<li>描述：Zookeeper 中间件的扩展</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/7364-zookeeper">https://plugins.jetbrains.com/plugin/7364-zookeeper</a></li>
</ul>
</li>
<li>Jms messenger<ul>
<li>描述：对 Java 消息服务的扩展</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/10949-jms-messenger">https://plugins.jetbrains.com/plugin/10949-jms-messenger</a></li>
</ul>
</li>
<li>MapStruct Support<ul>
<li>描述：对 MapStruct 对象转换的支持</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/10036-mapstruct-support">https://plugins.jetbrains.com/plugin/10036-mapstruct-support</a></li>
</ul>
</li>
<li>Big Data Tools<ul>
<li>描述：提供了 HDFS 等大数据框架的工具集</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/12494-big-data-tools">https://plugins.jetbrains.com/plugin/12494-big-data-tools</a></li>
</ul>
</li>
<li>CSV<ul>
<li>描述：支持 CSV 文件的高亮和提示等</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/10037-csv">https://plugins.jetbrains.com/plugin/10037-csv</a></li>
</ul>
</li>
<li>Ideolog<ul>
<li>描述：识别和格式化 log 日志文件</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/9746-ideolog">https://plugins.jetbrains.com/plugin/9746-ideolog</a></li>
</ul>
</li>
<li>Toml<ul>
<li>描述：支持 toml 文件的高亮和提示等</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/8195-toml">https://plugins.jetbrains.com/plugin/8195-toml</a></li>
</ul>
</li>
<li>.env files support<ul>
<li>描述：支持 .env 文件的高亮和提示等</li>
<li>官网：<a href="https://plugins.jetbrains.com/plugin/9525--env-files-support">https://plugins.jetbrains.com/plugin/9525--env-files-support</a></li>
</ul>
</li>
</ul>
<h3 id="常用软件"><a href="#常用软件" class="headerlink" title="常用软件"></a>常用软件</h3><p><strong>以下部分软件可在【公众号：程序员鱼皮】回复【软件】获取~</strong></p>
<h5 id="开发相关"><a href="#开发相关" class="headerlink" title="开发相关"></a>开发相关</h5><ul>
<li>JetBrains IDEA：Java 集成开发环境，凭学生邮箱可申请免费使用（<a href="https://www.jetbrains.com/idea/%EF%BC%89">https://www.jetbrains.com/idea/）</a></li>
<li>Reset Jetbrains：你懂的</li>
<li>Visual Studio Code：插件化代码编辑器（<a href="https://code.visualstudio.com/%EF%BC%89">https://code.visualstudio.com/）</a></li>
<li>Sublime Text：轻量代码编辑器（<a href="https://www.sublimetext.com/%EF%BC%89">https://www.sublimetext.com/）</a></li>
<li>Navicat：数据库管理软件（<a href="https://www.navicat.com.cn/%EF%BC%89">https://www.navicat.com.cn/）</a></li>
<li>JMeter：Java 性能测试工具（<a href="https://jmeter.apache.org/%EF%BC%89">https://jmeter.apache.org/）</a></li>
<li>JVisual VM：Java 运行状态可视化工具（<a href="https://visualvm.github.io/%EF%BC%89">https://visualvm.github.io/）</a></li>
<li>XShell：SSH 连接软件（<a href="https://www.netsarang.com/zh/xshell/%EF%BC%89">https://www.netsarang.com/zh/xshell/）</a></li>
<li>XFtp：FTP 连接软件（<a href="https://www.netsarang.com/zh/xftp/%EF%BC%89">https://www.netsarang.com/zh/xftp/）</a></li>
<li>Redis Desktop Manager：Redis 可视化管理工具（<a href="https://github.com/uglide/RedisDesktopManager%EF%BC%89">https://github.com/uglide/RedisDesktopManager）</a></li>
<li>Postman：接口测试工具（<a href="https://www.postman.com/%EF%BC%89">https://www.postman.com/）</a></li>
<li>VMware：虚拟机软件（<a href="https://www.vmware.com/%EF%BC%89">https://www.vmware.com/）</a></li>
<li>Chocolatey：Windows 软件包管理器（<a href="https://chocolatey.org/%EF%BC%89">https://chocolatey.org/）</a></li>
<li>Typora：写文档软件（<a href="https://typora.io/%EF%BC%89">https://typora.io/）</a></li>
</ul>
<h5 id="效率"><a href="#效率" class="headerlink" title="效率"></a>效率</h5><ul>
<li>Ditto：强大的剪切板（<a href="https://ditto-cp.sourceforge.io/%EF%BC%89">https://ditto-cp.sourceforge.io/）</a></li>
<li>uTools：插件化的效率工具（<a href="https://u.tools/%EF%BC%89">https://u.tools/）</a></li>
<li>XMind：思维导图软件（<a href="https://www.xmind.cn/%EF%BC%89">https://www.xmind.cn/）</a></li>
<li>Qdir：Windows 多窗口管理器（<a href="https://q-dir.en.softonic.com/%EF%BC%89">https://q-dir.en.softonic.com/）</a></li>
</ul>
<h3 id="项目源码（50-套）"><a href="#项目源码（50-套）" class="headerlink" title="项目源码（50 套）"></a>项目源码（50 套）</h3><h4 id="电商秒杀"><a href="#电商秒杀" class="headerlink" title="电商秒杀"></a>电商秒杀</h4><ul>
<li><p>天猫整站 J2EE：<a href="https://how2j.cn/module/115.htm">https://how2j.cn/module/115.htm</a></p>
</li>
<li><p>天猫整站 SSM：<a href="https://how2j.cn/module/134.html">https://how2j.cn/module/134.html</a></p>
</li>
<li><p>天猫整站 Springboot：<a href="https://how2j.cn/module/156.html">https://how2j.cn/module/156.html</a></p>
</li>
<li><p>mall-learning：<a href="https://github.com/macrozheng/mall-learningmall">https://github.com/macrozheng/mall-learningmall</a> （学习教程，架构、业务、技术要点全方位解析）</p>
</li>
<li><p>SpringBoot 电商商城系统 Mall4j：<a href="https://github.com/gz-yami/mall4j">https://github.com/gz-yami/mall4j</a></p>
</li>
<li><p>SpringBoot 完整电商系统 Mall：<a href="https://github.com/macrozheng/mall">https://github.com/macrozheng/mall</a> （包括前台商城系统及后台管理系统，基于 SpringBoot+MyBatis 实现）</p>
</li>
<li><p>newbee-mall：<a href="https://github.com/newbee-ltd/newbee-mall">https://github.com/newbee-ltd/newbee-mall</a> （一套电商系统，包括 newbee-mall 商城系统及 newbee-mall-admin 商城后台管理系统，基于 Spring Boot 2.X 及相关技术栈开发）</p>
</li>
<li><p>paascloud-master：<a href="https://github.com/paascloud/paascloud-master">https://github.com/paascloud/paascloud-master</a> （基于 spring cloud + vue + oAuth2.0，前后端分离商城系统）</p>
</li>
<li><p>mall-swarm：<a href="https://github.com/macrozheng/mall-swarm">https://github.com/macrozheng/mall-swarm</a> （一套微服务商城系统，采用了 Spring Cloud Greenwich、Spring Boot 2、MyBatis、Docker、Elasticsearch 等核心技术，同时提供了基于 Vue 的管理后台方便快速搭建系统）</p>
</li>
<li><p>onemall：<a href="https://github.com/YunaiV/onemall">https://github.com/YunaiV/onemall</a> （mall 商城，基于微服务的思想，构建在 B2C 电商场景下的项目实战。核心技术栈，是 Spring Boot + Dubbo 。未来，会重构成 Spring Cloud Alibaba）</p>
</li>
<li><p>litemall：<a href="https://github.com/linlinjava/litemall">https://github.com/linlinjava/litemall</a> （又一个小商城，litemall &#x3D; Spring Boot 后端 + Vue 管理员前端 + 微信小程序用户前端 + Vue 用户移动端）</p>
</li>
<li><p>xmall：<a href="https://github.com/Exrick/xmall">https://github.com/Exrick/xmall</a> （基于SOA架构的分布式电商购物商城 前后端分离 前台商城:Vue全家桶 后台管理系统）</p>
</li>
<li><p>miaosha：<a href="https://github.com/qiurunze123/miaosha">https://github.com/qiurunze123/miaosha</a> （秒杀系统设计与实现）</p>
</li>
<li><p>SecKill：<a href="https://github.com/hfbin/Seckill">https://github.com/hfbin/Seckill</a> （基于 SpringBoot+Mybatis+Redis+RabbitMQ 秒杀系统）</p>
</li>
</ul>
<h4 id="博客论坛"><a href="#博客论坛" class="headerlink" title="博客论坛"></a>博客论坛</h4><ul>
<li><p><a href="https://github.com/langhsu/mblog">Mblog</a>：开源 Java 博客系统</p>
</li>
<li><p><a href="https://github.com/halo-dev/halo">halo</a>：一个优秀的开源博客发布应用</p>
</li>
<li><p><a href="https://github.com/Qbian61/forum-java">forum-java</a>：一款用 Java（spring boot） 实现的现代化社区（论坛&#x2F;问答&#x2F;BBS&#x2F;社交网络&#x2F;博客）系统平台</p>
</li>
<li><p><a href="https://github.com/lenve/vhr">vhr</a>：微人事是一个前后端分离的人力资源管理系统，项目采用 SpringBoot+Vue 开发。</p>
</li>
<li><p><a href="https://github.com/cloudfavorites/favorites-web">favorites-web</a>:云收藏 Spring Boot 2.X 开源项目。云收藏是一个使用 Spring Boot 构建的开源网站，可以让用户在线随时随地收藏的一个网站，在网站上分类整理收藏的网站或者文章。</p>
</li>
<li><p><a href="https://github.com/codedrinker/community">community</a>：码问，开源论坛、问答系统，现有功能提问、回复、通知、最新、最热、消除零回复功能。技术栈 Spring、Spring Boot、MyBatis、MySQL&#x2F;H2、Bootstrap</p>
</li>
<li><p><a href="https://github.com/yourkevin/NiterForum">NiterForum</a>：尼特社区-NiterForum-一个论坛&#x2F;社区程序。后端Springboot&#x2F;MyBatis&#x2F;Maven&#x2F;MySQL，前端Thymeleaf&#x2F;Layui。可供初学者，学习、交流使用。</p>
</li>
<li><p><a href="https://github.com/lenve/VBlog">VBlog</a>：V部落，Vue+SpringBoot实现的多用户博客管理平台!</p>
</li>
<li><p><a href="https://github.com/damoqiongqiu/NiceFish">NiceFish</a>：SpringBoot&#x2F;SpringCloud 前后端分离项目</p>
</li>
<li><p><a href="https://github.com/ZHENFENG13/My-Blog">My-Blog</a>： My Blog 是由 SpringBoot + Mybatis + Thymeleaf 等技术实现的 Java 博客系统，页面美观、功能齐全、部署简单及完善的代码，一定会给使用者无与伦比的体验。</p>
</li>
<li><p><a href="https://github.com/ZHENFENG13/My-Blog-layui">My-Blog-layui</a>：layui 版本的 My-Blog : A simple &amp; beautiful blogging system implemented with spring-boot &amp; layui &amp; thymeleaf &amp; mybatis My Blog 是由  SpringBoot + Layui + Mybatis + Thymeleaf 等技术实现的 Java  博客系统，页面美观、功能齐全、部署简单及完善的代码，一定会给使用者无与伦比的体验</p>
</li>
<li><p><a href="https://github.com/88250/symphony">symphony</a>：Java 实现的现代化社区</p>
</li>
</ul>
<h4 id="管理系统"><a href="#管理系统" class="headerlink" title="管理系统"></a>管理系统</h4><ul>
<li><p><a href="https://github.com/wxiaoqi/Spring-Cloud-Admin">Spring-Cloud-Admin</a>：Cloud-Admin 是国内首个基于 Spring Cloud 微服务化开发平台，具有统一授权、认证后台管理系统，其中包含具备用户管理、资源权限管理、网关 API 管理等多个模块，支持多业务系统并行开发，可以作为后端服务的开发脚手架。代码简洁，架构清晰，适合学习和直接项目中使用。核心技术采用 Spring Boot2 以及 Spring Cloud Gateway 相关核心组件，前端采用 vue-element-admin 组件。</p>
</li>
<li><p><a href="https://github.com/tomsun28/bootshiro">bootshiro</a>：基于 springboot+shiro+jwt 的资源无状态认证权限管理系统后端</p>
</li>
<li><p><a href="https://github.com/72crm/72crm-java">悟空CRM</a>：基于jfinal+vue+ElementUI的前后端分离CRM系统</p>
</li>
<li><p><a href="https://github.com/elunez/eladmin">EL-ADMIN</a>：基于 SpringBoot 的后台管理系统</p>
</li>
<li><p><a href="https://gitee.com/log4j/pig">pig</a>：基于 Spring Boot 2.2、 Spring Cloud Hoxton &amp; Alibaba、 OAuth2 的 RBAC 权限管理系统。</p>
</li>
<li><p><a href="https://github.com/wuyouzhuguli/FEBS-Shiro">FEBS-Shiro</a>：Spring Boot 2.1.3，Shiro1.4.0 &amp; Layui 2.5.4 权限管理系统。</p>
</li>
<li><p><a href="https://github.com/Heeexy/SpringBoot-Shiro-Vue">Spring Boot-Shiro-Vue</a>：基于Spring Boot-Shiro-Vue 的权限管理</p>
</li>
<li><p><a href="https://github.com/ZeroWdd/studentmanager">studentmanager</a>：基于springboot+mybatis学生管理系统</p>
</li>
<li><p><a href="https://github.com/jishenghua/jshERP">jshERP</a>：华夏ERP基于SpringBoot框架和SaaS模式，立志为中小企业提供开源好用的ERP软件，目前专注进销存+财务功能。主要模块有零售管理、采购管理、销售管理、仓库管理、财务管理、报表查询、系统管理等。支持预付款、收入支出、仓库调拨、组装拆卸、订单等特色功能。拥有库存状况、出入库统计等报表。同时对角色和权限进行了细致全面控制，精确到每个按钮和菜单。</p>
</li>
<li><p><a href="https://github.com/misterchaos/HotelSystem">HotelSystem</a>：酒店管理系统 Java,tomcat,mysql,servlet,jsp实现，没有使用任何框架</p>
</li>
</ul>
<h4 id="开发平台"><a href="#开发平台" class="headerlink" title="开发平台"></a>开发平台</h4><ul>
<li><a href="https://github.com/2014shijina2014/open-capacity-platform">open-capacity-platform</a>：微服务能力开发平台</li>
<li><a href="https://github.com/zhangdaiscott/jeecg-boot">jeecg-boot</a>：JeecgBoot是一款基于BPM的低代码平台！前后端分离架构 SpringBoot 2.x，SpringCloud，Ant  Design&amp;Vue，Mybatis-plus，Shiro，JWT，支持微服务。强大的代码生成器让前后端代码一键生成，实现低代码开发！</li>
</ul>
<h4 id="其他-2"><a href="#其他-2" class="headerlink" title="其他"></a>其他</h4><ul>
<li><p><a href="https://github.com/mindskip/xzs">学之思在线考试系统</a>：一款 java + vue 的前后端分离的考试系统</p>
</li>
<li><p><a href="https://github.com/Jackson0714/PassJava-Platform">PassJava-Platform</a>：一款面试刷题的 Spring Cloud 开源系统</p>
</li>
<li><p><a href="https://github.com/kekingcn/kkFileView">kkFileView</a>：使用spring boot打造文件文档在线预览项目</p>
</li>
<li><p><a href="https://github.com/baomidou/dynamic-datasource-spring-boot-starter">dynamic-datasource</a>：一个基于springboot的快速集成多数据源的启动器</p>
</li>
<li><p><a href="https://github.com/373675032/moti-cloud">moti-cloud</a>：莫提网盘，基于 SpringBoot+MyBatis+ThymeLeaf+BootStrap，适合初学者</p>
</li>
<li><p><a href="https://github.com/qiurunze123/threadandjuc">threadandjuc</a>：three-high-import 高可用\高可靠\高性能，三高多线程导入系统（该项目意义为理论贯通)</p>
</li>
<li><p><a href="https://github.com/proxyee-down-org/proxyee-down">proxyee-down</a>：http下载工具，基于http代理，支持多连接分块下载</p>
</li>
<li><p><a href="https://github.com/sfturing/hosp_order">hosp_order</a>：医院预约挂号系统，基于 SSM 框架</p>
</li>
<li><p><a href="https://how2j.cn/module/170.html">趋势投资 SpringCloud</a></p>
</li>
<li><p><a href="https://how2j.cn/module/176.html">DiyTomcat</a></p>
</li>
</ul>
<h2 id="阶段-6：Java-高级"><a href="#阶段-6：Java-高级" class="headerlink" title="阶段 6：Java 高级"></a>阶段 6：Java 高级</h2><h3 id="目标-5"><a href="#目标-5" class="headerlink" title="目标"></a>目标</h3><p>不满足于能做，而是通过更 <strong>深入</strong> 和 <strong>广泛</strong> 的学习，实现高质量的代码和更优秀的架构，培养解决问题的能力。</p>
<p>已经到了这个阶段，建议除了看完成的教程外，平时多自主搜索信息去学习，积少成多。比如遇到了一个不了解的名词，可以去网上搜一下，感兴趣的话再进行下一步的学习。</p>
<h3 id="🌖-并发编程（21-天）"><a href="#🌖-并发编程（21-天）" class="headerlink" title="🌖 并发编程（21 天）"></a>🌖 并发编程（21 天）</h3><p>对 Java 后端开发程序员来说，懂得如何利用有限的系统资源来提高系统的性能是很重要的，也是大厂面试考察的重点，因此并发编程（尤其是 Java 并发包的使用）这块的知识很重要。</p>
<p>把它放到高级，是因为在学并发编程前，需要有一定的编程经验、了解一定的操作系统知识。</p>
<h4 id="知识-21"><a href="#知识-21" class="headerlink" title="知识"></a>知识</h4><ul>
<li>线程和进程</li>
<li>线程状态</li>
<li>并行和并发</li>
<li>同步和异步</li>
<li>Synchronized</li>
<li>Volatile 关键字</li>
<li>Lock 锁</li>
<li>死锁</li>
<li>可重入锁</li>
<li>线程安全</li>
<li>线程池</li>
<li>JUC 的使用</li>
<li>AQS</li>
<li>Fork Join</li>
<li>CAS</li>
</ul>
<h4 id="学习建议-23"><a href="#学习建议-23" class="headerlink" title="学习建议"></a>学习建议</h4><p>并发编程入门不难，依然是 <strong>先学会使用</strong> 基础的 Java 并发包， 再通过大量地实践和测试，了解一些原理，才能真正掌握何时使用、如何更合理地使用并发编程。而不是张口闭口多线程，上天入地高并发。</p>
<h4 id="经典面试题-16"><a href="#经典面试题-16" class="headerlink" title="经典面试题"></a>经典面试题</h4><ol>
<li>volatile 关键字的作用</li>
<li>使用线程池有哪些好处？</li>
<li>线程池参数如何设置？</li>
<li>什么是线程安全问题，如何解决？</li>
<li>介绍 synchronized 的锁升级机制</li>
<li>CopyOnWriteArrayList 适用于哪种场景？</li>
</ol>
<h4 id="资源-22"><a href="#资源-22" class="headerlink" title="资源"></a>资源</h4><ul>
<li><p>视频</p>
<ul>
<li>⭐【尚硅谷】大厂必备技术之JUC并发编程2021最新版：<a href="https://www.bilibili.com/video/BV1Kw411Z7dF">https://www.bilibili.com/video/BV1Kw411Z7dF</a> （特点是短、精、新）</li>
<li>黑马程序员全面深入学习Java并发编程：<a href="https://www.bilibili.com/video/BV16J411h7Rd">https://www.bilibili.com/video/BV16J411h7Rd</a> （讲的很细、全面深入）</li>
</ul>
</li>
<li><p>书籍</p>
<ul>
<li>⭐《Java并发编程实战》（国外的经典）</li>
<li>⭐《Java 并发编程艺术》（国人写的，理论思想内容较多，有时间建议反复看）</li>
</ul>
</li>
<li><p>项目</p>
<ul>
<li>⭐ Java 并发知识点总结：<a href="https://github.com/CL0610/Java-concurrency">https://github.com/CL0610/Java-concurrency</a></li>
</ul>
</li>
</ul>
<h3 id="🌖-JVM（30-天）"><a href="#🌖-JVM（30-天）" class="headerlink" title="🌖 JVM（30 天）"></a>🌖 JVM（30 天）</h3><p>想要深入理解 Java，探秘 Java 跨平台的奥秘，一定要了解 Java 底层的虚拟机技术。</p>
<p>了解虚拟机、掌握虚拟机性能调优方法，有助于你写出更高性能、资源占用更小的优质程序。</p>
<p>在学习 JVM 的过程中，也能学到很多精妙的设计，开拓思路。</p>
<h4 id="知识-22"><a href="#知识-22" class="headerlink" title="知识"></a>知识</h4><ul>
<li>JVM 内存结构</li>
<li>JVM 生命周期</li>
<li>主流虚拟机</li>
<li>Java 代码执行流程</li>
<li>类加载<ul>
<li>类加载器</li>
<li>类加载过程</li>
<li>双亲委派机制</li>
</ul>
</li>
<li>垃圾回收<ul>
<li>垃圾回收器</li>
<li>垃圾回收策略</li>
<li>垃圾回收算法</li>
<li>StopTheWorld</li>
</ul>
</li>
<li>字节码</li>
<li>内存分配和回收</li>
<li>JVM 性能调优<ul>
<li>性能分析方法</li>
<li>常用工具</li>
<li>参数设置</li>
</ul>
</li>
<li>Java 探针</li>
<li>线上故障分析</li>
</ul>
<h4 id="学习建议-24"><a href="#学习建议-24" class="headerlink" title="学习建议"></a>学习建议</h4><p>JVM 的知识略显枯燥，建议先看视频，有实操的地方一定要实操！自己多去分析。</p>
<p>第一遍不理解没有关系，可以再看书来巩固，想要真正学好，《深入理解 Java 虚拟机（第三版）》一定要读。</p>
<p>如果只是为了通过面试可以直接看更精简的视频，比如狂神的。</p>
<h4 id="经典面试题-17"><a href="#经典面试题-17" class="headerlink" title="经典面试题"></a>经典面试题</h4><ol>
<li>介绍 JVM 的内存模型？</li>
<li>JVM 内存为什么要分代？</li>
<li>介绍一次完整的 GC 流程</li>
<li>介绍双亲委派模型，为什么需要它？</li>
</ol>
<h4 id="资源-23"><a href="#资源-23" class="headerlink" title="资源"></a>资源</h4><ul>
<li>视频<ul>
<li>⭐ 尚硅谷宋红康 - JVM 全套教程详解：<a href="https://www.bilibili.com/video/BV1PJ411n7xZ">https://www.bilibili.com/video/BV1PJ411n7xZ</a> （讲得相当全面！附有实操）</li>
<li>【狂神说Java】JVM快速入门篇：<a href="https://www.bilibili.com/video/BV1iJ411d7jS">https://www.bilibili.com/video/BV1iJ411d7jS</a> （讲得有点浅，但都是面试重点，时间紧的小伙伴可以直接看这个）</li>
</ul>
</li>
<li>书籍<ul>
<li>⭐《深入理解 Java 虚拟机（第三版）》（有理论有实践，内容丰富，不可多得的 JVM 学习神书，就是有点废头发）</li>
</ul>
</li>
<li>项目<ul>
<li>⭐ Java 虚拟机底层原理知识总结：<a href="https://github.com/doocs/jvm">https://github.com/doocs/jvm</a></li>
</ul>
</li>
<li>实战<ul>
<li>阿里云 JVM 实战：<a href="https://developer.aliyun.com/graph/java/point/64">https://developer.aliyun.com/graph/java/point/64</a></li>
</ul>
</li>
<li>工具<ul>
<li>Arthas 开源 Java 诊断工具：<a href="https://github.com/alibaba/arthas">https://github.com/alibaba/arthas</a></li>
</ul>
</li>
</ul>
<h3 id="架构设计"><a href="#架构设计" class="headerlink" title="架构设计"></a>架构设计</h3><h4 id="🌖-分布式"><a href="#🌖-分布式" class="headerlink" title="🌖 分布式"></a>🌖 分布式</h4><ul>
<li>分布式理论<ul>
<li>CAP</li>
<li>BASE</li>
</ul>
</li>
<li>分布式缓存<ul>
<li>Redis</li>
<li>Memcached</li>
<li>Etcd</li>
</ul>
</li>
<li>一致性算法<ul>
<li>Raft</li>
<li>Paxos</li>
<li>一致性哈希</li>
</ul>
</li>
<li>分布式事务<ul>
<li>解决方案<ul>
<li>2PC</li>
<li>3PC</li>
<li>TCC</li>
<li>本地消息表</li>
<li>MQ 事务消息</li>
<li>最大努力通知</li>
</ul>
</li>
<li>LCN 分布式事务框架：<a href="https://github.com/codingapi/tx-lcn">https://github.com/codingapi/tx-lcn</a></li>
</ul>
</li>
<li>分布式 id 生成<ul>
<li>Leaf 分布式 id 生成服务：<a href="https://github.com/Meituan-Dianping/Leaf">https://github.com/Meituan-Dianping/Leaf</a></li>
</ul>
</li>
<li>分布式任务调度<ul>
<li>XXL-JOB 调度平台：<a href="https://www.xuxueli.com/xxl-job/">https://www.xuxueli.com/xxl-job/</a></li>
<li>elastic-job：<a href="https://gitee.com/elasticjob/elastic-job">https://gitee.com/elasticjob/elastic-job</a></li>
</ul>
</li>
<li>分布式服务调用<ul>
<li>trpc</li>
</ul>
</li>
<li>分布式存储<ul>
<li>HDFS</li>
<li>Ceph</li>
</ul>
</li>
<li>分布式数据库<ul>
<li>TiDB</li>
<li>OceanBase</li>
</ul>
</li>
<li>分布式文件系统<ul>
<li>HDFS</li>
</ul>
</li>
<li>分布式协调<ul>
<li>Zookeeper</li>
</ul>
</li>
<li>分布式监控<ul>
<li>Prometheus</li>
<li>Zabbix</li>
</ul>
</li>
<li>分布式消息队列<ul>
<li>RabbitMQ</li>
<li>Kafka</li>
<li>Apache Pulsar</li>
</ul>
</li>
<li>分布式日志收集<ul>
<li>Elastic Stack</li>
<li>Loki</li>
</ul>
</li>
<li>分布式搜索引擎<ul>
<li>Elasticsearch</li>
</ul>
</li>
<li>分布式链路追踪<ul>
<li>Apache SkyWalking</li>
</ul>
</li>
<li>分布式配置中心<ul>
<li>Apollo</li>
<li>Nacos</li>
</ul>
</li>
</ul>
<h4 id="🌗-高可用"><a href="#🌗-高可用" class="headerlink" title="🌗 高可用"></a>🌗 高可用</h4><ul>
<li>限流</li>
<li>降级熔断</li>
<li>冷备</li>
<li>双机热备</li>
<li>同城双活</li>
<li>异地双活</li>
<li>异地多活</li>
<li>容灾备份</li>
</ul>
<h4 id="🌗-高并发"><a href="#🌗-高并发" class="headerlink" title="🌗 高并发"></a>🌗 高并发</h4><ul>
<li>数据库<ul>
<li>分库分表<ul>
<li>MyCat 中间件</li>
<li>Apache ShardingSphere 中间件</li>
</ul>
</li>
<li>读写分离</li>
</ul>
</li>
<li>缓存<ul>
<li>缓存雪崩</li>
<li>缓存击穿</li>
<li>缓存穿透</li>
</ul>
</li>
<li>负载均衡<ul>
<li>负载均衡算法</li>
<li>软硬件负载均衡（2、3、4、7 层）</li>
</ul>
</li>
</ul>
<h4 id="🌘-服务网格"><a href="#🌘-服务网格" class="headerlink" title="🌘 服务网格"></a>🌘 服务网格</h4><p>服务网格用来描述组成应用程序的微服务网络以及它们之间的交互。服务网格的规模和复杂性不断的增长，它将会变得越来越难以理解和管理，常见的需求包括服务发现、负载均衡、故障恢复、度量和监控等。</p>
<h5 id="知识-23"><a href="#知识-23" class="headerlink" title="知识"></a>知识</h5><ul>
<li>Istio<ul>
<li>流量管理</li>
<li>安全性</li>
<li>可观测性</li>
</ul>
</li>
<li>Envoy（开源的边缘和服务代理）</li>
</ul>
<h5 id="资源-24"><a href="#资源-24" class="headerlink" title="资源"></a>资源</h5><ul>
<li>资料大全：<a href="https://www.servicemesher.com/awesome-servicemesh/">https://www.servicemesher.com/awesome-servicemesh/</a></li>
<li>istio 官方文档：<a href="https://preliminary.istio.io/latest/zh">https://preliminary.istio.io/latest/zh</a></li>
<li>istio 视频教程：<a href="https://www.bilibili.com/video/BV1Lf4y1x7j8">https://www.bilibili.com/video/BV1Lf4y1x7j8</a></li>
<li>在线体验 istio：<a href="https://katacoda.com/courses/istio/">https://katacoda.com/courses/istio/</a></li>
</ul>
<h4 id="🌘-DDD-领域驱动设计"><a href="#🌘-DDD-领域驱动设计" class="headerlink" title="🌘 DDD 领域驱动设计"></a>🌘 DDD 领域驱动设计</h4><p>将数据、业务流程抽象成容易理解的领域模型，通过用代码实现领域模型，来组成完整的业务系统。</p>
<h5 id="知识-24"><a href="#知识-24" class="headerlink" title="知识"></a>知识</h5><ul>
<li>DDD 的优势</li>
<li>DDD 的适用场景</li>
<li>DDD 核心概念<ul>
<li>领域模型分类：失血、贫血、充血、涨血</li>
<li>子域划分：核心域、通用域、支撑域</li>
<li>限界上下文</li>
<li>实体和值对象</li>
<li>聚合设计</li>
<li>领域事件</li>
</ul>
</li>
<li>DDD 实践</li>
</ul>
<h5 id="资源-25"><a href="#资源-25" class="headerlink" title="资源"></a>资源</h5><ul>
<li>DDD 入门：<a href="https://juejin.cn/post/7004002483601145863">https://juejin.cn/post/7004002483601145863</a></li>
<li>DDD 编码实践：<a href="https://juejin.cn/post/6844903903104860174">https://juejin.cn/post/6844903903104860174</a></li>
<li>DDD 实践教程：<a href="https://www.bilibili.com/video/BV1Y341167Xp">https://www.bilibili.com/video/BV1Y341167Xp</a></li>
</ul>
<h4 id="🌘-其他"><a href="#🌘-其他" class="headerlink" title="🌘 其他"></a>🌘 其他</h4><ul>
<li>Sidecar</li>
<li>Serverless</li>
<li>云原生</li>
</ul>
<h4 id="学习建议-25"><a href="#学习建议-25" class="headerlink" title="学习建议"></a>学习建议</h4><p>架构设计的学习没有顶点，多看文章，思考每种设计的优缺点和适用场景，有机会的话在企业中实践即可。</p>
<p>还在学校、或者初入这行的同学切记，千万不要一味地去背诵架构设计的八股文。你可以背，但是这一块的知识只有结合具体的项目才有意义，所以要多做项目去实践设计的合理性，而不是什么设计都咔咔往系统里去怼。比如面试问到分布式事务，能结合自己项目中用分布式事务解决问题的经验去回答最好。</p>
<h3 id="🌘-其他技术"><a href="#🌘-其他技术" class="headerlink" title="🌘 其他技术"></a>🌘 其他技术</h3><ul>
<li>热数据探测技术：京东 HotKey</li>
<li>数据库流水订阅：阿里 Canal</li>
<li>监控告警</li>
<li>应用安全</li>
<li>故障演练</li>
<li>流量回放</li>
</ul>
<h2 id="阶段-7：Java-求职"><a href="#阶段-7：Java-求职" class="headerlink" title="阶段 7：Java 求职"></a>阶段 7：Java 求职</h2><h3 id="目标-6"><a href="#目标-6" class="headerlink" title="目标"></a>目标</h3><p>找到好工作</p>
<h3 id="建议"><a href="#建议" class="headerlink" title="建议"></a>建议</h3><ol>
<li>尽早做规划，可以通过大厂招聘官网的岗位描述来了解岗位的要求</li>
<li>雕琢一份优秀的简历，推荐阅读：<a href="https://mp.weixin.qq.com/s/wfabzdpOPdq89faFFpZ4NA">https://mp.weixin.qq.com/s/wfabzdpOPdq89faFFpZ4NA</a></li>
<li>多读面经，坚持刷算法</li>
<li>多参与面试，持续复盘总结</li>
</ol>
<h3 id="资源-26"><a href="#资源-26" class="headerlink" title="资源"></a>资源</h3><h4 id="校招岗位"><a href="#校招岗位" class="headerlink" title="校招岗位"></a>校招岗位</h4><ul>
<li>⭐ 牛客求职校招版：<a href="https://www.nowcoder.com/recommend/campus">https://www.nowcoder.com/recommend/campus</a></li>
<li>阿里 Java 开发：<a href="https://campus.alibaba.com/position.htm?refno=12699">https://campus.alibaba.com/position.htm?refno=12699</a></li>
<li>腾讯后台开发：<a href="https://join.qq.com/post_detail.html?pid=1&id=101&tid=2">https://join.qq.com/post_detail.html?pid=1&amp;id=101&amp;tid=2</a></li>
<li>腾讯全栈开发：<a href="https://join.qq.com/post_detail.html?pid=1&id=137&tid=2">https://join.qq.com/post_detail.html?pid=1&amp;id=137&amp;tid=2</a></li>
<li>腾讯运营开发：<a href="https://join.qq.com/post_detail.html?pid=1&id=105&tid=2">https://join.qq.com/post_detail.html?pid=1&amp;id=105&amp;tid=2</a></li>
<li>美团后端开发：<a href="https://campus.meituan.com/jobs?jobFamily=1&jobId=4005&jobType=1&pageNo=2">https://campus.meituan.com/jobs?jobFamily=1&amp;jobId=4005&amp;jobType=1&amp;pageNo=2</a></li>
<li>华为软件开发：<a href="https://career.huawei.com/reccampportal/portal5/campus-recruitment-detail.html?jobId=176044">https://career.huawei.com/reccampportal/portal5/campus-recruitment-detail.html?jobId=176044</a></li>
</ul>
<h4 id="社招岗位"><a href="#社招岗位" class="headerlink" title="社招岗位"></a>社招岗位</h4><ul>
<li>⭐ 牛客求职社招版：<a href="https://www.nowcoder.com/recommend/fulltime">https://www.nowcoder.com/recommend/fulltime</a></li>
<li>阿里社招：<a href="https://job.alibaba.com/zhaopin/positionList.htm">https://job.alibaba.com/zhaopin/positionList.htm</a></li>
<li>腾讯社招：<a href="https://careers.tencent.com/search.html">https://careers.tencent.com/search.html</a></li>
</ul>
<h4 id="实习"><a href="#实习" class="headerlink" title="实习"></a>实习</h4><ul>
<li>⭐ 牛客实习广场：<a href="https://nowpick.nowcoder.com/w/intern/center">https://nowpick.nowcoder.com/w/intern/center</a></li>
<li>实习僧：<a href="https://www.shixiseng.com/">https://www.shixiseng.com/</a></li>
</ul>
<h4 id="内推"><a href="#内推" class="headerlink" title="内推"></a>内推</h4><ul>
<li>牛客内推：<a href="https://www.nowcoder.com/discuss/referral/index">https://www.nowcoder.com/discuss/referral/index</a></li>
</ul>
<h4 id="鱼皮经历"><a href="#鱼皮经历" class="headerlink" title="鱼皮经历"></a>鱼皮经历</h4><ul>
<li>从 0 开始的编程学习进大厂经历<ul>
<li>⭐ 我学计算机的四年，共勉：<a href="https://mp.weixin.qq.com/s/Nc7Ee2UyrPg6hGseQUCzeg">https://mp.weixin.qq.com/s/Nc7Ee2UyrPg6hGseQUCzeg</a></li>
</ul>
</li>
<li>实习经历<ul>
<li><p>⭐ 我的第一份实习：<a href="https://mp.weixin.qq.com/s/SwGiRzyTkCOOCUXfXPR1Pw">https://mp.weixin.qq.com/s/SwGiRzyTkCOOCUXfXPR1Pw</a></p>
</li>
<li><p>⭐ 我的第二份实习，字节跳动：<a href="https://mp.weixin.qq.com/s/3q-YIfuZBjPjSnamNwOraw">https://mp.weixin.qq.com/s/3q-YIfuZBjPjSnamNwOraw</a></p>
</li>
</ul>
</li>
</ul>
<h4 id="知识总结"><a href="#知识总结" class="headerlink" title="知识总结"></a>知识总结</h4><ul>
<li>⭐ 牛客 Java 面试宝典：<a href="https://www.nowcoder.com/tutorial/94">https://www.nowcoder.com/tutorial/94</a></li>
<li>⭐ JavaGuide：<a href="https://snailclimb.gitee.io/javaguide/#/">https://snailclimb.gitee.io/javaguide/#/</a></li>
<li>⭐ CS-Notes：<a href="http://www.cyc2018.xyz/">http://www.cyc2018.xyz/</a></li>
<li>阿里 Java 技术图谱：<a href="https://developer.aliyun.com/graph/java">https://developer.aliyun.com/graph/java</a></li>
</ul>
<h4 id="面经"><a href="#面经" class="headerlink" title="面经"></a>面经</h4><ul>
<li><p>⭐ 牛客面经：<a href="https://www.nowcoder.com/discuss/experience?tagId=639">https://www.nowcoder.com/discuss/experience?tagId=639</a></p>
</li>
<li><p>秋招总结&amp;Java心得（双非硕士，已拿11+5家Offer）：<a href="https://www.nowcoder.com/discuss/327041">https://www.nowcoder.com/discuss/327041</a></p>
</li>
<li><p>被疫情逼得gap year的完全菜鸡的春招之路。：<a href="https://www.nowcoder.com/discuss/427812">https://www.nowcoder.com/discuss/427812</a></p>
</li>
<li><p>谨以此文纪念2019年春招：<a href="https://www.nowcoder.com/discuss/181212">https://www.nowcoder.com/discuss/181212</a></p>
</li>
<li><p>2019秋招经验谈：<a href="https://www.nowcoder.com/discuss/122463">https://www.nowcoder.com/discuss/122463</a></p>
</li>
<li><p>秋招心得：<a href="https://www.nowcoder.com/discuss/317888">https://www.nowcoder.com/discuss/317888</a></p>
</li>
<li><p>非科班本科菜鸡投的337家(Java后台)：<a href="https://www.nowcoder.com/discuss/133333">https://www.nowcoder.com/discuss/133333</a></p>
</li>
<li><p>2018 这一年：<a href="https://www.nowcoder.com/discuss/137593">https://www.nowcoder.com/discuss/137593</a></p>
</li>
<li><p>双非的秋招，感谢牛客：<a href="https://www.nowcoder.com/discuss/142181">https://www.nowcoder.com/discuss/142181</a></p>
</li>
<li><p>二本本科Java上岸(滴滴京东58)2019秋招心得+面经：<a href="https://www.nowcoder.com/discuss/333912">https://www.nowcoder.com/discuss/333912</a></p>
</li>
<li><p>碎碎念流水账特别长 of 自己的 Java 秋招：<a href="https://www.nowcoder.com/discuss/354154">https://www.nowcoder.com/discuss/354154</a></p>
</li>
<li><p>秋招之路：个人历程以及面经总结：<a href="https://www.nowcoder.com/discuss/344311">https://www.nowcoder.com/discuss/344311</a></p>
</li>
<li><p>【秋招面经总结】菜逼的坎坷之路（JAVA后台研发）：<a href="https://www.nowcoder.com/discuss/352030">https://www.nowcoder.com/discuss/352030</a></p>
</li>
<li><p>阿里11面+EMC+网易+美团面经：<a href="https://www.nowcoder.com/discuss/105302">https://www.nowcoder.com/discuss/105302</a></p>
</li>
<li><p>2018秋招阿里巴巴java笔试试题：<a href="https://www.nowcoder.com/discuss/67379">https://www.nowcoder.com/discuss/67379</a></p>
</li>
<li><p>我的秋招经验分享（已拿BAT头条网易）：<a href="https://www.nowcoder.com/discuss/117071">https://www.nowcoder.com/discuss/117071</a></p>
</li>
<li><p>20届的阿里 头条 网易  滴滴 百度 小米等Java面经：<a href="https://www.nowcoder.com/discuss/68289">https://www.nowcoder.com/discuss/68289</a></p>
</li>
<li><p>拿了5个offer，回馈牛友发一波面经（长文详细）：<a href="https://www.nowcoder.com/discuss/79051">https://www.nowcoder.com/discuss/79051</a></p>
</li>
<li><p>【总结】零基础学习一年拿到BAT三家offer：<a href="https://www.nowcoder.com/discuss/188241">https://www.nowcoder.com/discuss/188241</a></p>
</li>
<li><p>本科生秋招经验总结帖：<a href="https://www.nowcoder.com/discuss/296586">https://www.nowcoder.com/discuss/296586</a></p>
</li>
<li><p>双非渣硕校招总结+Java面经（网易阿里百度等）：<a href="https://www.nowcoder.com/discuss/134850">https://www.nowcoder.com/discuss/134850</a></p>
</li>
<li><p>2018秋招笔试科大讯飞java笔试试题：<a href="https://www.nowcoder.com/discuss/67684">https://www.nowcoder.com/discuss/67684</a></p>
</li>
<li><p>头条后台研发面经（共三面）：<a href="https://www.nowcoder.com/discuss/94233">https://www.nowcoder.com/discuss/94233</a></p>
</li>
<li><p>一点点小经验和几家Java面经：<a href="https://www.nowcoder.com/discuss/138434">https://www.nowcoder.com/discuss/138434</a></p>
</li>
<li><p>感谢牛客网！发一波面经！阿里、网易游戏、京东等offer。：<a href="https://www.nowcoder.com/discuss/101712">https://www.nowcoder.com/discuss/101712</a></p>
</li>
<li><p>非科班水硕的春招实习总结- Java 后台开发：<a href="https://www.nowcoder.com/discuss/186528">https://www.nowcoder.com/discuss/186528</a></p>
</li>
<li><p>十面阿里，七面头条，六个Offer，春招结束：<a href="https://www.nowcoder.com/discuss/80156">https://www.nowcoder.com/discuss/80156</a></p>
</li>
<li><p>成功上岸，最后一波回馈：<a href="https://www.nowcoder.com/discuss/176434">https://www.nowcoder.com/discuss/176434</a></p>
</li>
<li><p>【Java后台开发面经】阿里|网易|头条|腾讯|华为：<a href="https://www.nowcoder.com/discuss/108655">https://www.nowcoder.com/discuss/108655</a></p>
</li>
<li><p>三跨学生的面经（头条、拼多多、华为、vivo）：<a href="https://www.nowcoder.com/discuss/195640">https://www.nowcoder.com/discuss/195640</a></p>
</li>
</ul>
<h4 id="面试题解"><a href="#面试题解" class="headerlink" title="面试题解"></a>面试题解</h4><ul>
<li>⭐ 2021 最新 Java 笔试、面试题合集：<a href="https://pan.baidu.com/s/1DE4HAu-DS80n7VOaGpU_KQ">https://pan.baidu.com/s/1DE4HAu-DS80n7VOaGpU_KQ</a> （密码：lkw1）</li>
<li>牛客网 Java开发校招面试考点汇总（附面试题和答案）：<a href="https://www.nowcoder.com/discuss/161991">https://www.nowcoder.com/discuss/161991</a></li>
<li>50w字+的技术类校招面试题汇总（附答案+考点）：<a href="https://www.nowcoder.com/discuss/164726">https://www.nowcoder.com/discuss/164726</a></li>
<li>硬件，软件（后端开发，算法，数据分析等）历年企业笔试真题汇总：<a href="https://www.nowcoder.com/discuss/212783">https://www.nowcoder.com/discuss/212783</a></li>
</ul>
<h4 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h4><ul>
<li><p>⭐ 尚硅谷 2021 逆袭版 Java 面试题第三季：<a href="https://www.bilibili.com/video/BV1Hy4y1B78T">https://www.bilibili.com/video/BV1Hy4y1B78T</a></p>
</li>
<li><p>⭐ 阿里大佬透彻讲解 Java 面试 500 道必考题：<a href="https://www.bilibili.com/video/BV1yU4y1J7Bb">https://www.bilibili.com/video/BV1yU4y1J7Bb</a></p>
</li>
</ul>
<h2 id="阶段-8：持续学习"><a href="#阶段-8：持续学习" class="headerlink" title="阶段 8：持续学习"></a>阶段 8：持续学习</h2><h3 id="目标-7"><a href="#目标-7" class="headerlink" title="目标"></a>目标</h3><p>持续追求技术的深度和广度，培养自己的 <strong>核心竞争力</strong> 和 <strong>不可替代性</strong> ，学无止境！</p>
<h3 id="学习建议-26"><a href="#学习建议-26" class="headerlink" title="学习建议"></a>学习建议</h3><p>自主学习，自主搜索教程，多看书，多阅读技术博客，多实践。</p>
<h3 id="学习方向"><a href="#学习方向" class="headerlink" title="学习方向"></a>学习方向</h3><h4 id="框架源码"><a href="#框架源码" class="headerlink" title="框架源码"></a>框架源码</h4><ul>
<li>Spring</li>
<li>SpringBoot</li>
<li>SpringMVC</li>
<li>MyBatis</li>
<li>Netty</li>
<li>Dubbo</li>
<li>SpringCloud</li>
</ul>
<h4 id="计算机原理"><a href="#计算机原理" class="headerlink" title="计算机原理"></a>计算机原理</h4><ul>
<li>《算法导论》：<a href="https://www.bilibili.com/video/av48922404">https://www.bilibili.com/video/av48922404</a></li>
<li>《现代操作系统》：<a href="https://www.bilibili.com/video/av9555596">https://www.bilibili.com/video/av9555596</a></li>
<li>《深入理解计算机系统》：<a href="https://www.bilibili.com/video/av31289365">https://www.bilibili.com/video/av31289365</a></li>
<li>《编译原理》： <a href="https://www.bilibili.com/video/av17649289">https://www.bilibili.com/video/av17649289</a></li>
<li>《计算机网络：自顶向下方法》：<a href="https://www.bilibili.com/video/BV1JV411t7ow">https://www.bilibili.com/video/BV1JV411t7ow</a></li>
<li>《计算机程序的构造和解释》：<a href="https://www.bilibili.com/video/av8515129">https://www.bilibili.com/video/av8515129</a></li>
<li>《数据库系统概论》：<a href="https://www.bilibili.com/video/BV1G54y1d7ZK">https://www.bilibili.com/video/BV1G54y1d7ZK</a></li>
</ul>
<h4 id="数据库-x2F-中间件-x2F-分布式"><a href="#数据库-x2F-中间件-x2F-分布式" class="headerlink" title="数据库 &#x2F; 中间件 &#x2F; 分布式"></a>数据库 &#x2F; 中间件 &#x2F; 分布式</h4><ul>
<li>数据库<ul>
<li>MySQL</li>
<li>PostgreSQL</li>
</ul>
</li>
<li>缓存<ul>
<li>Redis</li>
</ul>
</li>
<li>队列<ul>
<li>Apache Kafka</li>
<li>Apache Pulsar</li>
</ul>
</li>
<li>搜索引擎<ul>
<li>Elastic Stack<ul>
<li>Elasticsearch</li>
<li>logstash</li>
<li>kibana</li>
<li>beats</li>
</ul>
</li>
</ul>
</li>
<li>容器<ul>
<li>Docker</li>
<li>K8S</li>
</ul>
</li>
</ul>
<h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><ul>
<li>广告系统</li>
<li>电商系统</li>
<li>搜索系统</li>
<li>支付转账</li>
<li>游戏后台</li>
<li>即时通讯</li>
<li>社交系统</li>
<li>CMS 系统</li>
<li>ERP 系统</li>
<li>OA 系统</li>
<li>代码生成</li>
<li>权限管理</li>
<li>秒杀活动</li>
</ul>
<h4 id="架构设计-1"><a href="#架构设计-1" class="headerlink" title="架构设计"></a>架构设计</h4><p>同阶段 6 架构设计部分</p>
<h4 id="大数据"><a href="#大数据" class="headerlink" title="大数据"></a>大数据</h4><ul>
<li>5V 特点</li>
<li>Hadoop</li>
<li>HDFS</li>
<li>MapReduce</li>
<li>Spark</li>
<li>Flink</li>
<li>Storm</li>
<li>Hive</li>
<li>HBase</li>
<li>Druid</li>
<li>Kylin</li>
<li>Pig</li>
<li>Mahout</li>
</ul>
<h4 id="前沿技术"><a href="#前沿技术" class="headerlink" title="前沿技术"></a>前沿技术</h4><ul>
<li>云原生：<a href="https://www.jianshu.com/p/a37baa7c3eff">https://www.jianshu.com/p/a37baa7c3eff</a><ul>
<li>Quasar Framework：<a href="http://www.quasarchs.com/">http://www.quasarchs.com/</a></li>
</ul>
</li>
<li>服务网格：<a href="https://www.redhat.com/zh/topics/microservices/what-is-a-service-mesh">https://www.redhat.com/zh/topics/microservices/what-is-a-service-mesh</a><ul>
<li>istio：<a href="https://github.com/istio/istio">https://github.com/istio/istio</a></li>
</ul>
</li>
<li>GraalVM：<a href="https://juejin.cn/post/6850418120570437646">https://juejin.cn/post/6850418120570437646</a> （高性能的通用虚拟机）<ul>
<li>官网：<a href="https://www.graalvm.org/">https://www.graalvm.org/</a></li>
</ul>
</li>
<li>ZGC：<a href="https://juejin.cn/post/6859276583656980493">https://juejin.cn/post/6859276583656980493</a> （新一代垃圾回收器）<ul>
<li>官网：<a href="http://openjdk.java.net/projects/zgc/">http://openjdk.java.net/projects/zgc/</a></li>
</ul>
</li>
</ul>
<h3 id="自学-Java-专题资源"><a href="#自学-Java-专题资源" class="headerlink" title="自学 Java 专题资源"></a>自学 Java 专题资源</h3><ul>
<li>⭐ GitHub Java 专区：<a href="https://github.com/topics/java">https://github.com/topics/java</a></li>
<li>⭐ GitHub Java 合集：<a href="https://github.com/akullpp/awesome-java">https://github.com/akullpp/awesome-java</a></li>
<li>StackOverflow：<a href="https://stackoverflow.com/questions/tagged/java">https://stackoverflow.com/questions/tagged/java</a> （解决问题必备）</li>
<li>⭐ 掘金 Java 专区：<a href="https://juejin.cn/tag/Java">https://juejin.cn/tag/Java</a></li>
<li>美团技术团队：<a href="https://tech.meituan.com/">https://tech.meituan.com/</a></li>
<li>阿里技术团队：<a href="https://102.alibaba.com/tech/list/">https://102.alibaba.com/tech/list/</a></li>
<li>有赞技术团队：<a href="https://tech.youzan.com/tag/back-end/">https://tech.youzan.com/tag/back-end/</a></li>
</ul>
<h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="程序员重要能力"><a href="#程序员重要能力" class="headerlink" title="程序员重要能力"></a>程序员重要能力</h3><p>想成为大佬，就是要通过学习和积累，提升自己的各方面能力，比较抽象，共勉！</p>
<ol>
<li><p>团队协作能力</p>
</li>
<li><p>高效沟通能力</p>
</li>
<li><p>需求分析能力</p>
</li>
<li><p>架构设计能力</p>
</li>
<li><p>抽象复用能力</p>
</li>
<li><p>独立创造能力</p>
</li>
<li><p>问题解决能力</p>
</li>
<li><p>归纳总结能力</p>
</li>
<li><p>自主学习能力</p>
</li>
<li><p>工具利用能力</p>
</li>
<li><p>高效编码能力</p>
</li>
<li><p>信息检索能力</p>
</li>
<li><p>开源建设能力</p>
</li>
<li><p>源码阅读能力</p>
</li>
<li><p>自测审查能力</p>
</li>
<li><p>文档编写能力</p>
</li>
<li><p>知识表达能力</p>
</li>
<li><p>绘图描述能力</p>
</li>
<li><p>兴趣驱动（长期学习能力）</p>
</li>
<li><p>保持好奇心</p>
</li>
<li><p>其他（狗头）</p>
<ul>
<li><p>复制粘贴能力</p>
</li>
<li><p>打架能力</p>
</li>
<li><p>PPT 制作能力</p>
</li>
</ul>
</li>
</ol>
<h3 id="编程误区"><a href="#编程误区" class="headerlink" title="编程误区"></a>编程误区</h3><ol>
<li>我不适合学编程？❌（兴趣比天赋更重要，不要怀疑自己）</li>
<li>忽视基础，急于求成 ❌（勿以浮沙筑高台）</li>
<li>数学、英语差，就学不好编程 ❌（开发工作基本不用高等数学，英语可以使用翻译软件、工作中提升）</li>
<li>编程时，刻意记忆代码 ❌（知道每行代码的意义，能看文档写出来就行）</li>
<li>每行代码都要追求完美 ❌（何为完美？每个人的定义不同）</li>
<li>用百度搜索、复制粘贴的都是菜鸡程序员 ❌（艹）</li>
<li>我做的项目太小了，就不整理了 ❌（自己的每个项目都要整理，可以记录自己的成长）</li>
<li>跟别人交流很麻烦，我更愿意自己写代码 ❌（1 + 1 &gt; 2，切勿闭门造车，不过也要找到合适的同学去交流）</li>
<li>做别人做过的项目没有意义 ❌（连别人做过的项目都做不出，还想造新轮子？）</li>
<li>遇到 Bug，想办法绕过而不是寻找解决方案 ❌（Bug 最能使人成长）</li>
<li>遇到问题，第一时间去问别人而非自己解决 ❌（建议阅读《提问的智慧》）</li>
<li>花了很多时间、看了很多书，就能学好编程 ❌（编程最忌讳纸上谈兵）</li>
<li>只向前学习，不整理学过的知识 ❌（建议每学完一个知识，都去回想、总结、写心得，这个时间的花费是值得的）</li>
<li>单元测试不重要 ❌（一棍打死）</li>
<li>写文档不重要 ❌（一棍打死）</li>
<li>和我无关的工作，就不需要了解 ❌（了解团队、同行是很重要的，全局视野）</li>
<li>收藏的资源从来不看，就不收藏了 ❌（万一以后用到了呢？）</li>
<li>不去考虑需求的价值，而是一味寻求解决方案 ❌（不要成为需求机器，要有自己的独立思考）</li>
</ol>
<h3 id="高效法则"><a href="#高效法则" class="headerlink" title="高效法则"></a>高效法则</h3><ol>
<li>不要过分追求完美，完成比完美更重要。</li>
<li>有现成的代码，就不要自己写，避免重复劳动（学习除外）。</li>
<li>学会使用软件及快捷键来提升自己的编码效率。</li>
<li>做项目前，要先想清楚怎么做，做好充分的预研和设计。这样不仅便于后续的程序扩展，也能避免无意义的返工。</li>
<li>将大的目标进行拆解，做好计划，分清主次。不要因为觉得目标遥不可及而拖延，也不要盲目乐观而松懈。</li>
<li>养成好的作息习惯，找到自己适合工作的黄金时间。</li>
<li>记性不好，就多记录、多总结、定期复习。哪怕实在记不住，也可以借助文档、收藏夹软件来当自己的第二大脑。</li>
<li>积累属于自己的工具库，配合搜索软件实现随用随取。</li>
<li>多和其他同行交流或订阅技术推送，拓宽知识渠道，从而了解更多的工具和方法。有些东西你只要听说过，要用时也许就能节省大量查找时间。</li>
<li>找到让自己进入专注做事的状态的方法，比如戴上耳机、嚼口香糖等。</li>
<li>做事高效，离不开经验的积累，因此要多写代码、多做项目。</li>
</ol>
<h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><ol>
<li><p>按照这份路线学习，每天要学多少个小时，总共要学多久？</p>
<p>回答：每个人学习能力不同，当然没有固定标准。我当时平均每天可以学习 6 个小时，寒暑假能保证 8 小时以上的学习，路线中的时长是我当时学习时长 * 1.5 倍的参考值。实话说，我的学习效率真的不高，对编程感兴趣，多学就好了。与其纠结这个时长，倒不妨多抽点时间，每天多学一点。</p>
</li>
<li><p>这份路线上推荐的资源，鱼皮都看完了么？</p>
<p>回答：我是特么神仙啊？怎么可能都看完了！这份路线的本质是以网上现有的、死板的 Java 大学习框架为基础，结合我自己实际学习的知识、经验和感悟给它注入灵魂，从而希望给大家带来更大的帮助和价值。路线中的资源都是利用我自己的资源检索能力和渠道，通过试看、反复对比和参考评价精选出来的，不是主观臆断、空穴来风。</p>
</li>
<li><p>我学到这份路线的哪个位置，可以找工作？</p>
<p>回答：这和你自己的领悟能力和教育背景有关。夸张点说，有些清华大学的同学，可能之前都没学过 Java，照样能找到大厂 Java 开发工作。学到同一阶段的同学，学习过程中的认真程度、积累总结数、做项目个数、基础学习的好坏不同，找到的工作肯定也不同。但一般情况下，想要进大厂，建议至少学完阶段 4 的微服务部分，然后去做一个完整的项目，用上之前学习的技术；不想进大厂的同学，学完第 3 阶段后，学下缓存和队列，一般也能找到 Java 开发的工作。</p>
</li>
<li><p>学完这份路线就能进大厂么？</p>
<p>回答：你先学完，再问这个问题。没有绝对进大厂的保证，但是相信我，把这份路线上的大部分知识学了，再做做项目，哪怕进不了大厂，你拿到的薪水也绝对比松散学习的同学高！</p>
</li>
<li><p>我可以相信你么？</p>
<p>回答：不要相信我，应该相信你自己。想进大厂，就不要怀疑自己的能力！</p>
</li>
</ol>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>觉得看文字累的朋友，欢迎看下视频版，带大家导读一下：<a href="https://www.bilibili.com/video/BV1Qf4y1K7ff/">https://www.bilibili.com/video/BV1Qf4y1K7ff/</a></p>
<p>以上就是鱼皮熬了几天大夜、结合个人经验、并且参考了大量网上的文章和评论总结而成的学习路线，真的是非常不容易，如果大家觉得满意请务必 <strong>三连</strong> 支持下。</p>
<p>我是鱼皮，持续分享编程干货的程序员，欢迎关注，下期再见~</p>
]]></content>
      <categories>
        <category>学习路线</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>路线</tag>
      </tags>
  </entry>
  <entry>
    <title>用户管理系统后端</title>
    <url>/post/29c5a7c0.html</url>
    <content><![CDATA[<h1 id="用户管理系统后端"><a href="#用户管理系统后端" class="headerlink" title="用户管理系统后端"></a>用户管理系统后端</h1><hr>
<h1 id="一、项目初始化"><a href="#一、项目初始化" class="headerlink" title="一、项目初始化"></a>一、项目初始化</h1><h2 id="1-1、创建项目"><a href="#1-1、创建项目" class="headerlink" title="1.1、创建项目"></a><strong>1.1、创建项目</strong></h2><blockquote>
<p>创建SpringBoot项目</p>
<p>版本：2.7.8</p>
</blockquote>
<h2 id="1-2、pom依赖"><a href="#1-2、pom依赖" class="headerlink" title="1.2、pom依赖"></a>1.2、<strong>pom依赖</strong></h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- web --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- mysql --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- mybatis-plus --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 代码生成器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- freemarker 一个用Java语言编写的模板引擎--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.freemarker<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>freemarker<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- lombok --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--redis--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="1-3、properties-yml"><a href="#1-3、properties-yml" class="headerlink" title="1.3、properties.yml"></a>1.3、<strong>properties.yml</strong></h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">&#x27;061313&#x27;</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql:///xdb</span></span><br><span class="line"><span class="comment">#    driver-class-name: com.mysql.cj.jdbc.Driver</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">com.cheng:</span> <span class="string">debug</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h1 id="二、MyBatis-Plus代码生成器"><a href="#二、MyBatis-Plus代码生成器" class="headerlink" title="二、MyBatis-Plus代码生成器"></a>二、MyBatis-Plus代码生成器</h1><h2 id="2-1、创建生成器"><a href="#2-1、创建生成器" class="headerlink" title="2.1、创建生成器"></a>2.1、创建生成器</h2><blockquote>
<p>在<code>src/test/java/com/cheng/CodeGenerator.java</code>下创建代码生成器</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql:///xdb&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;061313&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">author</span> <span class="operator">=</span> <span class="string">&quot;aaron&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">outputDir</span> <span class="operator">=</span> <span class="string">&quot;E:\\IdeaProjects\\workspace\\x-admin\\src\\main\\java&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">basePackage</span> <span class="operator">=</span> <span class="string">&quot;com.cheng&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">moduleName</span> <span class="operator">=</span> <span class="string">&quot;sys&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">mapperLocation</span> <span class="operator">=</span> <span class="string">&quot;E:\\IdeaProjects\\workspace\\x-admin\\src\\main\\resources\\mapper\\&quot;</span> + moduleName;</span><br><span class="line"><span class="type">String</span> <span class="variable">tableName</span> <span class="operator">=</span> <span class="string">&quot;x_user,x_menu,x_role,x_role_menu,x_user_role&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">tablePrefix</span> <span class="operator">=</span> <span class="string">&quot;x_&quot;</span>;</span><br><span class="line">FastAutoGenerator.create(url, username, password)</span><br><span class="line">        .globalConfig(builder -&gt; &#123;</span><br><span class="line">            builder.author(author) <span class="comment">// 设置作者</span></span><br><span class="line">                    .enableSwagger() <span class="comment">// 开启 swagger 模式</span></span><br><span class="line">                    <span class="comment">//.fileOverride() // 覆盖已生成文件</span></span><br><span class="line">                    .outputDir(outputDir); <span class="comment">// 指定输出目录</span></span><br><span class="line">        &#125;)</span><br><span class="line">        .packageConfig(builder -&gt; &#123;</span><br><span class="line">            builder.parent(basePackage) <span class="comment">// 设置父包名</span></span><br><span class="line">                    .moduleName(moduleName) <span class="comment">// 设置父包模块名</span></span><br><span class="line">                    .pathInfo(Collections.singletonMap(OutputFile.xml, mapperLocation)); <span class="comment">// 设置mapperXml生成路径</span></span><br><span class="line">        &#125;)</span><br><span class="line">        .strategyConfig(builder -&gt; &#123;</span><br><span class="line">            builder.addInclude(tableName) <span class="comment">// 设置需要生成的表名</span></span><br><span class="line">                    .addTablePrefix(tablePrefix); <span class="comment">// 设置过滤表前缀</span></span><br><span class="line">        &#125;)</span><br><span class="line">        .templateEngine(<span class="keyword">new</span> <span class="title class_">FreemarkerTemplateEngine</span>()) <span class="comment">// 使用Freemarker引擎模板，默认的是Velocity引擎模板</span></span><br><span class="line">        .execute();</span><br></pre></td></tr></table></figure>



<h2 id="2-2、启动类加注解"><a href="#2-2、启动类加注解" class="headerlink" title="2.2、启动类加注解"></a>2.2、<strong>启动类加注解</strong></h2><blockquote>
<p>使用<code>@MapperScan</code>注解<code>mapper</code>下的类都不需要再加<code>@Mapper</code></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@MapperScan(&quot;com.cheng.*.mapper&quot;)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="3-3、测试"><a href="#3-3、测试" class="headerlink" title="3.3、测试"></a>3.3、测试</h2><ol>
<li><strong>测试数据层</strong></li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">XAdminApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getAll</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;User&gt; users = userMapper.selectList(<span class="literal">null</span>);</span><br><span class="line">        users.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<ol>
<li><strong>测试控制层</strong></li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="comment">//@CrossOrigin 解决跨域问题</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong></p>
<ul>
<li>这里需要使用@RestController因为需要返回的json数据</li>
</ul>
<p><strong>具体</strong>：<a href="https://www.wolai.com/pSVQdgwdnjTfJb2hQKNnMJ" title="https://www.wolai.com/pSVQdgwdnjTfJb2hQKNnMJ">https://www.wolai.com/pSVQdgwdnjTfJb2hQKNnMJ</a></p>
<h1 id="三、公共相应类"><a href="#三、公共相应类" class="headerlink" title="三、公共相应类"></a>三、公共相应类</h1><blockquote>
<p>为了给前端返回统一的格式，我们需要<strong>统一格式</strong></p>
</blockquote>
<h2 id="3-1、创建公共类"><a href="#3-1、创建公共类" class="headerlink" title="3.1、创建公共类"></a>3.1、创建公共类</h2><p>创建<code>com/cheng/common/vo/Result.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Result</span> &lt;T&gt;&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Result&lt;T&gt; <span class="title function_">success</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>&lt;&gt;(<span class="number">20000</span>,<span class="string">&quot;success&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Result&lt;T&gt; <span class="title function_">success</span><span class="params">(T data)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>&lt;&gt;(<span class="number">20000</span>,<span class="string">&quot;success&quot;</span>,data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Result&lt;T&gt; <span class="title function_">success</span><span class="params">(String message,T data)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>&lt;&gt;(<span class="number">20000</span>,message,data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Result&lt;T&gt; <span class="title function_">success</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>&lt;&gt;(<span class="number">20000</span>,message,<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>&lt;T&gt;  Result&lt;T&gt; <span class="title function_">fail</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>&lt;&gt;(<span class="number">20001</span>,<span class="string">&quot;fail&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>&lt;T&gt;  Result&lt;T&gt; <span class="title function_">fail</span><span class="params">(Integer code)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>&lt;&gt;(code,<span class="string">&quot;fail&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>&lt;T&gt;  Result&lt;T&gt; <span class="title function_">fail</span><span class="params">(Integer code, String message)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>&lt;&gt;(code,message,<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>&lt;T&gt;  Result&lt;T&gt; <span class="title function_">fail</span><span class="params">( String message)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>&lt;&gt;(<span class="number">20001</span>,message,<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="四、登录相关接口"><a href="#四、登录相关接口" class="headerlink" title="四、登录相关接口"></a>四、登录相关接口</h1><h2 id="4-1、登录"><a href="#4-1、登录" class="headerlink" title="4.1、登录"></a>4.1、登录</h2><blockquote>
<p>查看前端项目时，点击登陆时，打开F12查看发送了哪些请求</p>
<p>这样就可以对这些请求进行编写</p>
</blockquote>
<table>
<thead>
<tr>
<th>接口属性</th>
<th>值</th>
</tr>
</thead>
<tbody><tr>
<td>url</td>
<td>&#x2F;user&#x2F;login</td>
</tr>
<tr>
<td>method</td>
<td>post</td>
</tr>
<tr>
<td>请求参数</td>
<td>username  &amp;#xA;password</td>
</tr>
</tbody></table>
<p>返回参数：</p>
<ol>
<li><code>code: 20000</code></li>
<li><code>data: &#123;token: &quot;user:90d64b1d-8b35-4162-b2e6-a9a9af231f03&quot;&#125;</code></li>
<li><code>token: &quot;user:90d64b1d-8b35-4162-b2e6-a9a9af231f03&quot;</code></li>
<li><code>message: &quot;success&quot;</code></li>
</ol>
<h3 id="1-UserController"><a href="#1-UserController" class="headerlink" title="1.UserController"></a>1.<strong>UserController</strong></h3><blockquote>
<p>在<code>UserController</code>类中编写login方法</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;Map&lt;String,Object&gt;&gt; <span class="title function_">login</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span>&#123;</span><br><span class="line">    Map&lt;String,Object&gt; data = userService.login(user);</span><br><span class="line">    <span class="keyword">if</span>(data != <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> Result.success(data);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Result.fail(<span class="number">20002</span>,<span class="string">&quot;用户名或密码错误&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p><strong>知识点</strong></p>
<ul>
<li><a href="https://blog.csdn.net/justry_deng/article/details/80972817" title="@RequestBody的使用">@RequestBody的使用</a></li>
</ul>
<h3 id="2-UserServiceImpl"><a href="#2-UserServiceImpl" class="headerlink" title="2.UserServiceImpl"></a>2.<strong>UserServiceImpl</strong></h3><blockquote>
<p>在<code>UserServiceImpl</code>编写登录逻辑</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title function_">login</span><span class="params">(User user)</span> &#123;</span><br><span class="line"></span><br><span class="line">    LambdaQueryWrapper&lt;User&gt; lqw = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">// 根据用户名和密码查询</span></span><br><span class="line">    lqw.eq(User::getUsername, user.getUsername());</span><br><span class="line">    lqw.eq(User::getPassword, user.getPassword());</span><br><span class="line">    <span class="type">User</span> <span class="variable">loginUser</span> <span class="operator">=</span> <span class="built_in">this</span>.baseMapper.selectOne(lqw);</span><br><span class="line">    <span class="comment">// 如果结果不为空，则生成token，将用户信息存入redis</span></span><br><span class="line">    <span class="keyword">if</span> (loginUser != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;user:&quot;</span> + UUID.randomUUID();</span><br><span class="line">        <span class="comment">// 存入redis</span></span><br><span class="line">        loginUser.setPassword(<span class="literal">null</span>);</span><br><span class="line">        redisTemplate.opsForValue().set(key,loginUser,<span class="number">30</span>, TimeUnit.HOURS);</span><br><span class="line">        Map&lt;String,Object&gt; data = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        data.put(<span class="string">&quot;token&quot;</span>,key);</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="3-整合Redis"><a href="#3-整合Redis" class="headerlink" title="3.整合Redis"></a>3.<strong>整合Redis</strong></h3><ol>
<li><strong>pom</strong></li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- redis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<ol>
<li><strong>yml</strong></li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>3.<strong>配置类</strong></p>
<blockquote>
<p>创建config包下MyRedisConfig配置类</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyRedisConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RedisConnectionFactory factory;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;String,Object&gt; <span class="title function_">redisTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">        RedisTemplate&lt;String, Object&gt; redisTemplate = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;&gt;();</span><br><span class="line">        redisTemplate.setConnectionFactory(factory);</span><br><span class="line">        redisTemplate.setKeySerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line"></span><br><span class="line">        Jackson2JsonRedisSerializer&lt;Object&gt; serializer = <span class="keyword">new</span> <span class="title class_">Jackson2JsonRedisSerializer</span>&lt;&gt;(Object.class);</span><br><span class="line">        redisTemplate.setValueSerializer(serializer);</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">om</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        om.setDateFormat(<span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>));</span><br><span class="line">        om.setTimeZone(TimeZone.getDefault());</span><br><span class="line">        om.configure(MapperFeature.USE_ANNOTATIONS, <span class="literal">false</span>);</span><br><span class="line">        om.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, <span class="literal">false</span>);</span><br><span class="line">        om.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, <span class="literal">false</span>);</span><br><span class="line">        om.activateDefaultTyping(LaissezFaireSubTypeValidator.instance, ObjectMapper.DefaultTyping.NON_FINAL, JsonTypeInfo.As.PROPERTY);</span><br><span class="line">        om.setSerializationInclusion(JsonInclude.Include.NON_NULL);</span><br><span class="line">        serializer.setObjectMapper(om);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 存入redis</span></span><br><span class="line">loginUser.setPassword(<span class="literal">null</span>);</span><br><span class="line">redisTemplate.opsForValue().set(key,loginUser,<span class="number">30</span>, TimeUnit.HOURS);</span><br></pre></td></tr></table></figure>



<h2 id="4-2、获取用户信息"><a href="#4-2、获取用户信息" class="headerlink" title="4.2、获取用户信息"></a>4.2、获取用户信息</h2><table>
<thead>
<tr>
<th>接口属性</th>
<th>值</th>
</tr>
</thead>
<tbody><tr>
<td>url</td>
<td>&#x2F;user&#x2F;info?token&#x3D;xxx</td>
</tr>
<tr>
<td>method</td>
<td>get</td>
</tr>
<tr>
<td>请求参数</td>
<td>token</td>
</tr>
</tbody></table>
<p>返回参数：</p>
<ol>
<li><code>code: 20000</code></li>
<li><code>data: &#123;token: &quot;user:2528455e-da46-4e9b-a789-fbcdfcad3e8d&quot;&#125;</code></li>
<li><code>token: &quot;user:2528455e-da46-4e9b-a789-fbcdfcad3e8d&quot;</code></li>
<li><code>message: &quot;success&quot;</code></li>
</ol>
<h3 id="1-UserController-1"><a href="#1-UserController-1" class="headerlink" title="1.UserController"></a>1.UserController</h3><blockquote>
<p>获取<code>user</code>对象需要反序列化</p>
</blockquote>
<p>在<code>pom.xml</code>中引入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--fastjson--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.fastjson2<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.25<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><strong>UserController</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/info&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;?&gt; getUserInfo(<span class="meta">@Param(&quot;token&quot;)</span> String token)&#123;</span><br><span class="line">    Map&lt;String,Object&gt; data = userService.getUserInfo(token);</span><br><span class="line">    <span class="keyword">if</span>(data != <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> Result.success(data);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Result.fail(<span class="number">20003</span>,<span class="string">&quot;用户信息获取失败&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="2-UserServiceImpl-1"><a href="#2-UserServiceImpl-1" class="headerlink" title="2.UserServiceImpl"></a>2.<strong>UserServiceImpl</strong></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title function_">getUserInfo</span><span class="params">(String token)</span> &#123;</span><br><span class="line">    <span class="comment">// 从redis查询token</span></span><br><span class="line">    <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> redisTemplate.opsForValue().get(token);</span><br><span class="line">    <span class="comment">// 反序列化</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> JSON.parseObject(JSON.toJSONString(obj),User.class);</span><br><span class="line">    <span class="keyword">if</span>(user != <span class="literal">null</span>)&#123;</span><br><span class="line">        Map&lt;String, Object&gt; data =  <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        data.put(<span class="string">&quot;name&quot;</span>,user.getUsername());</span><br><span class="line">        data.put(<span class="string">&quot;avatar&quot;</span>,user.getAvatar());</span><br><span class="line">        List&lt;String&gt; roleList = <span class="built_in">this</span>.getBaseMapper().getRoleNamesByUserId(user.getId());</span><br><span class="line">        data.put(<span class="string">&quot;roles&quot;</span>, roleList);</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="3-UserMapper-xml"><a href="#3-UserMapper-xml" class="headerlink" title="3.UserMapper.xml"></a>3.UserMapper.xml</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getRoleNamesByUserId&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Integer&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;String&quot;</span>&gt;</span></span><br><span class="line">    SELECT</span><br><span class="line">    b.role_name</span><br><span class="line">    FROM x_user_role a,x_role b</span><br><span class="line">    WHERE a.`user_id` = #&#123;userId&#125;</span><br><span class="line">    AND a.`role_id` = b.`role_id`</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="4-UserMapper-java"><a href="#4-UserMapper-java" class="headerlink" title="4.UserMapper.java"></a>4.UserMapper.java</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt; &#123;</span><br><span class="line">    </span><br><span class="line">    List&lt;String&gt; <span class="title function_">getRoleNamesByUserId</span><span class="params">(Integer userId)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="4-3、注销"><a href="#4-3、注销" class="headerlink" title="4.3、注销"></a>4.3、注销</h2><table>
<thead>
<tr>
<th>接口属性</th>
<th>值</th>
</tr>
</thead>
<tbody><tr>
<td>url</td>
<td>&#x2F;user&#x2F;logout</td>
</tr>
<tr>
<td>method</td>
<td>post</td>
</tr>
</tbody></table>
<h3 id="1-UserController-2"><a href="#1-UserController-2" class="headerlink" title="1.UserController"></a>1.UserController</h3><blockquote>
<p>X-Token 是从请求头里传过来的</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/logout&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;?&gt; logout(<span class="meta">@RequestHeader(&quot;X-Token&quot;)</span> String token) &#123;</span><br><span class="line">    userService.logout(token);</span><br><span class="line">    <span class="keyword">return</span> Result.success();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="2-UserServiceIpml"><a href="#2-UserServiceIpml" class="headerlink" title="2.UserServiceIpml"></a>2.UserServiceIpml</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">logout</span><span class="params">(String token)</span> &#123;</span><br><span class="line">    redisTemplate.delete(token);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h1 id="五、用户列表查询接口"><a href="#五、用户列表查询接口" class="headerlink" title="五、用户列表查询接口"></a>五、用户列表查询接口</h1><h2 id="1、UserController"><a href="#1、UserController" class="headerlink" title="1、UserController"></a>1、UserController</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;Map&lt;String,Object&gt;&gt; <span class="title function_">getUserList</span><span class="params">(<span class="meta">@RequestParam(value = &quot;username&quot;,required = false)</span> String username,</span></span><br><span class="line"><span class="params">                                                  <span class="meta">@RequestParam(value = &quot;phone&quot;,required = false)</span> String phone,</span></span><br><span class="line"><span class="params">                                                  <span class="meta">@RequestParam(&quot;pageNo&quot;)</span> Long pageNO,</span></span><br><span class="line"><span class="params">                                                  <span class="meta">@RequestParam(&quot;pageSize&quot;)</span> Long pageSize)</span> &#123;</span><br><span class="line">        LambdaQueryWrapper&lt;User&gt; lqw  = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        lqw.likeRight(StringUtils.hasLength(username),User::getUsername,username);</span><br><span class="line">        lqw.likeRight(StringUtils.hasLength(phone),User::getPhone,phone);</span><br><span class="line">        <span class="comment">// 按用户id降序排序</span></span><br><span class="line"><span class="comment">//        lqw.orderByDesc(User::getId);</span></span><br><span class="line">        Page&lt;User&gt; page = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(pageNO,pageSize);</span><br><span class="line">        userService.page(page,lqw);</span><br><span class="line"></span><br><span class="line">        Map&lt;String ,Object&gt; data = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        data.put(<span class="string">&quot;total&quot;</span>,page.getTotal());</span><br><span class="line">        data.put(<span class="string">&quot;rows&quot;</span>,page.getRecords());</span><br><span class="line">        <span class="keyword">return</span> Result.success(data);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<p><strong>注意：</strong></p>
<ul>
<li>用分页查询时需要若没有配置分页拦截器则查不到total的总记录数</li>
</ul>
<p><strong>解决</strong></p>
<ul>
<li>创建<code>MybatisPlusInterceptor</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MPConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">MybatisPlusInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>(DbType.MYSQL));</span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="2、用户列表前端对接"><a href="#2、用户列表前端对接" class="headerlink" title="2、用户列表前端对接"></a>2、用户列表前端对接</h2><blockquote>
<p><code>src\api\userManager.js</code>中每个方法对应一个后端接口</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">getUserList</span>(<span class="params">searchModel</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">          <span class="attr">url</span>: <span class="string">&#x27;/user/list&#x27;</span>,</span><br><span class="line">          <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">          <span class="attr">params</span>: &#123;</span><br><span class="line">              <span class="attr">pageNo</span>: searchModel.<span class="property">pageNo</span>,</span><br><span class="line">              <span class="attr">pageSize</span>: searchModel.<span class="property">pageSize</span>,</span><br><span class="line">              <span class="attr">username</span>: searchModel.<span class="property">username</span>,</span><br><span class="line">              <span class="attr">phone</span>: searchModel.<span class="property">phone</span></span><br><span class="line">          &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p><code>src\views\sys\user.vue</code>中调用上述方法，具体如下</p>
</blockquote>
<p>调用前需要导入<code>import userApi from &quot;@/api/userManage&quot;;</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> userApi <span class="keyword">from</span> <span class="string">&quot;@/api/userManage&quot;</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">getUserList</span>(<span class="params"></span>) &#123;</span><br><span class="line">    userApi.<span class="title function_">getUserList</span>(<span class="variable language_">this</span>.<span class="property">searchModel</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">userList</span> = response.<span class="property">data</span>.<span class="property">rows</span>;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">total</span> = response.<span class="property">data</span>.<span class="property">total</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>



<p><strong>注意</strong></p>
<p>但是需要上述方法调用才会执行，这样登录进去就可以看到数据</p>
<p>所有需要让页面加载时就做一次查询</p>
<p>此时我们需要用到钩子函数</p>
<p>methods中定义方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">getUserList</span>();</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>



<p>实现条件查询，需要为查询按钮绑定函数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;el-button</span><br><span class="line">@click=&quot;getUserList&quot;</span><br><span class="line">type=&quot;primary&quot;</span><br><span class="line">icon=&quot;el-icon-search&quot;</span><br><span class="line">round</span><br><span class="line">&gt;查询&lt;/el-button&gt;</span><br></pre></td></tr></table></figure>



<p>实现分页查询按5、10条数据展示</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">handleSizeChange</span>(<span class="params">pageSize</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">searchModel</span>.<span class="property">pageSize</span> = pageSize;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">getUserList</span>();</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">handleCurrentChange</span>(<span class="params">pageNo</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">searchModel</span>.<span class="property">pageNo</span> = pageNo;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">getUserList</span>();</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>



<p>由于分页查询出来的数据每次都是从1开始的，需要通过计算显示该条数据的正确序号</p>
<p>在查询列表里计算</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template slot-scope=&quot;scope&quot;&gt;</span><br><span class="line">  &#123;&#123;</span><br><span class="line">    (searchModel.pageNo - 1) * searchModel.pageSize + scope.$index + 1</span><br><span class="line">  &#125;&#125;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>



<p>一键删除输入框的内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;el-input</span><br><span class="line">  v-model=&quot;searchModel.username&quot;</span><br><span class="line">  placeholder=&quot;用户名&quot;</span><br><span class="line">  clearable</span><br><span class="line">&gt;&lt;/el-input&gt;</span><br></pre></td></tr></table></figure>





<h1 id="六、新增用户接口"><a href="#六、新增用户接口" class="headerlink" title="六、新增用户接口"></a>六、新增用户接口</h1><h2 id="1、UserController-1"><a href="#1、UserController-1" class="headerlink" title="1、UserController"></a>1、UserController</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;?&gt; addUser(<span class="meta">@RequestBody</span> User user) &#123;</span><br><span class="line">    user.setPassword(passwordEncoder.encode(user.getPassword()));</span><br><span class="line">    userService.save(user);</span><br><span class="line">    <span class="keyword">return</span> Result.success(<span class="string">&quot;新增用户成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="2、设计前端新增界面"><a href="#2、设计前端新增界面" class="headerlink" title="2、设计前端新增界面"></a>2、设计前端新增界面</h2><blockquote>
<p>使用对话框组件</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;el-dialog title=&quot;收货地址&quot; :visible.sync=&quot;dialogFormVisible&quot;&gt;</span><br><span class="line">  &lt;el-form :model=&quot;form&quot;&gt;</span><br><span class="line">    &lt;el-form-item label=&quot;活动名称&quot; :label-width=&quot;formLabelWidth&quot;&gt;</span><br><span class="line">      &lt;el-input v-model=&quot;form.name&quot; autocomplete=&quot;off&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">    &lt;/el-form-item&gt;</span><br><span class="line">    &lt;el-form-item label=&quot;活动区域&quot; :label-width=&quot;formLabelWidth&quot;&gt;</span><br><span class="line">      &lt;el-select v-model=&quot;form.region&quot; placeholder=&quot;请选择活动区域&quot;&gt;</span><br><span class="line">        &lt;el-option label=&quot;区域一&quot; value=&quot;shanghai&quot;&gt;&lt;/el-option&gt;</span><br><span class="line">        &lt;el-option label=&quot;区域二&quot; value=&quot;beijing&quot;&gt;&lt;/el-option&gt;</span><br><span class="line">      &lt;/el-select&gt;</span><br><span class="line">    &lt;/el-form-item&gt;</span><br><span class="line">  &lt;/el-form&gt;</span><br><span class="line">  &lt;div slot=&quot;footer&quot; class=&quot;dialog-footer&quot;&gt;</span><br><span class="line">    &lt;el-button @click=&quot;dialogFormVisible = false&quot;&gt;取 消&lt;/el-button&gt;</span><br><span class="line">    &lt;el-button type=&quot;primary&quot; @click=&quot;dialogFormVisible = false&quot;&gt;确 定&lt;/el-button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/el-dialog&gt;</span><br></pre></td></tr></table></figure>

<p>复用<code>title</code>，因为后面修改用户需要在掉一次该对话框</p>
<p>使用 <code>:title</code>绑定&amp;#x20;</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;el-dialog</span><br><span class="line">      @close=&quot;clearForm&quot;</span><br><span class="line">      :title=&quot;title&quot;</span><br><span class="line">      :visible.sync=&quot;dialogFormVisible&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>同样需要在scrip下data中定义title</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">title</span>: <span class="string">&quot;&quot;</span>,</span><br></pre></td></tr></table></figure>



<p><strong>修改需要绑定的属性</strong></p>
<ul>
<li><code>v-model</code></li>
</ul>
<p><strong>定义数据</strong></p>
<ul>
<li><code>label-width</code> :指的时下面的宽度</li>
</ul>
<p><img src="/image/laybel-width_uxbls2I7kf.png"></p>
<p><strong>为新增按钮绑定单击事件</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;el-col :span=&quot;4&quot; align=&quot;right&quot;&gt;</span><br><span class="line">  &lt;el-button</span><br><span class="line">    @click=&quot;openEditUI(null)&quot;</span><br><span class="line">    type=&quot;primary&quot;</span><br><span class="line">    icon=&quot;el-icon-plus&quot;</span><br><span class="line">    circle</span><br><span class="line">  &gt;&lt;/el-button&gt;</span><br><span class="line">&lt;/el-col&gt;</span><br></pre></td></tr></table></figure>



<p>定义<code>openEditUI</code> 方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">openEditUI</span>(<span class="params">id</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">title</span> = <span class="string">&#x27;新增用户&#x27;</span>,</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">dialogFormVisible</span> = <span class="literal">true</span>;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>



<p><strong>问题</strong></p>
<p>当我们点开新增按钮并填写了用户信息时之后，关闭对话框</p>
<p>下次重新打开，会发现上一次输入的数据还在上面</p>
<p><strong>解决</strong></p>
<blockquote>
<p>对话框组件提供了一个关闭(close)事件</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 用户信息编辑对话框 --&gt;</span><br><span class="line">&lt;el-dialog</span><br><span class="line">  @close=&quot;clearForm&quot;</span><br><span class="line">  :title=&quot;title&quot;</span><br><span class="line">  :visible.sync=&quot;dialogFormVisible&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>定义<code>clearlForm</code>方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">clearForm</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">userForm</span> = &#123;&#125;;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">userFormRef</span>.<span class="title function_">clearValidate</span>();</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>



<h2 id="3、表单验证"><a href="#3、表单验证" class="headerlink" title="3、表单验证"></a>3、表单验证</h2><blockquote>
<p>Form 组件提供了表单验证的功能，只需要通过 <code>rules</code> 属性传入约定的验证规则</p>
<p>并将 Form-Item 的 <code>prop</code> 属性设置为需校验的字段名即可。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;el-form :model=&quot;userForm&quot; ref=&quot;userFormRef&quot; :rules=&quot;rules&quot;&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">rules</span>: &#123;</span><br><span class="line">  <span class="attr">username</span>: [</span><br><span class="line">    &#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&quot;请输入用户名&quot;</span>, <span class="attr">trigger</span>: <span class="string">&quot;blur&quot;</span> &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">min</span>: <span class="number">3</span>,</span><br><span class="line">      <span class="attr">max</span>: <span class="number">20</span>,</span><br><span class="line">      <span class="attr">message</span>: <span class="string">&quot;长度在 3 到 20 个字符&quot;</span>,</span><br><span class="line">      <span class="attr">trigger</span>: <span class="string">&quot;blur&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">password</span>: [</span><br><span class="line">    &#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&quot;密码不能为空&quot;</span>, <span class="attr">trigger</span>: <span class="string">&quot;blur&quot;</span> &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">min</span>: <span class="number">6</span>,</span><br><span class="line">      <span class="attr">max</span>: <span class="number">20</span>,</span><br><span class="line">      <span class="attr">message</span>: <span class="string">&quot;长度在 6 到 16 个字符&quot;</span>,</span><br><span class="line">      <span class="attr">trigger</span>: <span class="string">&quot;blur&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">phone</span>: [</span><br><span class="line">    &#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&quot;请输入手机号码&quot;</span>, <span class="attr">trigger</span>: <span class="string">&quot;blur&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">validator</span>: checkPhone, <span class="attr">trigger</span>: <span class="string">&quot;blur&quot;</span> &#125;,</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">email</span>: [</span><br><span class="line">    &#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&quot;请输入电子邮件&quot;</span>, <span class="attr">trigger</span>: <span class="string">&quot;blur&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">validator</span>: checkEmail, <span class="attr">trigger</span>: <span class="string">&quot;blur&quot;</span> &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p><code>required: true</code> :表示必填项</p>
<p><code>trigger: &quot;blur&quot;</code> : 表示失去焦点时触发&amp;#x20;</p>
<p><strong>使用表单验证需要加</strong>**<code>prop</code>**<strong>属性</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 用户名 --&gt;</span><br><span class="line">&lt;el-form-item</span><br><span class="line">  label=&quot;用户名&quot;</span><br><span class="line">  prop=&quot;username&quot;</span><br><span class="line">  :label-width=&quot;formLabelWidth&quot;</span><br><span class="line">  &gt;&lt;i class=&quot;el-icon-user-solid&quot;&gt;&lt;/i&gt;</span><br><span class="line">  &lt;el-input v-model=&quot;userForm.username&quot; autocomplete=&quot;off&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">&lt;/el-form-item&gt;</span><br></pre></td></tr></table></figure>



<p><strong>自定义校验规则</strong></p>
<p>在<code>data</code>中定义函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="title function_">checkEmail</span> = (<span class="params">rule, value, callback</span>) =&gt; &#123;</span><br><span class="line">      <span class="keyword">var</span> reg = <span class="regexp">/^([a-zA-Z\d][\w-]&#123;2,&#125;)@(\w&#123;2,&#125;)\.([a-z]&#123;2,&#125;)(\.[a-z]&#123;2,&#125;)?$/</span>;</span><br><span class="line">      <span class="keyword">if</span> (!reg.<span class="title function_">test</span>(value)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">callback</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;邮箱格式错误&quot;</span>));</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="title function_">callback</span>();</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">var</span> <span class="title function_">checkPhone</span> = (<span class="params">rule, value, callback</span>) =&gt; &#123;</span><br><span class="line">      <span class="keyword">let</span> reg = <span class="regexp">/^1[3|4|5|7|8][0-9]&#123;9&#125;$/</span>;</span><br><span class="line">      <span class="keyword">if</span> (!reg.<span class="title function_">test</span>(value)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">callback</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;号码格式错误&quot;</span>));</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="title function_">callback</span>();</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure>

<p>调用</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">phone</span>: [</span><br><span class="line">  &#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&quot;请输入手机号码&quot;</span>, <span class="attr">trigger</span>: <span class="string">&quot;blur&quot;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">validator</span>: checkPhone, <span class="attr">trigger</span>: <span class="string">&quot;blur&quot;</span> &#125;,</span><br><span class="line">],</span><br><span class="line"><span class="attr">email</span>: [</span><br><span class="line">  &#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&quot;请输入电子邮件&quot;</span>, <span class="attr">trigger</span>: <span class="string">&quot;blur&quot;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">validator</span>: checkEmail, <span class="attr">trigger</span>: <span class="string">&quot;blur&quot;</span> &#125;,</span><br><span class="line">],</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p><strong>小问题</strong></p>
<blockquote>
<p>上一次验证的提示信息在下一次打开时未消失</p>
<p>需要清理校验结果</p>
</blockquote>
<p><strong>处理过程</strong></p>
<blockquote>
<p>定义<code>ref</code>具体如下</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!-- 用户信息编辑对话框 --&gt;</span><br><span class="line">&lt;el-dialog</span><br><span class="line">  @close=&quot;clearForm&quot;</span><br><span class="line">  :title=&quot;title&quot;</span><br><span class="line">  :visible.sync=&quot;dialogFormVisible&quot;</span><br><span class="line">&gt;</span><br><span class="line">  &lt;el-form :model=&quot;userForm&quot; ref=&quot;userFormRef&quot; :rules=&quot;rules&quot;&gt;</span><br><span class="line">    &lt;!-- 用户名 --&gt;</span><br><span class="line">    &lt;el-form-item</span><br><span class="line">      label=&quot;用户名&quot;</span><br><span class="line">      prop=&quot;username&quot;</span><br><span class="line">      :label-width=&quot;formLabelWidth&quot;</span><br><span class="line">      &gt;&lt;i class=&quot;el-icon-user-solid&quot;&gt;&lt;/i&gt;</span><br><span class="line">      &lt;el-input v-model=&quot;userForm.username&quot; autocomplete=&quot;off&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">    &lt;/el-form-item&gt;</span><br></pre></td></tr></table></figure>

<p>clearForm方法中</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">clearForm</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">userForm</span> = &#123;&#125;;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">userFormRef</span>.<span class="title function_">clearValidate</span>();</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>



<p><strong>点确定按钮也需要进行表单校验</strong></p>
<blockquote>
<p>为确定按钮添加保存用户的单击事件</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;el-button type=&quot;primary&quot; @click=&quot;saveUser&quot;&gt;确 定&lt;/el-button&gt;</span><br></pre></td></tr></table></figure>

<p>实现<code>saveUser</code>方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">saveUser</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// alert(&quot;1234&quot;);</span></span><br><span class="line">  <span class="comment">/* 先触发表单验证 */</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">userFormRef</span>.<span class="title function_">validate</span>(<span class="function">(<span class="params">valid</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (valid) &#123;</span><br><span class="line">      <span class="comment">// 提交给后台</span></span><br><span class="line">      userApi.<span class="title function_">saveUser</span>(<span class="variable language_">this</span>.<span class="property">userForm</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 成功提示</span></span><br><span class="line">        <span class="variable language_">this</span>.$message(&#123;</span><br><span class="line">          <span class="attr">message</span>: response.<span class="property">message</span>,</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&quot;success&quot;</span>,</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 关闭对话框</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">dialogFormVisible</span> = <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">// 刷新表格</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">getUserList</span>();</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;error submit!!&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>



<h2 id="4、表单提交"><a href="#4、表单提交" class="headerlink" title="4、表单提交"></a>4、表单提交</h2><p><strong>前后端对接</strong></p>
<p><strong>后端</strong></p>
<blockquote>
<p>后端新增用户已实现</p>
</blockquote>
<p><strong>前端</strong></p>
<blockquote>
<p><code>src\api\userManage.js</code>下创建交互方法</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">addUser</span>(<span class="params">user</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;/user&#x27;</span>,</span><br><span class="line">        <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">        <span class="attr">data</span>: user</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>



<p>提交给后台</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">saveUser</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// alert(&quot;1234&quot;);</span></span><br><span class="line">  <span class="comment">/* 先触发表单验证 */</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">userFormRef</span>.<span class="title function_">validate</span>(<span class="function">(<span class="params">valid</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (valid) &#123;</span><br><span class="line">      <span class="comment">// 提交给后台</span></span><br><span class="line">      userApi.<span class="title function_">addUser</span>(<span class="variable language_">this</span>.<span class="property">userForm</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 成功提示</span></span><br><span class="line">        <span class="variable language_">this</span>.$message(&#123;</span><br><span class="line">          <span class="attr">message</span>: response.<span class="property">message</span>,</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&quot;success&quot;</span>,</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 关闭对话框</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">dialogFormVisible</span> = <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">// 刷新表格</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">getUserList</span>();</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;error submit!!&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>添加用户状态标签</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;el-table-column prop=&quot;status&quot; label=&quot;用户状态&quot; width=&quot;100&quot;&gt;</span><br><span class="line">  &lt;template slot-scope=&quot;scope&quot;&gt;</span><br><span class="line">    &lt;el-tag v-if=&quot;scope.row.status == 1&quot;&gt;正常&lt;/el-tag&gt;</span><br><span class="line">    &lt;el-tag v-else type=&quot;danger&quot;&gt;异常&lt;/el-tag&gt;</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line">&lt;/el-table-column&gt;</span><br></pre></td></tr></table></figure>



<h1 id="七、密码加密"><a href="#七、密码加密" class="headerlink" title="七、密码加密"></a>七、密码加密</h1><h2 id="1、修改登录接口"><a href="#1、修改登录接口" class="headerlink" title="1、修改登录接口"></a>1、修改登录接口</h2><p>导入依赖<code>pom.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--Spring-Security--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>启动类配置<code>Bean</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> PasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注入对象<code>UserController</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> PasswordEncoder passwordEncoder;</span><br></pre></td></tr></table></figure>

<p>加密处理</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;?&gt; addUser(<span class="meta">@RequestBody</span> User user) &#123;</span><br><span class="line">    user.setPassword(passwordEncoder.encode(user.getPassword()));</span><br><span class="line">    userService.save(user);</span><br><span class="line">    <span class="keyword">return</span> Result.success(<span class="string">&quot;新增用户成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>注意：</p>
<p>每次产生的密码都是随机生成的，我们需要对登录逻辑业务层方法进行处理</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 如果结果不为空，并且密码和传入的是匹配的，则生成token，将用户信息存入redis</span></span><br><span class="line"><span class="keyword">if</span> (loginUser != <span class="literal">null</span> &amp;&amp; passwordEncoder.matches(user.getPassword(), loginUser.getPassword())) &#123;</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="八、用户修改"><a href="#八、用户修改" class="headerlink" title="八、用户修改"></a>八、用户修改</h1><h2 id="1、UserController-2"><a href="#1、UserController-2" class="headerlink" title="1、UserController"></a>1、UserController</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;?&gt; updateUser(<span class="meta">@RequestBody</span> User user)&#123;</span><br><span class="line">    user.setPassword(<span class="literal">null</span>); <span class="comment">//密码不需要修改</span></span><br><span class="line">    userService.updateById(user);</span><br><span class="line">    <span class="keyword">return</span> Result.success(<span class="string">&quot;修改用户成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>修改用户需要再定义根据id查询用户信息接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;User&gt; <span class="title function_">getUserById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span>&#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.getById(id);</span><br><span class="line">    <span class="keyword">return</span> Result.success(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="2、增加修改和删除按钮"><a href="#2、增加修改和删除按钮" class="headerlink" title="2、增加修改和删除按钮"></a>2、增加修改和删除按钮</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template slot-scope=&quot;scope&quot;&gt;</span><br><span class="line">  &lt;el-button</span><br><span class="line">    @click=&quot;openEditUI(scope.row.id)&quot;</span><br><span class="line">    type=&quot;primary&quot;</span><br><span class="line">    icon=&quot;el-icon-edit&quot;</span><br><span class="line">    size=&quot;mini&quot;</span><br><span class="line">    circle</span><br><span class="line">  &gt;&lt;/el-button&gt;</span><br><span class="line">  &lt;el-button</span><br><span class="line">    @click=&quot;deleteUser(scope.row)&quot;</span><br><span class="line">    type=&quot;danger&quot;</span><br><span class="line">    icon=&quot;el-icon-delete&quot;</span><br><span class="line">    size=&quot;mini&quot;</span><br><span class="line">    circle</span><br><span class="line">  &gt;&lt;/el-button&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>



<h2 id="3、对接"><a href="#3、对接" class="headerlink" title="3、对接"></a>3、对接</h2><blockquote>
<p><code>src\api\userManage.js</code>&amp;#x20;</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">getUserById</span>(<span class="params">id</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">        <span class="comment">// url: &#x27;/user/&#x27; + id,</span></span><br><span class="line">        <span class="attr">url</span>: <span class="string">`/user/<span class="subst">$&#123;id&#125;</span>`</span>,</span><br><span class="line">        <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="title function_">updateUser</span>(<span class="params">user</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;/user&#x27;</span>,</span><br><span class="line">        <span class="attr">method</span>: <span class="string">&#x27;put&#x27;</span>,</span><br><span class="line">        <span class="attr">data</span>: user</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>



<blockquote>
<p>复用openEditUI</p>
<p>修改该方法</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">openEditUI</span>(<span class="params">id</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (id == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">title</span> = <span class="string">&quot;新增用户&quot;</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">title</span> = <span class="string">&quot;修改用户&quot;</span>;</span><br><span class="line">    <span class="comment">// 根据id查询用户数据</span></span><br><span class="line">    userApi.<span class="title function_">getUserById</span>(id).<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">userForm</span> = response.<span class="property">data</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>修改用户时不需要修改密码</p>
<p>需要对编辑对话框做个判断</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;el-form-item</span><br><span class="line">  v-if=&quot;userForm.id == null || userForm.id == undefined&quot;</span><br><span class="line">  label=&quot;登录密码&quot;</span><br><span class="line">  prop=&quot;password&quot;</span><br><span class="line">  :label-width=&quot;formLabelWidth&quot;</span><br><span class="line">  &gt;&lt;i class=&quot;el-icon-key&quot;&gt;&lt;/i&gt;</span><br><span class="line">  &lt;el-input</span><br><span class="line">    type=&quot;password&quot;</span><br><span class="line">    v-model=&quot;userForm.password&quot;</span><br><span class="line">    autocomplete=&quot;off&quot;</span><br><span class="line">    show-password</span><br><span class="line">  &gt;&lt;/el-input&gt;</span><br><span class="line">&lt;/el-form-item&gt;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>添加保存用户方法<code>src\api\userManage.js</code></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">saveUser</span>(<span class="params">user</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (user.<span class="property">id</span> == <span class="literal">null</span> &amp;&amp; user.<span class="property">id</span> == <span class="literal">undefined</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">addUser</span>(user);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">updateUser</span>(user);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<blockquote>
<p>修改<code>user.vue</code>中saveUser方法</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">saveUser</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// alert(&quot;1234&quot;);</span></span><br><span class="line">  <span class="comment">/* 先触发表单验证 */</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">userFormRef</span>.<span class="title function_">validate</span>(<span class="function">(<span class="params">valid</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (valid) &#123;</span><br><span class="line">      <span class="comment">// 提交给后台</span></span><br><span class="line">      userApi.<span class="title function_">saveUser</span>(<span class="variable language_">this</span>.<span class="property">userForm</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 成功提示</span></span><br><span class="line">        <span class="variable language_">this</span>.$message(&#123;</span><br><span class="line">          <span class="attr">message</span>: response.<span class="property">message</span>,</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&quot;success&quot;</span>,</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 关闭对话框</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">dialogFormVisible</span> = <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">// 刷新表格</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">getUserList</span>();</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;error submit!!&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>





<h1 id="九、用户删除"><a href="#九、用户删除" class="headerlink" title="九、用户删除"></a>九、用户删除</h1><h2 id="1、UserController-3"><a href="#1、UserController-3" class="headerlink" title="1、UserController"></a>1、UserController</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@DeleteMapping(&quot;&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;User&gt; <span class="title function_">deleteUserById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span>&#123;</span><br><span class="line">    userService.removeById(id);</span><br><span class="line">    <span class="keyword">return</span> Result.success(<span class="string">&quot;删除用户成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="2、逻辑删除"><a href="#2、逻辑删除" class="headerlink" title="2、逻辑删除"></a>2、逻辑删除</h2><blockquote>
<p><code>properties.yml</code></p>
</blockquote>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">logic-delete-field:</span> <span class="string">deleted</span> <span class="comment"># 全局逻辑删除的实体字段名(since 3.3.0,配置后可以忽略不配置步骤2)</span></span><br><span class="line">      <span class="attr">logic-delete-value:</span> <span class="number">1</span> <span class="comment"># 逻辑已删除值(默认为 1)</span></span><br><span class="line">      <span class="attr">logic-not-delete-value:</span> <span class="number">0</span> <span class="comment"># 逻辑未删除值(默认为 0)</span></span><br></pre></td></tr></table></figure>



<h2 id="3、对接-1"><a href="#3、对接-1" class="headerlink" title="3、对接"></a>3、对接</h2><blockquote>
<p>定义方法<code>src\api\userManage.js</code></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">deleteUserById</span>(<span class="params">id</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">`/user/<span class="subst">$&#123;id&#125;</span>`</span>,</span><br><span class="line">        <span class="attr">method</span>: <span class="string">&#x27;delete&#x27;</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>user.vue</code> 绑定按钮</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;el-button</span><br><span class="line">  @click=&quot;deleteUser(scope.row)&quot;</span><br><span class="line">  type=&quot;danger&quot;</span><br><span class="line">  icon=&quot;el-icon-delete&quot;</span><br><span class="line">  size=&quot;mini&quot;</span><br><span class="line">  circle</span><br><span class="line">&gt;&lt;/el-button&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>定义<code>deleteUser</code>方法</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">deleteUser</span>(<span class="params">user</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.$confirm(<span class="string">`你确认删除用户 <span class="subst">$&#123;user.username&#125;</span> ?`</span>, <span class="string">&quot;提示&quot;</span>, &#123;</span><br><span class="line">    <span class="attr">confirmButtonText</span>: <span class="string">&quot;确定&quot;</span>,</span><br><span class="line">    <span class="attr">cancelButtonText</span>: <span class="string">&quot;取消&quot;</span>,</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&quot;warning&quot;</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      userApi.<span class="title function_">deleteUserById</span>(user.<span class="property">id</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.$message(&#123;</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&quot;success&quot;</span>,</span><br><span class="line">          <span class="attr">message</span>: response.<span class="property">message</span>,</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">getUserList</span>();</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.$message(&#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;info&quot;</span>,</span><br><span class="line">        <span class="attr">message</span>: <span class="string">&quot;已取消删除&quot;</span>,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>项目笔记</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>后端</tag>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>我的第一篇博客</title>
    <url>/post/63785.html</url>
    <content><![CDATA[<h1 id="用户管理系统"><a href="#用户管理系统" class="headerlink" title="用户管理系统"></a>用户管理系统</h1><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul>
<li><a href="#%E9%A1%B9%E7%9B%AE%E6%A6%82%E8%BF%B0">项目概述</a><ul>
<li><p><a href="#1%E7%9B%AE%E6%A0%87">1.目标</a></p>
</li>
<li><p><a href="#2%E5%BC%80%E5%8F%91%E6%A8%A1%E5%BC%8F">2.开发模式</a></p>
</li>
<li><p><a href="#3%E6%8A%80%E6%9C%AF%E6%A0%88">3.技术栈</a></p>
</li>
</ul>
</li>
</ul>
<hr>
<h1 id="项目概述"><a href="#项目概述" class="headerlink" title="项目概述"></a>项目概述</h1><h2 id="1-目标"><a href="#1-目标" class="headerlink" title="1.目标"></a>1.目标</h2><blockquote>
<p>通过学习本项目，深刻理解<strong>前后端分离的思想</strong>，具备独立搭建前后端分离项目的能力及功能扩展能力</p>
</blockquote>
<h2 id="2-开发模式"><a href="#2-开发模式" class="headerlink" title="2.开发模式"></a>2.开发模式</h2><blockquote>
<p>前端项目：<code>Vue+ElementUI</code></p>
<p>后端项目：<code>SpringBoot+MyBatis-Plus</code></p>
<p>数据库：    <code>MySql</code></p>
</blockquote>
<h2 id="3-技术栈"><a href="#3-技术栈" class="headerlink" title="3.技术栈"></a>3.技术栈</h2><table>
<thead>
<tr>
<th>前端技术</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>Vue</code></td>
<td>前端框架</td>
</tr>
<tr>
<td><code>Vuex</code></td>
<td>全局状态管理框架</td>
</tr>
<tr>
<td><code>ElementUI</code></td>
<td>前端UI框架</td>
</tr>
<tr>
<td><code>Axios</code></td>
<td>前端HTTP框架</td>
</tr>
<tr>
<td><code>vue-element-admin</code></td>
<td>项目脚手架</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>后端技术</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>SpringBoot</code></td>
<td>容器+MVC框架</td>
</tr>
<tr>
<td><code>MyBatis</code></td>
<td>ORM框架</td>
</tr>
<tr>
<td><code>MyBatis-plus</code></td>
<td>MyBatis增强工具</td>
</tr>
<tr>
<td><code>Redis</code></td>
<td>非关系型数据库</td>
</tr>
</tbody></table>
<p><a href="https://www.wolai.com/qgsYJoozyv59fshVdQAUvs" title="前端">前端</a></p>
<p><a href="https://www.wolai.com/nuemM6Whjfy18p1N61D21q" title="后端">后端</a></p>
<p><a href="https://www.wolai.com/xzg8frW8EeQ1ZSkz4UAfcf" title="前后端对接">前后端对接</a></p>
<p><a href="https://www.wolai.com/pSVQdgwdnjTfJb2hQKNnMJ" title="知识点">知识点</a></p>
]]></content>
      <categories>
        <category>项目笔记</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>SpringBoot</tag>
        <tag>vue</tag>
        <tag>Vue</tag>
        <tag>Element UI</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot整合第三方技术</title>
    <url>/post/0.html</url>
    <content><![CDATA[<h1 id="springBoot整合第三方技术"><a href="#springBoot整合第三方技术" class="headerlink" title="springBoot整合第三方技术"></a>springBoot整合第三方技术</h1><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul>
<li><a href="#%E4%B8%80%E6%95%B4%E5%90%88MyBatis">一、整合MyBatis</a><ul>
<li><a href="#1%E5%88%9B%E5%BB%BA%E6%96%B0%E6%A8%A1%E5%9D%97">1.创建新模块</a><ul>
<li><a href="#%E9%80%89%E6%8B%A9spring%E5%88%9D%E5%A7%8B%E5%8C%96%E5%B9%B6%E9%85%8D%E7%BD%AE%E6%A8%A1%E5%9D%97%E7%9B%B8%E5%85%B3%E5%9F%BA%E7%A1%80%E4%BF%A1%E6%81%AF">选择spring初始化，并配置模块相关基础信息</a></li>
</ul>
</li>
<li><a href="#2%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86">2.常见问题处理</a></li>
</ul>
</li>
<li><a href="#%E4%BA%8C%E6%95%B4%E5%90%88MyBatis-Plus">二.整合MyBatis-Plus</a><ul>
<li><a href="#1%E6%89%8B%E5%8A%A8%E6%B7%BBspringBooot%E6%95%B4%E5%90%88MybatisPlus%E5%9D%90%E6%A0%87">1.手动添springBooot整合MybatisPlus坐标</a></li>
<li><a href="#2%E5%AE%9A%E4%B9%89%E6%95%B0%E6%8D%AE%E5%B1%82%E6%8E%A5%E5%8F%A3%E4%B8%8E%E6%98%A0%E5%B0%84%E9%85%8D%E7%BD%AE%E7%BB%A7%E6%89%BFBaseMapper">2.定义数据层接口与映射配置，继承BaseMapper</a></li>
<li><a href="#3%E5%90%8C%E6%95%B4%E5%90%88mybatis">3.同整合mybatis</a></li>
</ul>
</li>
<li><a href="#%E4%B8%89%E6%95%B4%E5%90%88Druid">三、整合Druid</a><ul>
<li><a href="#1%E5%AF%BC%E5%85%A5%E5%AF%B9%E5%BA%94%E7%9A%84starter">1.导入对应的starter</a></li>
<li><a href="#2%E9%85%8D%E7%BD%AE%E5%AF%B9%E5%BA%94%E7%9A%84%E8%AE%BE%E7%BD%AE%E6%88%96%E9%87%87%E7%94%A8%E9%BB%98%E8%AE%A4%E9%85%8D%E7%BD%AE">2.配置对应的设置或采用默认配置</a></li>
</ul>
</li>
</ul>
<h1 id="一、整合MyBatis"><a href="#一、整合MyBatis" class="headerlink" title="一、整合MyBatis"></a>一、整合MyBatis</h1><ul>
<li>核心配置： 数据库连接相关信息</li>
<li>映射配置：SQL映射（XML&#x2F;注解）</li>
</ul>
<h2 id="1-创建新模块"><a href="#1-创建新模块" class="headerlink" title="1.创建新模块"></a>1.创建新模块</h2><h3 id="选择spring初始化，并配置模块相关基础信息"><a href="#选择spring初始化，并配置模块相关基础信息" class="headerlink" title="选择spring初始化，并配置模块相关基础信息"></a>选择spring初始化，并配置模块相关基础信息</h3><ol>
<li>选择当前模块需要的技术集（自动导入依赖坐标）</li>
<li>设置数据源参数</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  datasource:</span><br><span class="line">    driver-class-name: com.mysql.jdbc.Driver</span><br><span class="line">    url: jdbc:mysql:<span class="comment">//localhost:3306/ssm</span></span><br><span class="line">    username: root</span><br><span class="line">    password: <span class="number">123456</span></span><br></pre></td></tr></table></figure>

<p>4.定义数据层接口与映射配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="meta">@Select(&quot;select *from tbl_book where id =#&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Book <span class="title function_">getById</span><span class="params">(Integer id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>5.测试类注入接口，测试功能</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SpringBootMyBatisApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(bookDao.getById(<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-常见问题处理"><a href="#2-常见问题处理" class="headerlink" title="2.常见问题处理"></a>2.常见问题处理</h2><ol>
<li>MySQL 8.X驱动强制要求设置时区<ul>
<li>修改url，添加serverTimezone设定</li>
<li>修改MySQL数据库配置</li>
</ul>
</li>
<li>驱动类过时，提醒更换为com.mysql.cj.jdbc.Driver</li>
</ol>
<h1 id="二-整合MyBatis-Plus"><a href="#二-整合MyBatis-Plus" class="headerlink" title="二.整合MyBatis-Plus"></a>二.整合MyBatis-Plus</h1><h2 id="1-手动添springBooot整合MybatisPlus坐标"><a href="#1-手动添springBooot整合MybatisPlus坐标" class="headerlink" title="1.手动添springBooot整合MybatisPlus坐标"></a>1.手动添springBooot整合MybatisPlus坐标</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;com.baomidou&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;<span class="number">3.4</span><span class="number">.3</span>&lt;/version&gt;</span><br><span class="line">  &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="2-定义数据层接口与映射配置，继承BaseMapper"><a href="#2-定义数据层接口与映射配置，继承BaseMapper" class="headerlink" title="2.定义数据层接口与映射配置，继承BaseMapper"></a>2.定义数据层接口与映射配置，继承BaseMapper</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookDao</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;Book&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-同整合mybatis"><a href="#3-同整合mybatis" class="headerlink" title="3.同整合mybatis"></a>3.同整合mybatis</h2><h1 id="三、整合Druid"><a href="#三、整合Druid" class="headerlink" title="三、整合Druid"></a>三、整合Druid</h1><h2 id="1-导入对应的starter"><a href="#1-导入对应的starter" class="headerlink" title="1.导入对应的starter"></a>1.导入对应的starter</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="2-配置对应的设置或采用默认配置"><a href="#2-配置对应的设置或采用默认配置" class="headerlink" title="2.配置对应的设置或采用默认配置"></a>2.配置对应的设置或采用默认配置</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  datasource:</span><br><span class="line">    druid:</span><br><span class="line">      driver-class-name: com.mysql.jdbc.Driver</span><br><span class="line">      url: jdbc:mysql://localhost:3306/ssm</span><br><span class="line">      username: root</span><br><span class="line">      password: 123456</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>SpringBoot</tag>
        <tag>MyBatis</tag>
      </tags>
  </entry>
</search>
